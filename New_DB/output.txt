URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Group/Delete Group/index.html

Delete Group
AutomatR.FreshDesk.Activities.DeleteGroup
The "Delete Group" activity in AutomatR is part of the Freshdesk activities package, providing the capability to delete a group within a Freshdesk account. This activity streamlines the process of managing groups in Freshdesk, allowing for the removal of a specific group based on its ID.
Properties
​
Name
Description
Input
Group ID
Specifies the ID of the group to be deleted. It is a required input, uniquely identifying the group to be removed from Freshdesk. String variables containing the group ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Group" activity onto the workflow.
Configure the properties by specifying the group ID of the group to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified group in Freshdesk.
Example:

Consider an example where the "Delete Group" activity is used to remove a specific group identified by the group ID:
Delete Group:
  Display Name: "Remove Support Team"
  Group ID: "987654321"
In this example, the activity deletes the group associated with the group ID "987654321." The workflow ensures that the group is successfully removed from Freshdesk. If the group is not found or any other issues occur, the activity raises exceptions for proper error handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Group/Update Group/index.html

Update Group
AutomatR.FreshDesk.Group.UpdateGroup
The "Update Group" activity in AutomatR is part of the Freshdesk activities package, facilitating the automation of group details update within a Freshdesk user's account. This activity streamlines the process of keeping group information up-to-date, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Description
Specifies the updated description of the group. String variables containing the updated description.
Group ID
Specifies the ID of the group to be updated. String variables containing the group ID.
Name
Specifies the updated name of the group. String variables containing the updated name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Update Group" activity onto the workflow.
Configure the properties by specifying the group ID and providing updated values for name and description as needed.
Optionally, configure the delay.
Execute the workflow to update the details for the specified group in Freshdesk.
Example:

Consider an example where the "Update Group" activity is used to update the name and description of a group with the ID "GRP123":
Update Group:
  Delay: 0
  Group ID: "GRP123"
  Name: "Updated Group Name"
  Description: "Updated group description"
In this example, the activity updates the name and description of the group with ID "GRP123". The response, containing information about the status of the update, is handled internally and not explicitly output.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Group/Create Group/index.html

Create Group
AutomatR.FreshDesk.Activities.CreateGroup
The "Create Group" activity in AutomatR is part of the Freshdesk activities package, designed to create a group with assigned agents in a Freshdesk instance. This activity streamlines the process of organizing agents to focus on specific problem areas, enhancing the efficiency of ticket management.
Properties
​
Name
Description
Input
Agent IDs
Specifies an array of agent user IDs separated by commas (e.g., "
[1,16]
"). It is a required input, defining the agents to be assigned to the group. Long array variables containing agent IDs.
Description
Specifies the description of the group. String variables containing the group description.
Name
Specifies the name of the group. It is a required input, serving as a unique identifier for the group. String variables containing the group name.
Unassigned For
Specifies the amount of time after which an escalation email will be sent if a ticket remains unassigned (e.g., "30m", "1h", "2d"). String variables containing the unassigned duration.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as an object, providing information about the success or failure of the group creation. Variables of type 
dynamic
 to store the response.
How to use:
Drag and drop the "Create Group" activity onto the workflow.
Configure the properties by specifying the name, description, unassigned duration, and agent IDs for the group.
Optionally, configure the delay.
Execute the workflow to create the specified group in Freshdesk.
Example:

Consider an example where the "Create Group" activity is used to create a group named "Support Team" with associated description, unassigned duration, and assigned agents:
Create Group:
  Display Name: "Create Support Team"
  Name: "Support Team"
  Description: "Group for handling support tickets"
  Unassigned For: "1h"
  Agent IDs: [1, 2, 3]
  Result: groupCreationResult
In this example, the activity creates a group named "Support Team" with the specified description, unassigned duration, and assigned agents. The result of the creation operation is stored in the 
groupCreationResult
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Contacts/Search Contact/index.html

Search Contact
AutomatR.FreshDesk.Contacts.SearchContact
The "Search Contact" activity in AutomatR is part of the Freshdesk activities package, providing the capability to search for contacts based on given criteria in Freshdesk user's accounts. This activity streamlines the process of retrieving contact information, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Filter
Specifies the search criteria based on the name (e.g., "John"). String variables containing the search filter criteria.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Search Contact" operation, providing information about the contacts matching the specified criteria. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Search Contact" activity onto the workflow.
Configure the properties by specifying the delay duration and the search filter criteria based on the contact name.
Execute the workflow to search for contacts in the Freshdesk user's account that match the specified criteria.
Example:

Consider an example where the "Search Contact" activity is used to search for contacts with the name "John":
Search Contact:
  Delay: 0
  Filter: "John"
  Result: contactDetails
In this example, the activity searches for contacts with the name "John". The response, containing information about contacts matching the specified criteria, is stored in the dynamic variable "contactDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Contacts/Update Contact/index.html

Update Contact
AutomatR.FreshDesk.Contacts.UpdateContact
The "Update Contact" activity in AutomatR is part of the Freshdesk activities package, facilitating the automation of contact details update within a Freshdesk user's account. This activity streamlines the process of keeping contact information up-to-date, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Address
Specifies the updated address of the contact. String variables containing the updated address.
Contact ID
Specifies the ID of the contact to be updated. String variables containing the contact ID.
Description
Specifies the updated short description of the contact. String variables containing the updated description.
Email
Specifies the updated email ID of the contact. String variables containing the updated email ID.
Job Title
Specifies the updated job title of the contact. String variables containing the updated job title.
Mobile
Specifies the updated mobile number of the contact. String variables containing the updated mobile number.
Name
Specifies the updated name of the contact. String variables containing the updated name.
Phone
Specifies the updated telephone number of the contact. String variables containing the updated telephone number.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Update Contact" operation, providing information about the status of the update. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Update Contact" activity onto the workflow.
Configure the properties by specifying the contact ID and providing updated values for name, email, job title, mobile, address, phone, and description as needed.
Optionally, configure the delay.
Execute the workflow to update the details for the specified contact in Freshdesk.
Example:

Consider an example where the "Update Contact" activity is used to update the name, email, and job title of a contact with the ID "XYZ789":
Update Contact:
  Delay: 0
  Contact ID: "XYZ789"
  Name: "Updated Contact Name"
  Email: "updated.contact@email.com"
  Job Title: "Senior Analyst"
  Mobile: "1234567890"
  Address: "123 Main Street, Cityville"
  Phone: "9876543210"
  Description: "Updated contact details"
  Result: updateStatus
In this example, the activity updates the name, email, job title, mobile, address, phone, and description of the contact with ID "XYZ789". The response, containing information about the status of the update, is stored in the dynamic variable "updateStatus" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Contacts/Get Contact/index.html

Get Contact
AutomatR.FreshDesk.Activities.GetContact
The "Get Contact" activity in AutomatR is part of the Freshdesk activities package, providing the capability to retrieve details of a contact with a specific ID in a Freshdesk user's account. This activity enhances automation workflows by fetching comprehensive information about a specified contact for further processing.
Properties
​
Name
Description
Input
User ID
Specifies the user ID of the contact whose details need to be viewed. String variables containing the user ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Get Contact" operation, providing detailed information about the specified contact. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Get Contact" activity onto the workflow.
Configure the properties by specifying the delay duration and the user ID of the contact to retrieve details.
Execute the workflow to fetch comprehensive information about the specified contact from the Freshdesk user's account.
Example:

Consider an example where the "Get Contact" activity is used to retrieve details of a contact with the user ID "12345":
Get Contact:
  Delay: 0
  User ID: "12345"
  Result: contactDetails
In this example, the activity fetches details of the contact with the user ID "12345". The response, containing comprehensive information about the specified contact, is stored in the dynamic variable "contactDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Contacts/Delete Contact/index.html

Delete Contact
AutomatR.FreshDesk.Activities.DeleteContact
The "Delete Contact" activity in AutomatR is part of the Freshdesk activities package, facilitating the deletion of a contact based on the user ID within a Freshdesk user's account. This activity streamlines the process of managing contacts in Freshdesk, providing the ability to remove a specific contact as needed.
Properties
​
Name
Description
Input
User ID
Specifies the ID of the contact to be deleted. It is a required input, uniquely identifying the contact to be removed from Freshdesk. String variables containing the user ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as an object. Variables of relevant types (e.g., dynamic variables) to store the response.
How to use:
Drag and drop the "Delete Contact" activity onto the workflow.
Configure the properties by specifying the user ID of the contact to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified contact in Freshdesk.
Example:

Consider an example where the "Delete Contact" activity is used to remove a specific contact identified by the user ID:
Delete Contact:
  Display Name: "Remove John Doe"
  User ID: "123456789"
  Result: contactDeletionResponse
In this example, the activity deletes the contact associated with the user ID "123456789." The workflow ensures that the contact is successfully removed from Freshdesk, and the response is stored in the dynamic variable "contactDeletionResponse" for further handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Contacts/Get All Contacts/index.html

Get All Contacts
AutomatR.FreshDesk.Activities.GetAllContacts
The "Get All Contacts" activity in AutomatR is part of the Freshdesk activities package, providing the ability to retrieve a list of all contacts in a Freshdesk user's account. This activity enhances automation workflows by accessing comprehensive information about contacts within Freshdesk.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Get All Contacts" operation, providing detailed information about all contacts. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Get All Contacts" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve the list of all contacts in the Freshdesk user's account.
Example:

Consider an example where the "Get All Contacts" activity is used to fetch the list of all contacts in the Freshdesk account:
Get All Contacts:
  Delay: 0
  Result: contactsList
In this example, the activity fetches the list of all contacts in the Freshdesk account. The response, containing detailed information about each contact, is stored in the dynamic variable "contactsList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Contacts/Create Contact/index.html

Create Contact
AutomatR.FreshDesk.Activities.CreateContact
The "Create Contact" activity in AutomatR is part of the Freshdesk activities package, designed to create a contact in a Freshdesk user's account. This activity streamlines the process of managing contact information in Freshdesk, enhancing the efficiency of customer relationship management.
Properties
​
Name
Description
Input
Address
Specifies the address of the contact. String variables containing the contact address.
Description
Specifies a short description of the contact. String variables containing the contact description.
Email
Specifies the primary email ID of the contact. It is a required input and serves as a unique identifier for the contact. String variables containing the contact email.
Job Title
Specifies the job title of the contact. String variables containing the contact job title.
Mobile
Specifies the mobile number of the contact. String variables containing the contact mobile number.
Name
Specifies the name of the contact. It is a required input and serves as a unique identifier for the contact. String variables containing the contact name.
Phone
Specifies the telephone number of the contact. String variables containing the contact phone number.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as an object, providing information about the success or failure of the contact creation. Variables of type 
dynamic
 to store the response.
How to use:
Drag and drop the "Create Contact" activity onto the workflow.
Configure the properties by specifying the name, email, phone, mobile, address, description, and job title of the contact.
Optionally, configure the delay.
Execute the workflow to create the specified contact in Freshdesk.
Example:

Consider an example where the "Create Contact" activity is used to create a contact named "John Doe" with associated email, phone, mobile, address, description, and job title:
Create Contact:
  Display Name: "Create John Doe"
  Name: "John Doe"
  Email: "john.doe@example.com"
  Phone: "1234567890"
  Mobile: "9876543210"
  Address: "123 Main St, City, Country"
  Description: "Primary contact for support"
  Job Title: "Support Manager"
  Result: contactCreationResult
In this example, the activity creates a contact named "John Doe" with specified email, phone, mobile, address, description, and job title. The result of the creation operation is stored in the 
contactCreationResult
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Canned Response/Create Canned Response/index.html

Create Canned Response
AutomatR.FreshDesk.Activities.CreateCannedResponse
The "Create Canned Response" activity in AutomatR is part of the Freshdesk activities package, designed to create a canned response within a specified folder for responding to tickets in Freshdesk. This activity streamlines the process of managing predefined responses, improving the efficiency of customer support workflows.
Properties
​
Name
Description
Input
Content
Specifies the HTML version of the canned response. It represents the content of the response that will be used when responding to tickets. String variables containing the HTML content of the canned response.
Folder ID
Specifies the ID of the folder where the canned response will be added. It is a required input, and the ID must correspond to an existing folder in Freshdesk. Long variables containing the folder ID.
Title
Specifies the title of the canned response. It is a required input and serves as a reference for the response. String variables containing the title of the canned response.
Visibility
Specifies the value for the response to be visible to a particular group. It is a required input, and valid values are 0 or 1. For example, 0 indicates visibility to all, and 1 indicates visibility to a specific group. Integer variables containing the visibility value.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Canned Response" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the response as an object, providing information about the success or failure of the canned response creation. Variables of type 
dynamic
 to store the response.
How to use:
Drag and drop the "Create Canned Response" activity onto the workflow.
Configure the properties by specifying the title, HTML content, folder ID, and visibility of the canned response.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the specified canned response within the designated folder in Freshdesk.
Example:

Consider an example where the "Create Canned Response" activity is used to create a canned response titled "Support Response" with HTML content for responding to tickets:
Create Canned Response:
  Display Name: "Create Support Response"
  Title: "Support Response"
  Content: "<p>Thank you for reaching out. We will assist you shortly.</p>"
  Folder ID: 123
  Visibility: 0
  Result: cannedResponseResult
In this example, the activity creates a canned response titled "Support Response" with the specified HTML content within the folder with ID 123. The visibility is set to 0, indicating that the response is visible to all. The result of the creation operation is stored in the 
cannedResponseResult
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Canned Response/Get Canned Response/index.html

Get Canned Response
AutomatR.FreshDesk.Activities.GetCannedResponse
The "Get Canned Response" activity in AutomatR is part of the Freshdesk activities package, providing the capability to fetch details of a specific canned response. This activity enhances automation workflows by retrieving information about predefined responses in a Freshdesk user's account.
Properties
​
Name
Description
Input
Response ID
Specifies the ID of the canned response to fetch details. String variables containing the canned response ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Canned Response" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Get Canned Response" operation, providing detailed information about the specified canned response. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Get Canned Response" activity onto the workflow.
Configure the properties by specifying the delay duration and the ID of the canned response to fetch details.
Execute the workflow to retrieve information about the specified canned response from the Freshdesk user's account.
Example:

Consider an example where the "Get Canned Response" activity is used to fetch details of a canned response with the ID "12345":
Get Canned Response:
  Delay: 0
  Response ID: "12345"
  Result: cannedResponseDetails
In this example, the activity fetches details of the canned response with the ID "12345". The response, containing information about the specified canned response, is stored in the dynamic variable "cannedResponseDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Canned Response/Update Canned Response/index.html

Update Canned Response
AutomatR.FreshDesk.CannedResponse.UpdateCannedResponse
The "Update Canned Response" activity in AutomatR is part of the Freshdesk activities package, allowing automation processes to update details for a particular canned response within Freshdesk. This activity streamlines the management of canned responses, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Content
Specifies the updated HTML version content for the canned response. String variables containing the updated content in HTML format.
Folder ID
Specifies the ID of the folder where the canned response can be updated. Integer variables containing the folder ID.
Canned Response ID
Specifies the ID for the canned response to be updated. Integer variables containing the canned response ID.
Title
Specifies the updated title of the canned response. String variables containing the updated title.
Visibility
Specifies the updated value for the response to be visible to a particular group (e.g., 0, 1, 2). Integer variables containing the visibility value.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Canned Response" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Update Canned Response" operation, providing information about the status of the update. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Update Canned Response" activity onto the workflow.
Configure the properties by specifying the canned response ID and providing updated values for title, content, folder ID, and visibility as needed.
Optionally, configure the delay.
Execute the workflow to update the details for the specified canned response in Freshdesk.
Example:

Consider an example where the "Update Canned Response" activity is used to update the title and content of a canned response with the ID 123:
Update Canned Response:
  Delay: 0
  Canned Response ID: 123
  Title: "Updated Title"
  Content: "<p>Updated content in HTML format</p>"
  Folder ID: 456
  Visibility: 1
  Result: updateStatus
In this example, the activity updates the title, content, folder ID, and visibility of the canned response with ID 123. The response, containing information about the status of the update, is stored in the dynamic variable "updateStatus" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Agents/Get All Agents/index.html

Get All Agents
AutomatR.FreshDesk.Activities.GetAllAgents
The "Get All Agents" activity in AutomatR is part of the Freshdesk activities package, allowing users to retrieve a list of all available agents in the Freshdesk user's account. This activity enhances automation processes by providing access to detailed information about agents within Freshdesk.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Get All Agents" operation, providing detailed information about all available agents. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Get All Agents" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve the list of all available agents in the Freshdesk user's account.
Example:

Consider an example where the "Get All Agents" activity is used to fetch the list of all agents in the Freshdesk account:
Get All Agents:
  Delay: 0
  Result: agentsList
In this example, the activity fetches the list of all agents in the Freshdesk account. The response, containing detailed information about each agent, is stored in the dynamic variable "agentsList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Scope/Freshdesk Scope/index.html

Freshdesk Scope
AutomatR.FreshDesk.Activitys.FreshDeskScope
The "Freshdesk Scope" activity in AutomatR is designed to allow access to Freshdesk user accounts based on API authentication keys. This activity establishes a scope for executing Freshdesk-related activities within the workflow, providing a secure and authenticated connection to the Freshdesk account.
Properties
​
Name
Description
Input
API Key
Specifies the API key associated with the Freshdesk user account. It is a required input for authentication and accessing Freshdesk resources. String variables containing the API key.
Domain URL
Specifies the domain URL for the Freshdesk account. It is a required input, defining the URL of the Freshdesk instance to connect to. String variables containing the domain URL.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Freshdesk Scope" activity onto the workflow.
Configure the properties by specifying the API key and domain URL for the Freshdesk account.
Optionally, configure the delay.
Place Freshdesk-related activities inside the "Freshdesk Scope" activity to perform operations within the authenticated context.
Execute the workflow to interact with Freshdesk resources securely.
Example:

Consider an example where the "Freshdesk Scope" activity is used to establish a scope for Freshdesk-related activities:
Freshdesk Scope:
  Display Name: "Authenticate and Access Freshdesk"
  API Key: "your_api_key_here"
  Domain URL: "https://yourdomain.freshdesk.com/"
  Delay: 0
  (Inside the scope, place Freshdesk-related activities)
In this example, the activity authenticates with Freshdesk using the provided API key and domain URL. Any activities placed inside this scope can securely access Freshdesk resources without the need to reauthenticate for each operation.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Create Reply/index.html

Create Reply
AutomatR.FreshDesk.Activities.CreateReply
The "Create Reply" activity in AutomatR is part of the Freshdesk activities package, designed to reply to a conversation within a ticket. This activity streamlines the process of responding to customer queries, enhancing communication and collaboration within Freshdesk.
Properties
​
Name
Description
Input
Body
Specifies the text in string format to reply to a ticket. It is a required input, representing the content of the reply. String variables containing the reply text.
Ticket ID
Specifies the ID of the ticket to which the reply is to be created. It is a required input, uniquely identifying the ticket. String variables containing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as an object, providing information about the success or failure of the reply creation. Variables of type 
dynamic
 to store the response.
How to use:
Drag and drop the "Create Reply" activity onto the workflow.
Configure the properties by specifying the body of the reply and the ticket ID to which the reply should be associated.
Optionally, configure the delay.
Execute the workflow to create a reply within the specified ticket in Freshdesk.
Example:

Consider an example where the "Create Reply" activity is used to reply to a ticket with the specified body text:
Create Reply:
  Display Name: "Reply to Ticket"
  Ticket ID: "123456"
  Body: "Thank you for reaching out! We will address your concern shortly."
  Result: replyCreationResult
In this example, the activity creates a reply to the ticket with the ID "123456" and the specified body text. The result of the creation operation is stored in the 
replyCreationResult
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Create Ticket/index.html

Create Ticket
AutomatR.FreshDesk.Activities.CreateTicket
The "Create Ticket" activity in AutomatR is part of the Freshdesk activities package, designed to facilitate the creation of a new ticket in a Freshdesk user's account. This activity streamlines the process of initiating support or service requests within Freshdesk, enhancing automation workflows.
Properties
​
Name
Description
Input
CCEmails
Specifies the email addresses added in the 'cc' field of the incoming ticket email. It is an array of strings representing additional recipients to be notified. String array variables containing the email addresses.
Description
Specifies the HTML content of the ticket. It is a required input, representing the detailed description or content of the ticket. String variables containing the HTML content.
Email
Specifies the email address of the requester or creator of the ticket. It is a required input, uniquely identifying the user initiating the ticket. String variables containing the email address.
Phone
Specifies the phone number of the requester. It is a required input, representing the contact number of the user initiating the ticket. Integer variables containing the phone number.
Priority
Specifies the priority of the ticket. It is a required input with a default value of '1'. Integer variables containing the priority value.
ResponderID
Specifies the ID of the agent to whom the ticket has to be assigned. It is a required input, uniquely identifying the agent responsible for the ticket. Integer variables containing the responder ID.
Source
Specifies the channel through which the ticket has to be created. It is a required input with a default value of '2'. Integer variables containing the source channel.
Status
Specifies the status of the ticket. It is a required input with a default value of '2'. Integer variables containing the status value.
Subject
Specifies the subject or title of the ticket. It is a required input, representing the brief summary or title of the ticket. String variables containing the subject.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as an object, providing information about the success or failure of the ticket creation. Variables of type 
dynamic
 to store the response.
How to use:
Drag and drop the "Create Ticket" activity onto the workflow.
Configure the properties by specifying the HTML content, subject, email, phone, priority, status, responder ID, source, and CC emails for the ticket.
Optionally, configure the delay.
Execute the workflow to create a new ticket within Freshdesk.
Example:

Consider an example where the "Create Ticket" activity is used to initiate a new ticket with the specified details:
Create Ticket:
  Display Name: "Initiate Support Request"
  Description: "<p>Customer is experiencing issues with the product.</p>"
  Subject: "Product Issue"
  Email: "customer@example.com"
  Phone: 1234567890
  Priority: 2
  Status: 3
  ResponderID: 987654
  Source: 1
  CCEmails: ["manager@example.com", "support@example.com"]
  Result: ticketCreationResult
In this example, the activity creates a new ticket with the specified HTML content, subject, email, phone, priority, status, responder ID, source, and CC emails. The result of the ticket creation operation is stored in the 
ticketCreationResult
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Delete Ticket/index.html

Delete Ticket
AutomatR.FreshDesk.Activities.DeleteTicket
The "Delete Ticket" activity in AutomatR is part of the Freshdesk activities package, providing the capability to delete a ticket within a Freshdesk user's account. This activity streamlines the process of ticket management in Freshdesk, allowing for the removal of a specific ticket based on its ID.
Properties
​
Name
Description
Input
Ticket ID
Specifies the ID of the ticket to be deleted. It is a required input, uniquely identifying the ticket to be removed from Freshdesk. String variables containing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Ticket" activity onto the workflow.
Configure the properties by specifying the ticket ID of the ticket to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified ticket in Freshdesk.
Example:

Consider an example where the "Delete Ticket" activity is used to remove a specific ticket identified by the ticket ID:
Delete Ticket:
  Display Name: "Remove Support Ticket"
  Ticket ID: "123456789"
In this example, the activity deletes the ticket associated with the ticket ID "123456789." The workflow ensures that the ticket is successfully removed from Freshdesk. If the ticket is not found or any other issues occur, the activity raises exceptions for proper error handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Update Ticket/index.html

Update Ticket
AutomatR.FreshDesk.Ticket.UpdateTicket
The "Update Ticket" activity in AutomatR is part of the Freshdesk activities package, facilitating the automation of updating existing tickets within a Freshdesk user's account. This activity streamlines the process of modifying ticket details, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Priority
Specifies the updated priority value for the ticket. Integer variables containing the updated priority. Accepted values: 1, 2, 3, 4.
Source
Specifies the updated value of the source for the ticket. Integer variables containing the updated source value. Accepted values: 1, 2, 3, 7, 9, 10.
Status
Specifies the new status value for the ticket. Integer variables containing the new status value. Accepted values: 2, 3, 4, 5.
Ticket ID
Specifies the ID of the ticket to be updated. String variables containing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as an object. Variables of relevant types (e.g., dynamic variables) to store the response.
How to use:
Drag and drop the "Update Ticket" activity onto the workflow.
Configure the properties by specifying the ticket ID and providing updated values for priority, source, and status as needed.
Optionally, configure the delay.
Execute the workflow to update the details for the specified ticket in Freshdesk.
Example:

Consider an example where the "Update Ticket" activity is used to update the priority and status of a ticket with the ID "TCKT123":
Update Ticket:
  Delay: 0
  Ticket ID: "TCKT123"
  Priority: 3
  Status: 4
  Source: 2
  Result: ticketUpdateResponse
In this example, the activity updates the priority to 3, the status to 4, and the source to 2 for the ticket with ID "TCKT123". The response, containing information about the status of the update, is stored in the dynamic variable "ticketUpdateResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Delete Attachment/index.html

Delete Attachment
AutomatR.FreshDesk.Activities.DeleteAttachment
The "Delete Attachment" activity in AutomatR is part of the Freshdesk activities package, designed to delete an attachment specific to the attachment ID of any ticket within Freshdesk. This activity streamlines the process of managing attachments associated with tickets, providing flexibility and control over ticket-related files.
Properties
​
Name
Description
Input
Attachment ID
Specifies the attachment ID to be deleted. It is a required input, uniquely identifying the attachment to be removed from the ticket. String variables containing the attachment ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Attachment" activity onto the workflow.
Configure the properties by specifying the attachment ID to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified attachment associated with a ticket in Freshdesk.
Example:

Consider an example where the "Delete Attachment" activity is used to remove a specific attachment identified by the attachment ID:
Delete Attachment:
  Display Name: "Remove Invoice Attachment"
  Attachment ID: "123456789"
In this example, the activity deletes the attachment associated with the attachment ID "123456789." The workflow ensures that the attachment is successfully removed from the ticket.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Get All Tickets/index.html

Get All Tickets
AutomatR.FreshDesk.Activities.GetAllTickets
The "Get All Tickets" activity in AutomatR is part of the Freshdesk activities package, providing the capability to list tickets based on specified search or filter conditions. This activity enhances automation workflows by retrieving comprehensive information about tickets in a Freshdesk user's account.
Properties
​
Name
Description
Input
Query
Specifies the query string to filter tickets based on search conditions (e.g., "priority:4 OR priority:3"). String variables containing the query string.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Get All Tickets" operation, providing detailed information about the retrieved tickets. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Get All Tickets" activity onto the workflow.
Optionally, configure the delay and query string for filtering tickets based on search conditions.
Execute the workflow to retrieve the list of tickets from the Freshdesk user's account.
Example:

Consider an example where the "Get All Tickets" activity is used to fetch the list of all tickets in the Freshdesk account:
Get All Tickets:
  Delay: 0
  Result: ticketsList
In this example, the activity fetches the list of all tickets in the Freshdesk account. The response, containing detailed information about each ticket, is stored in the dynamic variable "ticketsList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Assign Ticket/index.html

Assign Ticket
AutomatR.FreshDesk.Activities.AssignTicket
The "Assign Ticket" activity in AutomatR is part of the Freshdesk activities package, designed to assign a ticket to a specific agent within a Freshdesk user's account. This activity facilitates efficient ticket management and ensures that tickets are directed to the appropriate agents for resolution.
Properties
​
Name
Description
Input
Responder ID
Specifies the ID of the agent to whom the ticket has to be assigned. It is a required input, and the ID must correspond to an existing agent in Freshdesk. Long variables containing the agent's ID.
Ticket ID
Specifies the ticket ID that needs to be assigned to an agent. It is a required input, and the ID must correspond to an existing ticket in Freshdesk. String variables containing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Assign Ticket" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the response as an object, providing information about the status of the ticket assignment. Variables of type 
object
 to store the response.
How to use:
Drag and drop the "Assign Ticket" activity onto the workflow.
Configure the properties by specifying the responder ID (agent's ID) and the ticket ID to be assigned.
Optionally, configure the delay and customize the display name.
Execute the workflow to assign the specified ticket to the designated agent in Freshdesk.
Example:

Consider an example where the "Assign Ticket" activity is used to assign a ticket with ID "12345" to the agent with ID "789" in Freshdesk:
Assign Ticket:
  Display Name: "Assign Support Ticket"
  Responder ID: 789
  Ticket ID: "12345"
  Result: assignmentResponse
In this example, the activity assigns the ticket with ID "12345" to the agent with ID "789" in Freshdesk. The response from the assignment operation is stored in the 
assignmentResponse
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Ticket/Get Ticket/index.html

Get Ticket
AutomatR.FreshDesk.Ticket.GetTicket
The "Get Ticket" activity in AutomatR is part of the Freshdesk activities package, providing the capability to retrieve ticket details based on the ticket ID from Freshdesk users' accounts. This activity enhances automation workflows by fetching comprehensive information about a specified ticket for further processing.
Properties
​
Name
Description
Input
Ticket ID
Specifies the ticket ID as a string to fetch its details. String variables containing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Agents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Get Ticket" operation, providing detailed information about the specified ticket. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Get Ticket" activity onto the workflow.
Configure the properties by specifying the delay duration and the ticket ID to retrieve details.
Execute the workflow to fetch comprehensive information about the specified ticket from the Freshdesk user's account.
Example:

Consider an example where the "Get Ticket" activity is used to retrieve details of a ticket with the ticket ID "12345":
Get Ticket:
  Delay: 0
  Ticket ID: "12345"
  Result: ticketDetails
In this example, the activity fetches details of the ticket with the ticket ID "12345". The response, containing comprehensive information about the specified ticket, is stored in the dynamic variable "ticketDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Company/Create Company/index.html

Create Company
AutomatR.FreshDesk.Activities.CreateCompany
The "Create Company" activity in AutomatR is part of the Freshdesk activities package, designed to create a company and group contacts belonging to this company. This activity simplifies the process of managing company information in Freshdesk, facilitating organized customer relationship management.
Properties
​
Name
Description
Input
Account Tier
Specifies the account tier associated with the company based on its value to the business (e.g., Premium). String variables containing the account tier.
Description
Specifies the description of the company. It provides additional information about the nature or purpose of the company. String variables containing the company description.
Domains
Specifies the domains of the company. It is an array of strings representing the domains associated with the company (e.g., 
["supernova", "nova"]
). String array variables containing company domains.
Health Score
Specifies the strength of your relationship with the company (e.g., "happy"). String variables containing the health score.
Industry
Specifies the updated industry name in which the company serves. String variables containing the industry name.
Name
Specifies the name of the company. It is a required input and serves as a unique identifier for the company. String variables containing the company name.
Renewal Date
Specifies the date when your contract or relationship with the company is due for renewal. String variables containing the renewal date.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Company" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as an object, providing information about the success or failure of the company creation. Variables of type 
dynamic
 to store the response.
How to use:
Drag and drop the "Create Company" activity onto the workflow.
Configure the properties by specifying the name, domains, description, industry, health score, account tier, and renewal date of the company.
Optionally, configure the delay.
Execute the workflow to create the specified company in Freshdesk.
Example:

Consider an example where the "Create Company" activity is used to create a company named "ABC Corp" with associated domains, description, and industry:
Create Company:
  Display Name: "Create ABC Corp"
  Name: "ABC Corp"
  Domains: ["abc", "corp"]
  Description: "A leading corporation in the tech industry."
  Industry: "Technology"
  Health Score: "Happy"
  Account Tier: "Premium"
  Renewal Date: "2023-12-31"
  Result: companyCreationResult
In this example, the activity creates a company named "ABC Corp" with specified domains, description, industry, health score, account tier, and renewal date. The result of the creation operation is stored in the 
companyCreationResult
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Company/Delete Company/index.html

Delete Company
AutomatR.FreshDesk.Activities.DeleteCompany
The "Delete Company" activity in AutomatR is part of the Freshdesk activities package, facilitating the deletion of a company based on its ID. This activity streamlines the process of managing companies within Freshdesk, providing the ability to remove a specific company as needed.
Properties
​
Name
Description
Input
Company ID
Specifies the ID of the company to be deleted. It is a required input, uniquely identifying the company to be removed from Freshdesk. String variables containing the company ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Company" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Company" activity onto the workflow.
Configure the properties by specifying the company ID to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified company in Freshdesk.
Example:

Consider an example where the "Delete Company" activity is used to remove a specific company identified by the company ID:
Delete Company:
  Display Name: "Remove XYZ Company"
  Company ID: "123456789"
In this example, the activity deletes the company associated with the company ID "123456789." The workflow ensures that the company is successfully removed from Freshdesk.

URL: https://docs.automatr.tech/docs/Products/Activities/Freshdesk/Company/Update Company/index.html

Update Company
AutomatR.FreshDesk.Company.UpdateCompany
The "Update Company" activity in AutomatR is part of the Freshdesk activities package, allowing automation processes to update details for a specific company within Freshdesk. This activity streamlines the management of company information, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Account Tier
Specifies the updated account tier associated with the company. String variables containing the updated account tier.
Company ID
Specifies the ID of the company to be updated. String variables containing the company ID.
Description
Specifies the updated description of the company. String variables containing the updated description.
Domains
Specifies the updated domains of the company. String array variables containing the updated domains.
Industry
Specifies the updated industry name in which the company serves. String variables containing the updated industry name.
Name
Specifies the updated name of the company. String variables containing the updated name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Company" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response of the "Update Company" operation, providing information about the status of the update. Variables of relevant types (e.g., dynamic variables) to store the operation result.
How to use:
Drag and drop the "Update Company" activity onto the workflow.
Configure the properties by specifying the company ID and providing updated values for name, description, domains, account tier, and industry as needed.
Optionally, configure the delay.
Execute the workflow to update the details for the specified company in Freshdesk.
Example:

Consider an example where the "Update Company" activity is used to update the name and description of a company with the ID "ABC123":
Update Company:
  Delay: 0
  Company ID: "ABC123"
  Name: "Updated Company Name"
  Description: "Updated company description"
  Domains: ["updateddomain.com", "anotherdomain.com"]
  Account Tier: "Gold"
  Industry: "Technology"
  Result: updateStatus
In this example, the activity updates the name, description, domains, account tier, and industry of the company with ID "ABC123". The response, containing information about the status of the update, is stored in the dynamic variable "updateStatus" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Commit Transaction/index.html

Commit Transaction
AutomatR.MSSQLDataBase.Database.CommitTransaction
The "Commit Transaction" activity in AutomatR for SQL Server databases facilitates the commitment of a transaction on the connected database. This activity is crucial for finalizing and applying changes made within a transaction, ensuring data integrity.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Commit Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Commit Transaction" activity onto the workflow.
Optionally, configure the delay for synchronization purposes.
Ensure that the "Commit Transaction" activity is placed in the workflow after the sequence of database operations to be committed.
Example:

Consider an example where a series of database operations need to be executed within a transaction, and the transaction is committed upon successful execution:
Start Transaction:
  Connection: SqlConnectionVariable
  Delay: 0
... Perform database operations within the transaction ...
If No Error Occurs:
  Commit Transaction
In this example, the "Commit Transaction" activity is used to commit the transaction initiated by the "Start Transaction" activity. The transaction is committed if no errors occur, ensuring that all changes made within the transaction are applied to the database.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Roll Back Transaction/index.html

Roll Back Transaction
AutomatR.MSSQLDataBase.Database.RollBackTransaction
The "Roll Back Transaction" activity in AutomatR for SQL Server databases allows you to roll back a transaction initiated by the "Start Transaction" activity. This activity is crucial for ensuring data integrity by undoing any changes made during the transaction in case of errors or other exceptional situations.
Properties
​
Name
Description
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Roll Back Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Roll Back Transaction" activity onto the workflow.
Optionally, configure the delay for synchronization purposes.
Ensure that the "Roll Back Transaction" activity is placed within the scope of the "Start Transaction" activity to specify the transaction to roll back.
Execute the workflow to roll back the initiated transaction in case of errors or exceptional situations.
Example:

Consider an example where the "Roll Back Transaction" activity is used to roll back a transaction initiated by the "Start Transaction" activity:
Roll Back Transaction:
  Delay: 0
In this example, the activity immediately rolls back the transaction, undoing any changes made during the transaction. The delay is set to 0, indicating that the roll back should occur without any additional waiting time.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Execute Stored Procedure/index.html

Execute Stored Procedure
AutomatR.MSSQLDataBase.Database.ExecuteStoredProcedure
The "Execute Stored Procedure" activity in AutomatR for SQL Server databases allows you to execute a stored procedure and retrieve the result set as a DataSet. This activity is useful for invoking stored procedures and obtaining data or performing actions within your automation workflow.
Properties
​
Name
Description
Input
Connection
Provide a SQL connection variable that will be used to establish a database connection.
Procedure Name
Provide the name of the stored procedure to be executed.
Parameters
Specify input and output parameters for the stored procedure. The parameters include the parameter name, direction (In/Out), and data type.
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. If not specified, the default timeout is set to 60 seconds.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Stored Procedure" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the stored procedure execution as a DataSet. The DataSet variable can be used for further activities and processing in the workflow.
Out Variables
Provides a Dictionary containing the values of output parameters after executing the stored procedure. This allows you to retrieve and use the values of output parameters in subsequent activities or operations.
How to use:
Drag and drop the "Execute Stored Procedure" activity onto the workflow.
Configure the properties by specifying the SQL connection variable, stored procedure name, and input/output parameters.
Optionally, configure the command timeout and delay for synchronization purposes.
Execute the workflow to execute the specified stored procedure on the database and retrieve the result set as a DataSet.
Example:

Consider an example where the "Execute Stored Procedure" activity is used to execute a stored procedure named "GetEmployeeData" with input parameters and an output parameter:
Execute Stored Procedure:
  Connection: SqlConnectionVariable
  Procedure Name: "GetEmployeeData"
  Parameters:
    - Parameter1 (In, Int32): 123
    - Parameter2 (In, String): "John"
    - OutputParam (Out, String): employeeName
  Command Timeout: 5000
  Result: EmployeeDataSet
  Out Variables: OutputParameters
In this example, the activity executes the "GetEmployeeData" stored procedure with input parameters (Parameter1 and Parameter2) and an output parameter (OutputParam). The result, stored in the DataSet variable "EmployeeDataSet," and the values of output parameters in the Dictionary variable "OutputParameters" can be used for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Execute Reader/index.html

Execute Reader
AutomatR.MSSQLDataBase.Database.ExecuteReader
The "Execute Reader" activity in AutomatR for SQL Server databases allows you to execute a SQL SELECT query and retrieve the result set as a DataTable. This activity is useful for retrieving data from a database for further processing in your automation workflow.
Properties
​
Name
Description
Input
Connection
Provide a SQL connection variable that will be used to establish a database connection.
Command Text
Provide a SQL query in string format. This represents the SELECT query to be executed to retrieve data from the database.
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. If not specified, the default timeout is set to 60 seconds.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Reader" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the SQL SELECT query as a DataTable. The DataTable variable can be used for further activities and processing in the workflow.
How to use:
Drag and drop the "Execute Reader" activity onto the workflow.
Configure the properties by specifying the SQL connection variable and the SQL SELECT query.
Optionally, configure the command timeout and delay for synchronization purposes.
Execute the workflow to execute the specified SELECT query on the database and retrieve the result set as a DataTable.
Example:

Consider an example where the "Execute Reader" activity is used to retrieve employee data from a SQL Server table:
Execute Reader:
  Connection: SqlConnectionVariable
  Command Text: "SELECT FirstName, LastName, Age FROM Employees WHERE Department = 'IT'"
  Command Timeout: 5000
  Result: EmployeeData
In this example, the activity executes the SQL SELECT query to retrieve the first name, last name, and age of employees in the IT department. The result, stored in the DataTable variable "EmployeeData," can be used for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Start Transaction/index.html

Start Transaction
AutomatR.MSSQLDataBase.Database.StartTransaction
The "Start Transaction" activity in AutomatR for SQL Server databases initiates a transaction, allowing a sequence of database operations to be treated as a single, atomic unit. This activity is essential for maintaining data consistency and integrity in scenarios where multiple operations must be executed together, ensuring that either all operations are committed or none at all.
Properties
​
Name
Description
Input
Connection
Specifies a SQL connection variable used to establish a connection to the database. This connection is essential for executing database operations within the transaction. A variable of type 
SqlConnection
.
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Start Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Start Transaction" activity onto the workflow.
Configure the properties by providing a SQL connection variable to establish a connection to the database.
Optionally, configure the delay for synchronization purposes.
Create a sequence of database operations within the "Start Transaction" activity to be treated as a single transaction.
Execute the workflow to initiate the transaction.
Example:

Consider an example where the "Start Transaction" activity is used to initiate a transaction for updating records in a SQL Server database:
Start Transaction:
  Connection: sqlConnectionVariable
  Delay: 0
  Sequence (Database Operations):
    Update Table1
    Insert into Table2
    ...
  (Transaction automatically commits if no errors occur during the sequence)
In this example, the activity initiates a transaction using the specified SQL connection variable and executes a sequence of database operations. The transaction automatically commits if no errors occur during the sequence. If any error occurs, the transaction is rolled back, ensuring data consistency.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Execute Non Query/index.html

Execute Non Query
AutomatR.MSSQLDataBase.Database.ExecuteNonQuery
The "Execute Non Query" activity in AutomatR for SQL Server databases allows you to execute a non-query SQL statement, such as an INSERT, UPDATE, or DELETE statement, on a specified database. This activity is useful for making changes to the data in the database.
Properties
​
Name
Description
Input
Connection
Provide a SQL connection variable that will be used to establish a database connection.
Command Text
Provide a SQL query in string format. This represents the non-query SQL statement to be executed (e.g., INSERT, UPDATE, DELETE).
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. If not specified, the default timeout is set to 60 seconds.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Non Query" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the execution of the SQL command in an Int32 variable. The Int32 variable represents the result, typically indicating the number of rows affected by the SQL statement. This can be used for further processing or validation in the workflow.
How to use:
Drag and drop the "Execute Non Query" activity onto the workflow.
Configure the properties by specifying the SQL connection variable, the SQL query (non-query statement), and optionally, the command timeout.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to execute the specified non-query SQL statement on the database.
Example:

Consider an example where the "Execute Non Query" activity is used to insert data into a SQL Server table:
Execute Non Query:
  Connection: SqlConnectionVariable
  Command Text: "INSERT INTO Employees (FirstName, LastName) VALUES ('John', 'Doe')"
  Command Timeout: 5000
  Result: RowsAffected
In this example, the activity executes the SQL INSERT statement to add a new record with the first name "John" and last name "Doe" into the "Employees" table. The number of affected rows is stored in the Int32 variable "RowsAffected" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Disconnect/index.html

Disconnect
AutomatR.MSSQLDataBase.Database.Disconnect
The "Disconnect" activity in AutomatR for SQL Server databases allows you to disconnect from a specified database. This activity is crucial for releasing resources and closing the connection to the database.
Properties
​
Name
Description
Input
Connection
Enter the database connection variable used for disconnecting the database connection.
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Disconnect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Disconnect" activity onto the workflow.
Configure the properties by specifying the database connection variable used for disconnecting.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to disconnect from the specified database.
Example:

Consider an example where the "Disconnect" activity is used to disconnect from a SQL Server database:
Disconnect:
  Connection: SqlConnectionVariable
In this example, the "Disconnect" activity disconnects from the SQL Server database using the SqlConnection variable "SqlConnectionVariable." The disconnection process is executed successfully.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/SQL Server/Connect/index.html

Connect
AutomatR.MSSQLDataBase.Database.Connect
The "Connect" activity in AutomatR for SQL Server databases establishes a connection to a database using a standard connection string. This activity is fundamental for executing SQL queries and operations on the specified database.
Properties
​
Name
Description
Input
Authentication Type
Select the type of authentication: Windows or SQL Server.
Data Base Name
Enter the name of the database to which you want to connect.
Password
Enter the password to authenticate the connection. (Optional, required for SQL Server Authentication)
Source
Enter the database system to retrieve data or establish a connection.
User Name
Enter the username to authenticate the connection. (Optional, required for SQL Server Authentication)
Misc
DisplayName
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Connect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Connection
Returns the database connection variable once the database connection is successful.
How to use:
Drag and drop the "Connect" activity onto the workflow.
Configure the properties by specifying the source, database name, and authentication details.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to establish a connection to the specified database.
Example:

Consider an example where the "Connect" activity is used to establish a connection to a SQL Server database named "DemoDB" using Windows Authentication:
Connect:
  Source: "WIN-50GP30FGO75"
  Data Base Name: "DemoDB"
  Authentication Type: Windows Authentication
  Connection: SqlConnectionVariable
In this example, the "Connect" activity connects to the SQL Server database "DemoDB" on the system "WIN-50GP30FGO75" using Windows Authentication. The successful connection is stored in the SqlConnection variable "SqlConnectionVariable" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Commit Transaction/index.html

Commit Transaction
AutomatR.PostgreSQL.CommitTransaction
The "Commit Transaction" activity in AutomatR is part of the PostgreSQL activities package, facilitating the commit of a transaction. This activity is typically used in conjunction with the "Start Transaction" activity to manage database transactions effectively.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Commit Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Commit Transaction" activity onto the workflow.
Configure the optional delay if needed.
Ensure that the "Commit Transaction" activity is placed within the scope of a "Start Transaction" activity.
Execute the workflow to commit the ongoing transaction.
Example:

Consider an example where the "Commit Transaction" activity is used to commit a transaction:
Commit Transaction:
  Delay: 2
In this example, the activity commits the transaction with a 2-second delay. The commit operation finalizes the changes made within the transaction.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Roll Back Transaction/index.html

Roll Back Transaction
AutomatR.PostgreSQL.RollBackTransaction
The "Roll Back Transaction" activity in AutomatR for PostgreSQL databases allows you to roll back a transaction on a database. This activity is typically used in scenarios where a transaction needs to be canceled or reverted due to certain conditions or errors within the workflow.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Roll Back Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Roll Back Transaction" activity onto the workflow.
Ensure that this activity is placed within the scope of the "Start Transaction" activity to properly associate with an ongoing transaction.
Optionally, configure the delay for the desired waiting time before rolling back the transaction.
Execute the workflow to roll back the ongoing transaction in the PostgreSQL database.
Example:

Consider an example where the "Roll Back Transaction" activity is used to cancel a transaction in case of an error:
Roll Back Transaction:
  Delay: 2
In this example, the activity rolls back the ongoing transaction, helping to maintain data integrity and consistency in the PostgreSQL database.
Note: This activity should always be used within the scope of the "Start Transaction" activity to ensure proper association with a specific transaction in the workflow. Also, the delay is optional and can be configured based on specific requirements for handling transactions.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Execute Stored Procedure/index.html

Execute Stored Procedure
AutomatR.PostgreSQL.Database.ExecuteStoredProcedure
The "Execute Stored Procedure" activity in AutomatR for PostgreSQL databases allows you to execute a stored procedure and retrieve the result as a DataTable or output parameters, depending on your configuration. This activity is beneficial when interacting with PostgreSQL databases and executing custom procedures.
Properties
​
Name
Description
Input
Connection
Provide an NpgsqlConnection variable which will be used to establish a database connection. NpgsqlConnection variables containing the connection to be used.
Procedure Name
Provide the name of the stored procedure specified in the SQL parameter. String variables containing the name of the stored procedure.
Parameters
Specify the input and output parameters for the stored procedure. The parameters include the name, direction (In or Out), and datatype. Configure the values using the corresponding arguments.
Returns Table
If this option is selected, the stored procedure is expected to return a table of data. Boolean variables to indicate whether the stored procedure returns table data.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Stored Procedure" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error.
Output
Result
The result of the SQL command will be stored in a DataTable variable if the stored procedure returns table data. DataTable variables to store the result of the query execution.
Out Variables
If the stored procedure has output parameters, their values will be stored in a dictionary. Dictionary variables to store the values of output parameters.
How to use:
Drag and drop the "Execute Stored Procedure" activity onto the workflow.
Configure the properties by specifying the NpgsqlConnection variable obtained from the "Connect" activity, the stored procedure name, and input/output parameters.
Optionally, configure the delay, command timeout, and customize the display name.
Execute the workflow to execute the specified stored procedure on the PostgreSQL database and retrieve the result as a DataTable or output parameters.
Example:

Consider an example where the "Execute Stored Procedure" activity is used to execute a stored procedure named "sp_get_employee" to retrieve employee data:
Execute Stored Procedure:
  Delay: 2
  Connection: myDBConnection
  Procedure Name: "sp_get_employee"
  Returns Table: True
  Parameters:
    - Name: "employee_id"
      Direction: In
      DataType: Int
      Value: 101
    - Name: "employee_name"
      Direction: Out
      DataType: String
      Value: ""
  Command Timeout: 5000
  Result: employeeData
  Out Variables: employeeName
In this example, the activity executes the "sp_get_employee" stored procedure with input parameter "employee_id" and output parameter "employee_name". The result, representing the employee data, is stored in the DataTable variable "employeeData," and the output parameter "employee_name" is stored in the String variable "employeeName" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Execute Reader/index.html

Execute Reader
AutomatR.PostgreSQL.Database.ExecuteReader
The "Execute Reader" activity in AutomatR for PostgreSQL databases allows you to execute a query on a database and retrieve the query result as a DataTable. This activity is useful when you need to fetch data from a PostgreSQL database for further processing within your workflow.
Properties
​
Name
Description
Input
Connection
Provide an NpgsqlConnection variable which will be used to establish a database connection. NpgsqlConnection variables containing the connection to be used.
Command Text
Provide a SQL query in string format. String variables containing the SQL query to be executed.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Reader" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error.
Output
Result
The result of the SQL command will be stored in a DataTable variable, allowing you to utilize it in subsequent activities or operations. DataTable variables to store the result of the query execution.
How to use:
Drag and drop the "Execute Reader" activity onto the workflow.
Configure the properties by specifying the NpgsqlConnection variable obtained from the "Connect" activity and the SQL query to be executed.
Optionally, configure the delay, command timeout, and customize the display name.
Execute the workflow to execute the specified query on the PostgreSQL database and retrieve the result as a DataTable.
Example:

Consider an example where the "Execute Reader" activity is used to execute an SQL SELECT statement to retrieve employee data from a table:
Execute Reader:
  Delay: 2
  Connection: myDBConnection
  Command Text: "SELECT * FROM Employees"
  Command Timeout: 5000
  Result: employeeData
In this example, the activity executes the SQL SELECT statement to retrieve all records from the "Employees" table. The result, representing the employee data, is stored in the DataTable variable "employeeData" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Start Transaction/index.html

Start Transaction
AutomatR.PostgreSQL.Database.StartTransaction
The "Start Transaction" activity in AutomatR for PostgreSQL databases allows you to initiate a transaction on a database. Transactions are crucial for ensuring the consistency and integrity of the data, especially when multiple operations need to be executed as a single unit.
Properties
​
Name
Description
Input
Connection
Specifies a NpgsqlConnection variable used to establish a connection to the PostgreSQL database. This connection will be utilized for the duration of the transaction. NpgsqlConnection variables containing the required database connection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Start Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Body
Specifies the sequence of activities that will be executed as part of the transaction. The activities defined in this sequence will be treated as part of the same database transaction.
How to use:
Drag and drop the "Start Transaction" activity onto the workflow.
Configure the properties by providing the NpgsqlConnection variable for establishing a connection to the PostgreSQL database.
Optionally, configure the delay for the desired waiting time before starting the transaction.
Define the sequence of activities that will be part of the transaction using the "Body" property.
Execute the workflow to begin the transaction and execute the specified activities within the transaction scope.
Example:

Consider an example where the "Start Transaction" activity is used to initiate a transaction before executing database operations:
Start Transaction:
  Connection: postgresConnection
  Delay: 2
  Body:
    - Execute SQL Query: "INSERT INTO table1 (column1, column2) VALUES ('value1', 'value2')"
    - Execute SQL Query: "UPDATE table2 SET column1 = 'newvalue' WHERE column2 = 'somecondition'"
    - ...
In this example, the activities defined within the "Body" property are executed as part of a single transaction. If any of the activities fail, the transaction will be rolled back, ensuring data integrity in the PostgreSQL database.
Note: Ensure that the "Start Transaction" activity is used in conjunction with the "Roll Back Transaction" and "Commit Transaction" activities to handle success and failure scenarios within the workflow. Additionally, the delay is optional and can be configured based on specific requirements for handling transactions.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Execute Function/index.html

Execute Function
AutomatR.PostgreSQL.Database.ExecuteFunction
The "Execute Function" activity in AutomatR for PostgreSQL databases allows you to execute a functional statement on a PostgreSQL database. This activity is designed to handle the execution of stored functions with input and output parameters. It provides flexibility in handling both data retrieval and function output parameters.
Properties
​
Name
Description
Input
Connection
Provide an NpgsqlConnection variable which will be used to establish a database connection. NpgsqlConnection variables containing the connection to be used.
Function Name
Specify the name of the function to be executed. String variables containing the function name.
Returns Table
When selected, indicates that the given function is expected to return a table, and data is available in the "Result" property. When not selected, the function may have output variables, and their values are available in the "Out Variables" property. Boolean variables indicating whether the function returns a table.
Parameters
Dictionary containing input parameters for the function. Each parameter is represented by a key-value pair, where the key is the parameter name, and the value is the argument value.
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Function" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
The result of the SQL command will be stored in a DataTable variable, allowing you to utilize it in subsequent activities or operations. DataTable variables to store the result of the function.
Out Variables
Provides a Dictionary containing output direction parameters and their values after executing the stored function. Dictionary variables to store output parameter values.
How to use:
Drag and drop the "Execute Function" activity onto the workflow.
Configure the properties by specifying the NpgsqlConnection variable obtained from the "Connect" activity, the function name, and input parameters.
Optionally, configure the delay, command timeout, and whether the function returns a table.
Execute the workflow to execute the specified function on the PostgreSQL database.
Example:

Consider an example where the "Execute Function" activity is used to execute a function named "sp_add_users" with input parameters and output variables:
Execute Function:
  Delay: 2
  Connection: myDBConnection
  Function Name: "sp_add_users"
  Returns Table: False
  Parameters:
    uid: 3
    uname: "QAQA"
  Command Timeout: 5000
  Result: myFunctionResult
  Out Variables: myOutputVariables
In this example, the activity executes the "sp_add_users" function with input parameters "uid" and "uname." If the function has output variables, their values are stored in the Dictionary variable "myOutputVariables," and the result of the SQL command is stored in the DataTable variable "myFunctionResult" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Execute Non Query/index.html

Execute Non Query
AutomatR.PostgreSQL.Database.ExecuteNonQuery
The "Execute Non Query" activity in AutomatR for PostgreSQL databases allows you to execute a non-query SQL statement on a PostgreSQL database. This activity is useful when you need to perform actions that don't return a result set, such as INSERT, UPDATE, or DELETE operations.
Properties
​
Name
Description
Input
Connection
Provide an NpgsqlConnection variable which will be used to establish a database connection. NpgsqlConnection variables containing the connection to be used.
Command Text
Provide a SQL query in string format. String variables containing the SQL query to be executed.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Non Query" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error.
Output
Result
The result of the SQL command will be stored in a 
Nullable<Int32>
 variable, allowing you to utilize it in subsequent activities or operations. 
Nullable<Int32>
 variables to store the result of the non-query execution.
How to use:
Drag and drop the "Execute Non Query" activity onto the workflow.
Configure the properties by specifying the NpgsqlConnection variable obtained from the "Connect" activity and the SQL query to be executed.
Optionally, configure the delay, command timeout, and customize the display name.
Execute the workflow to execute the specified non-query SQL statement on the PostgreSQL database.
Example:

Consider an example where the "Execute Non Query" activity is used to execute an SQL INSERT statement to add a new record to a table:
Execute Non Query:
  Delay: 2
  Connection: myDBConnection
  Command Text: "INSERT INTO Employees (Name, Age) VALUES ('John Doe', 30)"
  Command Timeout: 5000
  Result: affectedRows
In this example, the activity executes the SQL INSERT statement to add a new employee record to the "Employees" table. The result, representing the number of affected rows, is stored in the 
Nullable<Int32>
 variable "affectedRows" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Disconnect/index.html

Disconnect
AutomatR.PostgreSQL.Database.Disconnect
The "Disconnect" activity in AutomatR allows you to gracefully disconnect from a specified PostgreSQL database, closing the database connection. This activity is essential for maintaining a clean and organized workflow, ensuring proper resource management.
Properties
​
Name
Description
Input
Connection
Provide an NpgsqlConnection variable that represents the connection to the PostgreSQL database. This variable is typically obtained from the "Connect" activity. NpgsqlConnection variables containing the connection to be disconnected.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Disconnect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Disconnect" activity onto the workflow.
Configure the properties by specifying the NpgsqlConnection variable obtained from the "Connect" activity.
Optionally, configure the delay.
Execute the workflow to gracefully disconnect from the specified PostgreSQL database.
Example:

Consider an example where the "Disconnect" activity is used to disconnect from a PostgreSQL database:
Disconnect:
  Delay: 2
  Connection: myDBConnection
In this example, the activity gracefully disconnects from the PostgreSQL database represented by the NpgsqlConnection variable "myDBConnection" with a 2-second delay. The connection is closed, and a success message is logged for reference.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Postgre SQL/Connect/index.html

Connect
AutomatR.PostgreSQL.Database.Connect
The "Connect" activity in AutomatR facilitates the connection to a specified PostgreSQL database. This activity is crucial for establishing a connection that can be utilized by subsequent database-related activities.
Properties
​
Name
Description
Input
Source
Specify the source path for the PostgreSQL database. String variables containing the source path.
Port
Specify the port number for the PostgreSQL database. Integer variables containing the port number.
DataBase Name
Specify the name of the PostgreSQL database to connect with. String variables containing the database name.
UserName
Provide the username for the PostgreSQL database. String variables containing the username.
Password
Provide a password for the specified username to connect to the PostgreSQL database. String variables containing the password.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Connect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Connection
Outputs the result as an NpgsqlConnection variable, which can be used for further database activities. Variables of type NpgsqlConnection to store the connection.
How to use:
Drag and drop the "Connect" activity onto the workflow.
Configure the properties by specifying the source path, port, database name, and optionally, the username and password for the PostgreSQL database.
Optionally, configure the delay.
Execute the workflow to establish a connection to the specified PostgreSQL database.
Example:

Consider an example where the "Connect" activity is used to connect to a PostgreSQL database:
Connect:
  Delay: 2
  Source: "localhost"
  Port: 5432
  DataBase Name: "mydatabase"
  UserName: "user"
  Password: "password"
  Connection: myDBConnection
In this example, the activity establishes a connection to the "mydatabase" PostgreSQL database on the local machine with a 2-second delay. The connection information, including the username and password, is provided, and the result is stored in the NpgsqlConnection variable "myDBConnection" for further database-related activities.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Commit Transaction/index.html

Commit Transaction
AutomatR.OracleDB.Database.CommitTransaction
The "Commit Transaction" activity in AutomatR for Oracle databases finalizes and commits the ongoing transaction. This activity is essential for ensuring that all changes made within the transaction are permanently saved to the database. If the transaction is successful, the changes are committed; otherwise, they are rolled back.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Commit Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Commit Transaction" activity onto the workflow.
Configure the properties by specifying the delay duration.
Place the "Commit Transaction" activity after the database operations you want to include in the transaction.
Execute the workflow to commit the transaction and permanently save the changes made within it to the database.
Note:
Use the "Commit Transaction" activity after completing a set of database operations within a transaction to make the changes permanent.
Ensure that the "Commit Transaction" activity is used in conjunction with the "Start Transaction" activity to finalize and commit the entire transaction.
Example:

Consider an example where the "Commit Transaction" activity is used to commit changes made within a transaction:
Start Transaction:
  Display Name: "Transaction Scope"
  Connection: oracleConnectionVariable
  Sequence:
    OracleDB Activity 1
    OracleDB Activity 2
    OracleDB Activity 3
    Commit Transaction:
      Delay: 2 seconds
In this example, the "Start Transaction" activity begins a transaction, and three database activities (Activity 1, Activity 2, and Activity 3) are executed within the transaction. The "Commit Transaction" activity is used to commit the changes made within the transaction after the database activities. The delay ensures a pause before committing the transaction.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Roll Back Transaction/index.html

Roll Back Transaction
AutomatR.OracleDB.Database.RollBackTransaction
The "Roll Back Transaction" activity in AutomatR for Oracle databases is designed to roll back a transaction, reverting any changes made within the transaction and ensuring data consistency. This activity is particularly useful when there is a need to undo the effects of a transaction in case of errors or other exceptional scenarios.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Roll Back Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Roll Back Transaction" activity onto the workflow.
Ensure that this activity is placed within the scope of a "Start Transaction" activity. This ensures that the rollback operation is associated with the correct transaction.
Optionally, configure the delay.
Execute the workflow to roll back the ongoing database transaction.
Note:
The "Roll Back Transaction" activity should be used within the scope of a "Start Transaction" activity. It is designed to work with the transaction initiated by the "Start Transaction" activity.
Rolling back a transaction undoes all changes made during that transaction, reverting the database to its state before the transaction began.
Example:

Consider an example where the "Roll Back Transaction" activity is used within a transactional scope to roll back changes if an error occurs:
Start Transaction:
  Connection: oracleConnectionVariable
  Transaction: transactionVariable
  // Perform database operations within the transaction scope
  
  If (Error Condition):
    Roll Back Transaction:
      Delay: 0 // No delay
In this example, the "Roll Back Transaction" activity is used within a transactional scope. If an error condition occurs within the scope, the transaction is rolled back, ensuring that any changes made within the transaction are undone.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Execute Stored Procedure/index.html

Execute Stored Procedure
AutomatR.OracleDB.Database.ExecuteStoredProcedure
The "Execute Stored Procedure" activity in AutomatR is designed to execute a stored procedure on an Oracle database, providing a flexible way to interact with the database and retrieve results. This activity is particularly useful when you need to call stored procedures for various database operations.
Properties
​
Name
Description
Input
Connection
Specifies the OracleConnection variable representing the database connection on which the stored procedure will be executed. This variable should be obtained from a previous "Connect" activity or a similar source.
Procedure Name
Specifies the name of the stored procedure to be executed. String variables containing the stored procedure name.
Parameters
Specifies the input parameters for the stored procedure. You can provide input parameters with their names and values. The direction should be set to "In".
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Stored Procedure" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Command Timeout
Specifies the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. If not provided, the default timeout is set to 60 seconds. Integer variables containing the command timeout duration.
Output
Result
Outputs the result of the stored procedure as a DataSet variable. The DataSet variable can be used in subsequent activities or operations within the workflow.
Out Variables
Outputs a Dictionary containing out direction parameters and their values after executing the stored procedure. This is useful when the stored procedure has output parameters.
How to use:
Drag and drop the "Execute Stored Procedure" activity onto the workflow.
Configure the properties by specifying the OracleConnection variable obtained from a previous "Connect" activity, the stored procedure name, input parameters, and other optional parameters.
Optionally, configure the delay.
Execute the workflow to execute the stored procedure and retrieve the result as a DataSet and out variables.
Note:
Ensure that the provided stored procedure name is valid and exists in the Oracle database.
Input and output parameters are defined using a dictionary where keys are parameter names, and values are Argument objects containing details like direction and datatype.
Example:

Consider an example where the "Execute Stored Procedure" activity is used to call a stored procedure named "sp_get_emp_info" that retrieves employee information:
Execute Stored Procedure:
  Connection: oracleConnectionVariable
  Procedure Name: "sp_get_emp_info"
  Parameters:
    EmpID: empIdVariable (In)
    DeptID: deptIdVariable (In)
  Command Timeout: 5000
  Result: employeeData
  Out Variables: outVariablesDictionary
In this example, the activity is configured to execute the "sp_get_emp_info" stored procedure with input parameters "EmpID" and "DeptID." The result is stored in the DataSet variable "employeeData," and the output parameters are stored in the Dictionary variable "outVariablesDictionary" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Execute Reader/index.html

Execute Reader
AutomatR.OracleDB.Database.ExecuteReader
The "Execute Reader" activity in AutomatR is designed to execute a SQL query on an Oracle database and retrieve the query result as a DataTable. This activity is useful when you need to fetch data from the database for further processing in your workflow.
Properties
​
Name
Description
Input
Connection
Specifies the OracleConnection variable representing the database connection on which the SQL query will be executed. This variable should be obtained from a previous "Connect" activity or a similar source.
Command Text
Specifies the SQL query to be executed. This query retrieves data from the Oracle database. String variables containing the SQL command text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Reader" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Command Timeout
Specifies the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. If not provided, the default timeout is set to 300 seconds. Integer variables containing the command timeout duration.
Output
Result
Outputs the result of the SQL query as a DataTable variable. The DataTable variable can be used in subsequent activities or operations within the workflow.
How to use:
Drag and drop the "Execute Reader" activity onto the workflow.
Configure the properties by specifying the OracleConnection variable obtained from a previous "Connect" activity, the SQL query text, and other optional parameters.
Optionally, configure the delay.
Execute the workflow to execute the SQL query and retrieve the result as a DataTable.
Note:
Ensure that the SQL query provided is a valid SELECT statement.
The result is stored in a DataTable variable, allowing you to manipulate and use the tabular data in subsequent activities.
Example:

Consider an example where the "Execute Reader" activity is used to fetch employee data from an Oracle database:
Execute Reader:
  Connection: oracleConnectionVariable
  Command Text: "SELECT * FROM Employees"
  Command Timeout: 5000
  Result: employeeData
In this example, the activity is configured to execute a SELECT query on the "Employees" table, and the result is stored in the DataTable variable "employeeData" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Start Transaction/index.html

Start Transaction
AutomatR.OracleDB.Database.StartTransaction
The "Start Transaction" activity in AutomatR for Oracle databases initiates a transaction on the database. This activity is crucial for grouping a set of database operations into a single, atomic unit of work. The transaction can be committed or rolled back based on the success or failure of the enclosed database operations.
Properties
​
Name
Description
Input
Connection
Specifies an OracleConnection variable used to establish a connection to the database. This connection is used for the entire duration of the transaction. A variable of type OracleConnection should be provided.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Start Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Start Transaction" activity onto the workflow.
Configure the properties by specifying the delay duration and providing an OracleConnection variable.
Optionally, configure the delay and customize the display name.
Place the database operations you want to include in the transaction within the "Start Transaction" activity. Connect them to the "Start Transaction" activity using the Sequence activity or other suitable activity containers.
Execute the workflow to start the transaction and perform the enclosed database operations.
Note:
The "Start Transaction" activity should enclose database operations that you want to be part of the same transaction. This ensures that either all operations are committed or none of them are, providing data consistency.
Use the "Start Transaction" activity in conjunction with other database activities to perform operations like inserts, updates, or deletes within a transaction.
Example:

Consider an example where the "Start Transaction" activity is used to encapsulate database operations:
Start Transaction:
  Display Name: "Transaction Scope"
  Delay: 2 seconds
  Connection: oracleConnectionVariable
  Sequence:
    OracleDB Activity 1
    OracleDB Activity 2
    OracleDB Activity 3
In this example, the "Start Transaction" activity begins a transaction, and three database activities (Activity 1, Activity 2, and Activity 3) are executed within the transaction. If all three activities succeed, the transaction is committed. If any activity fails, the transaction is rolled back, ensuring data consistency.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Execute Non Query/index.html

Execute Non Query
AutomatR.OracleDB.Database.ExecuteNonQuery
The "Execute Non Query" activity in AutomatR is designed for executing non-query SQL statements on an Oracle database. This activity is typically used for operations that modify the database, such as insert, update, or delete statements. It requires a valid OracleConnection variable and a SQL query as input.
Properties
​
Name
Description
Input
Connection
Specifies the OracleConnection variable representing the database connection on which the SQL command will be executed. This variable should be obtained from a previous "Connect" activity or a similar source.
Command Text
Specifies the SQL query to be executed as a non-query statement. This query can include insert, update, delete, or other non-query operations. String variables containing the SQL command text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Non Query" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Command Timeout
Specifies the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. If not provided, the default timeout is set to 60 seconds. Integer variables containing the command timeout duration.
Output
Result
Outputs the result of the SQL command, representing the number of rows affected by the non-query operation. The result is stored in an integer variable for further use in the workflow.
How to use:
Drag and drop the "Execute Non Query" activity onto the workflow.
Configure the properties by specifying the OracleConnection variable obtained from a previous "Connect" activity, the SQL command text, and other optional parameters.
Optionally, configure the delay.
Execute the workflow to perform the non-query operation on the Oracle database.
Note:
Ensure that the SQL query provided is a valid non-query statement (e.g., INSERT, UPDATE, DELETE, or DDL).
The result represents the number of rows affected by the non-query operation and is stored in the specified integer variable.
Example:

Consider an example where the "Execute Non Query" activity is used to insert data into an Oracle database:
Execute Non Query:
  Connection: oracleConnectionVariable
  Command Text: "INSERT INTO Employees (EmployeeID, EmployeeName) VALUES (1, 'John Doe')"
  Command Timeout: 5000
  Result: rowsAffected
In this example, the activity is configured to execute an insert statement on the "Employees" table, and the number of affected rows is stored in the integer variable "rowsAffected" for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Disconnect/index.html

Disconnect
AutomatR.OracleDB.Database.Disconnect
The "Disconnect" activity in AutomatR allows you to gracefully disconnect from a specified Oracle database. This is a crucial step after completing database operations to release resources and ensure proper cleanup. The activity requires an OracleConnection variable to be provided as input, representing the connection to be disconnected.
Properties
​
Name
Description
Input
Connection
Specifies the OracleConnection variable representing the database connection that needs to be disconnected. This variable should be obtained from a previous "Connect" activity or a similar source.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Disconnect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Disconnect" activity onto the workflow.
Configure the properties by specifying the OracleConnection variable obtained from a previous "Connect" activity.
Optionally, configure the delay.
Execute the workflow to disconnect from the specified Oracle database.
Note:
Ensure that the "Disconnect" activity is used to release resources and properly terminate the connection after completing database operations.
Provide the OracleConnection variable obtained from a previous "Connect" activity to disconnect from the correct database.
Example:

Consider an example where the "Disconnect" activity is used to gracefully disconnect from an Oracle database:
Disconnect:
  Connection: oracleConnectionVariable
  Delay: 2
In this example, the "Disconnect" activity is configured with the OracleConnection variable "oracleConnectionVariable," and a delay of 2 seconds is added before the disconnection for synchronization purposes.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/Oracle/Connect/index.html

Connect
AutomatR.OracleDB.Database.Connect
The "Connect" activity in AutomatR facilitates the connection to a specified Oracle database. Establishing a connection is a crucial step before executing any database-related operations. This activity provides options to configure the connection string and other parameters for secure and efficient database communication.
Properties
​
Name
Description
Input
Connection String
Specifies the connection string for connecting to the Oracle database. String variables containing the connection string.
Password
Provides a secure password required to connect to the Oracle database. String variables containing the secure password.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Connect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Connection
Outputs the result of the "Connect" activity, storing the OracleConnection variable. This variable can be used in further activities that require database communication.
How to use:
Drag and drop the "Connect" activity onto the workflow.
Configure the properties by specifying the connection string, and optionally, the delay and password.
Execute the workflow to establish a connection to the specified Oracle database.
Use the resulting OracleConnection variable in subsequent database-related activities.
Note:
Ensure that the "Connect" activity is used before performing any database operations to establish a connection.
The connection string is a critical parameter, and it should be configured correctly to connect to the desired Oracle database.
Example:

Consider an example where the "Connect" activity is used to establish a connection to an Oracle database:
Connect:
  Connection String: "Data Source=OracleDB;User Id=myUser;Password=myPassword;"
  Password: "securePassword"
  Connection: oracleConnectionVariable
In this example, the "Connect" activity is configured with the necessary connection string, password, and outputs an OracleConnection variable named "oracleConnectionVariable" for further database operations.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Commit Transaction/index.html

Commit Transaction
AutomatR.MySQLDataBase.CommitTransaction
The "Commit Transaction" activity in AutomatR is part of the MySQL database activities package, facilitating the commitment of a transaction. This activity is essential for ensuring that changes made during the transaction are permanently saved to the database.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Commit Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Commit Transaction" activity onto the workflow.
Optionally, configure the delay for synchronization purposes.
Ensure that the "Commit Transaction" activity is placed within a MySQL "Start Transaction" activity. This ensures that it is part of the transaction scope.
Execute the workflow to commit the transaction.
Example:

Consider an example where the "Commit Transaction" activity is used to commit changes made within a MySQL transaction:
Commit Transaction:
  Delay: 0
In this example, the activity commits the changes made within the MySQL transaction. The delay is set to 0, indicating that there is no additional waiting time before committing the transaction.
Note:
 The "Commit Transaction" activity should always be used within the scope of a MySQL "Start Transaction" activity to ensure proper transaction handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Roll Back Transaction/index.html

Roll Back Transaction
AutomatR.MySQLDataBase.RollBackTransaction
The "Roll Back Transaction" activity in AutomatR for MySQL databases is designed to roll back a transaction initiated by the "Start Transaction" activity. This activity is crucial for ensuring data consistency and integrity by reverting changes made during the transaction in case of errors or unforeseen circumstances.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Roll Back Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Roll Back Transaction" activity onto the workflow.
Optionally, configure the delay for synchronization purposes.
Ensure that the "Roll Back Transaction" activity is placed within the scope of a "Start Transaction" activity to properly handle the rollback operation.
Example:

Consider an example where a series of database operations are performed within a transaction using the "Start Transaction" activity. In the event of an error, the "Roll Back Transaction" activity is used to revert the changes made during the transaction:
Start Transaction:
  Connection: MySqlConnectionVariable
  Transaction: TransactionVariable
  Data: TransactionDataDictionary
... Perform database operations within the transaction ...
If Error Occurs:
  Roll Back Transaction:
    Delay: 0
In this example, the "Roll Back Transaction" activity is placed within the error-handling path of the workflow. If an error occurs during the transaction, the "Roll Back Transaction" activity is executed with a delay of 0 seconds to promptly roll back the changes made within the transaction, ensuring data consistency.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Execute Stored Procedure/index.html

Execute Stored Procedure
AutomatR.MySQLDataBase.Database.ExecuteStoredProcedure
The "Execute Stored Procedure" activity in AutomatR is designed to execute a stored procedure on a MySQL database. This activity facilitates the execution of complex database operations and provides flexibility in handling input parameters, output parameters, and result sets.
Properties
​
Name
Description
Input
Connection
Provide a MySqlConnection variable used to establish a connection to the MySQL database. Variables of type MySqlConnection.
Procedure Name
Provide the name of the stored procedure specified in the SQL parameter. String variables containing the stored procedure name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. Integer variables containing the timeout duration. If not specified, a default timeout of 60 seconds is applied.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Stored Procedure" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
The result of the SQL command will be stored in a DataSet variable, allowing you to utilize it in subsequent activities or operations. Variables of type DataSet to store the query result.
Out Variables
Provides a Dictionary containing out-direction parameters and their values after executing the stored procedure. Variables of type Dictionary<string, object> to store the output parameters.
Parameters:

The "Execute Stored Procedure" activity supports both input and output parameters. Parameters are configured using the "Parameters" property, which is a dictionary containing parameter names and associated properties.
Input Parameters (Direction: In): Specify input parameters by adding key-value pairs to the "Parameters" dictionary, where the key is the parameter name, and the value is the argument representing the parameter's value.
Output Parameters (Direction: Out): Specify output parameters by adding key-value pairs to the "Parameters" dictionary, where the key is the parameter name, and the value is the argument representing the parameter's value. The direction is set to "Out" for output parameters.
How to use:
Drag and drop the "Execute Stored Procedure" activity onto the workflow.
Configure the properties by specifying the MySqlConnection variable, stored procedure name, and other optional settings.
Define input parameters using the "Parameters" property. Add key-value pairs for each input parameter, where the key is the parameter name, and the value is the argument representing the parameter's value.
Define output parameters using the "Parameters" property. Add key-value pairs for each output parameter, where the key is the parameter name, and the value is the argument representing the parameter's value. Set the direction to "Out" for output parameters.
Optionally, configure the command timeout and delay for synchronization purposes.
Execute the workflow to run the specified stored procedure on the MySQL database, retrieve the result as a DataSet, and store output parameters for further use.
Example:

Consider an example where the "Execute Stored Procedure" activity is used to execute a stored procedure named "GetEmployeeDetails" with input parameters "EmpID" and "Department" and output parameter "EmployeeCount."
Execute Stored Procedure:
  Connection: MySqlConnectionVariable
  Procedure Name: "GetEmployeeDetails"
  Parameters:
    EmpID: EmpIDVariable (Direction: In)
    Department: "HR" (Direction: In)
    EmployeeCount: EmployeeCountVariable (Direction: Out)
  Command Timeout: 5000
  Result: EmployeeDetailsDataSet
  Out Variables: OutputParametersDictionary
In this example, the activity executes the "GetEmployeeDetails" stored procedure with input parameters "EmpID" and "Department." The result is stored in the DataSet variable "EmployeeDetailsDataSet," and output parameters are stored in the Dictionary variable "OutputParametersDictionary" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Execute Reader/index.html

Execute Reader
AutomatR.MySQLDataBase.Database.ExecuteReader
The "Execute Reader" activity in AutomatR is used to execute a query on a MySQL database and retrieve the query result as a DataTable. This activity is beneficial for scenarios where you need to fetch data from a database and use it in subsequent steps of your automation workflow.
Properties
​
Name
Description
Input
Command Text
Provide the SQL query in string format that needs to be executed. String variables containing the SQL query.
Connection
Provide a MySqlConnection variable used to establish a connection to the MySQL database. Variables of type MySqlConnection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. Integer variables containing the timeout duration. If not specified, a default timeout of 300 seconds is applied.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Reader" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
The result of the SQL command will be stored in a DataTable variable, allowing you to utilize it in subsequent activities or operations. Variables of type DataTable to store the query result.
How to use:
Drag and drop the "Execute Reader" activity onto the workflow.
Configure the properties by specifying the MySqlConnection variable and the SQL query.
Optionally, configure the command timeout and delay for synchronization purposes.
Execute the workflow to run the specified SQL query on the MySQL database and retrieve the result as a DataTable.
Example:

Consider an example where the "Execute Reader" activity is used to fetch employee data from a MySQL database:
Execute Reader:
  Connection: MySqlConnectionVariable
  Command Text: "SELECT * FROM Employees"
  Command Timeout: 5000
  Result: EmployeeData
In this example, the activity executes a SQL SELECT command to retrieve all data from the "Employees" table. The result, which is a DataTable containing employee data, is stored in the DataTable variable "EmployeeData" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Start Transaction/index.html

Start Transaction
AutomatR.MySQLDataBase.Database.StartTransaction
The "Start Transaction" activity in AutomatR for MySQL databases is designed to initiate a database transaction, providing a way to group multiple database operations into a single unit of work. Transactions ensure data integrity by either committing all changes or rolling back to the previous state in case of an error.
Properties
​
Name
Description
Input
Connection
Specifies a MySqlConnection variable to establish a connection to the MySQL database. This variable is used to execute database operations within the transaction. MySqlConnection variables containing the necessary connection details.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Start Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Start Transaction" activity onto the workflow.
Configure the properties by specifying the MySqlConnection variable for the connection.
Optionally, configure the delay for synchronization purposes.
Use the provided scope to define the sequence of database operations to be included in the transaction.
Example:

Consider an example where a series of database operations need to be executed within a transaction:
Start Transaction:
  Connection: MySqlConnectionVariable
  Delay: 0
  ... Perform database operations within the transaction ...
  If Error Occurs:
    Roll Back Transaction
  Else:
    Commit Transaction
In this example, the "Start Transaction" activity is used to initiate a transaction. The MySqlConnection variable, "MySqlConnectionVariable," is used to execute database operations within the transaction. If an error occurs, the transaction is rolled back; otherwise, it is committed, ensuring data integrity.
Start Transaction Scope
AutomatR.MySQLDataBase.Database.StartTransactionScope
The "Start Transaction Scope" activity in AutomatR serves as a container for defining a sequence of actions to be executed within a transaction. It works in conjunction with the "Start Transaction" activity to encapsulate the database operations that should be included in the transaction.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Start Transaction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Start Transaction Scope" activity onto the workflow.
Place the desired sequence of database activities within the "Start Transaction Scope."
Ensure that the "Start Transaction" activity precedes the "Start Transaction Scope" to encapsulate the subsequent operations within a transaction.
Example:

Consider the continuation of the previous example, where a sequence of database operations is included in the transaction:
Start Transaction:
  Connection: MySqlConnectionVariable
  Delay: 0
Start Transaction Scope:
  ... Perform database operations within the transaction ...
  If Error Occurs:
    Roll Back Transaction
  Else:
    Commit Transaction
In this example, the "Start Transaction Scope" activity contains the sequence of database operations to be executed within the transaction initiated by the "Start Transaction" activity. The transaction is committed if no errors occur; otherwise, it is rolled back to maintain data consistency.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Execute Non Query/index.html

Execute Non Query
AutomatR.MySQLDataBase.Database.ExecuteNonQuery
The "Execute Non Query" activity in AutomatR is designed for executing SQL commands that do not return any data, such as INSERT, UPDATE, DELETE, etc., on a MySQL database. This activity facilitates database manipulation within automation workflows.
Properties
​
Name
Description
Input
Command Text
Provide the SQL query in string format that needs to be executed. String variables containing the SQL query.
Connection
Provide a MySqlConnection variable used to establish a connection to the MySQL database. Variables of type MySqlConnection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Command Timeout
Provide the amount of time (in milliseconds) to wait for the SQL command to run before throwing an error. Integer variables containing the timeout duration. If not specified, a default timeout of 60 seconds is applied.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Non Query" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
The result of the SQL command will be stored in a Nullable
<
Int32
>
 variable, allowing you to utilize it in subsequent activities or operations. Variables of type Nullable
<
Int32
>
 to store the execution result.
How to use:
Drag and drop the "Execute Non Query" activity onto the workflow.
Configure the properties by specifying the MySqlConnection variable, SQL query, and optionally setting the command timeout.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to run the specified SQL command on the MySQL database.
Example:

Consider an example where the "Execute Non Query" activity is used to insert data into a MySQL database:
Execute Non Query:
  Connection: MySqlConnectionVariable
  Command Text: "INSERT INTO Employees (FirstName, LastName) VALUES ('John', 'Doe')"
  Command Timeout: 5000
  Result: InsertResult
In this example, the activity executes a SQL INSERT command to add a new employee with the name "John Doe" into the "Employees" table. The result of the execution is stored in the Nullable
<
Int32
>
 variable "InsertResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Disconnect/index.html

Disconnect
AutomatR.MySQLDataBase.Database.Disconnect
The "Disconnect" activity in AutomatR is designed to gracefully disconnect from a MySQL database, ensuring proper closure of the database connection established by the "Connect" activity. This is a crucial step in database operations to release resources and manage connections efficiently.
Properties
​
Name
Description
Input
Connection
Provide a MySqlConnection variable that was used to establish the database connection. Variables of type MySqlConnection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Disconnect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Disconnect" activity onto the workflow.
Configure the properties by specifying the MySqlConnection variable obtained from the "Connect" activity.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to gracefully disconnect from the MySQL database.
Example:

Consider an example where the "Disconnect" activity is used to disconnect from a MySQL database:
Disconnect:
  Connection: MySqlConnectionVariable
  Delay: 2
In this example, the activity disconnects from the MySQL database using the MySqlConnection variable "MySqlConnectionVariable." A delay of 2 seconds is introduced before the disconnect operation to handle synchronization issues. The activity logs a trace message indicating successful disconnection.

URL: https://docs.automatr.tech/docs/Products/Activities/Database/MySQL/Connect/index.html

Connect
AutomatR.MySQLDataBase.Database.Connect
The "Connect" activity in AutomatR facilitates the connection to a MySQL database. This activity is crucial for establishing a connection to the specified database, allowing subsequent activities to interact with the database.
Properties
​
Name
Description
Input
DataBase Name
Specifies the name of the database you want to connect with. String variables containing the database name.
Password
Provide a password for the username with which you would like to connect to the database. SecureString variables containing the password.
Port
Specify the port number for the database you want to connect with. Integer variables containing the port number.
Source
Specify a source path. String variables containing the source path.
User Name
Provide a username for the database. String variables containing the username.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Connect" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Connection
The result will be stored in a MySQLConnection variable, which can be used for further activities. Variables of type MySqlConnection to store the database connection.
How to use:
Drag and drop the "Connect" activity onto the workflow.
Configure the properties by specifying the database name, password, port, source, and username for the database connection.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to establish a connection to the specified MySQL database.
Example:

Consider an example where the "Connect" activity is used to connect to a MySQL database:
Connect:
  Source: "localhost"
  Port: 3306
  DataBase Name: "sampledb"
  User Name: "admin"
  Password: SecureStringVariable
  Connection: MySqlDbConnection
In this example, the activity connects to the "sampledb" MySQL database on the "localhost" server using the provided credentials. The resulting database connection is stored in the variable "MySqlDbConnection" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/FTP/Directory Exists/index.html

Directory Exists
AutomatR.FTP.DirectoryExists
The "Directory Exists" activity in AutomatR is part of the FTP activities package, allowing automation processes to verify whether a specific directory is available on the FTP server. This activity streamlines the process of checking directory existence, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
User Name
Provides a valid username to establish a connection with the FTP server. String variables containing the username.
Password
Provides the password for the username to establish a connection with the FTP server. String variables containing the password.
Host
Provides a valid host credential to establish a connection with the FTP server. String variables containing the host information.
Server Path
Provides the server path for the directory whose existence you want to verify. For example, "/DirectoryExist". String variables containing the server path.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Directory Exists" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
Output
Result
Outputs a Boolean value (True or False) based on the existence of the specified directory on the FTP server. Variables of relevant types (e.g., Boolean variables) to store the existence result.
How to use:
Drag and drop the "Directory Exists" activity onto the workflow.
Configure the properties by specifying the FTP server credentials, server path for the directory, and optional delay.
Execute the workflow to check the existence of the specified directory on the FTP server.
Example:

Consider an example where the "Directory Exists" activity is used to verify the existence of a directory named "DirectoryExist" on the FTP server:
Directory Exists:
  Delay: 0
  Password: "your_password"
  User Name: "your_username"
  Host: "ftp.yourftpserver.com"
  Server Path: "/DirectoryExist"
  Result: doesDirectoryExist
In this example, the activity checks whether the "DirectoryExist" directory exists on the FTP server. The result of the check (True or False) is stored in the Boolean variable "doesDirectoryExist" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/FTP/Delete File/index.html

Delete File
AutomatR.FTP.DeleteFile
The "Delete File" activity in AutomatR is part of the FTP activities package, allowing automation processes to remove selected files from an FTP server. This activity streamlines the process of deleting files, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
User Name
Provides a valid username to establish a connection with the FTP server. String variables containing the username.
Password
Provides the password for the username to establish a connection with the FTP server. String variables containing the password.
Host
Provides a valid host credential to establish a connection with the FTP server. String variables containing the host information.
Server Path
Provides the server path from which you want to delete a file. For example, "/deletefile". String variables containing the server path.
Server Files
Specifies the path of the files you want to delete using the 
List<String>
 variable data type. For example, 
new List<string> {"/DeleteFile/DeleteFile.docx"}
. Variables containing a list of server file paths.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
How to use:
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the FTP server credentials, server path, and the list of files to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified files from the FTP server.
Example:

Consider an example where the "Delete File" activity is used to delete a file named "DeleteFile.docx" from the server path "/DeleteFile" on the FTP server:
Delete File:
  Delay: 0
  Password: "your_password"
  User Name: "your_username"
  Host: "ftp.yourftpserver.com"
  Server Path: "/DeleteFile"
  Server Files: new List<string> {"/DeleteFile/DeleteFile.docx"}
In this example, the activity deletes the "DeleteFile.docx" file from the "/DeleteFile" directory on the FTP server.

URL: https://docs.automatr.tech/docs/Products/Activities/FTP/File Exist/index.html

File Exist
AutomatR.FTP.FileExist
The "File Exist" activity in AutomatR is part of the FTP activities package, allowing automation processes to verify the existence of a specific file on an FTP server. This activity streamlines the process of checking whether a file is available at a specified server path, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
User Name
Provides a valid username to establish a connection with the FTP server. String variables containing the username.
Password
Provides the password for the username to establish a connection with the FTP server. String variables containing the password.
Host
Provides a valid host credential to establish a connection with the FTP server. String variables containing the host information.
Server File Path
Provides the server path for the file whose existence you want to verify. For example, "/FileExist/FileExist.doc". String variables containing the server file path.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "File Exist" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
Output
Result
Outputs a boolean value (True or False) based on whether the specified file exists on the FTP server or not. Boolean variables to store the verification result.
How to use:
Drag and drop the "File Exist" activity onto the workflow.
Configure the properties by specifying the FTP server credentials, server file path for verification, and optional delay.
Execute the workflow to verify the existence of the specified file on the FTP server.
The result, indicating whether the file exists (True) or not (False), is stored in the specified Boolean variable.
Example:

Consider an example where the "File Exist" activity is used to check the existence of a file named "FileExist.doc" on the FTP server:
File Exist:
  Delay: 0
  Password: "your_password"
  User Name: "your_username"
  Host: "ftp.yourftpserver.com"
  Server File Path: "/FileExist/FileExist.doc"
  Result: isFileExist
In this example, the activity verifies whether the file "FileExist.doc" exists at the specified server path on the FTP server. The result of the verification (True or False) is stored in the Boolean variable "isFileExist" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/FTP/Upload Files/index.html

Upload Files
Certainly! Here is the help documentation for the "Upload Files" activity:
#
 Upload Files
```AutomatR.FTP.UploadFiles```
The "Upload Files" activity in AutomatR is part of the FTP activities package, providing functionality to upload files to an FTP server. This activity streamlines the process of transferring files from a local system to a specified path on the FTP server, enhancing the efficiency of automation workflows.
##
 Properties
|
 Name                 
|
 Description                
|
|
 
--------------------
 
|
 
--------
 
|
|
 
**
*
Input
*
**
   
|
           
|
|
 User Name            
|
 Provides a valid username to establish a connection with the FTP server. String variables containing the username. 
|
|
 Password             
|
 Provides the password for the username to establish a connection with the FTP server. String variables containing the password. 
|
|
 Host                 
|
 Provides a valid host credential to establish a connection with the FTP server. String variables containing the host information. 
|
|
 Source Files         
|
 Provides a List
<
String
>
 variable that contains the paths of the files you want to upload from your local system. For example, use 
`new List<string> { "D:\\UploadFile/uploadfile.docx" }`
. 
|
|
 Server Path          
|
 Provides the server path where you would like to upload the files. For example, "/UploadFile". String variables containing the server path. 
|
|
 Overwrite           
|
 If checked, it enables you to upload files with the same name as the one in the destination location. Boolean variables indicating whether to overwrite existing files. 
|
|
 
**
*
Miscellaneous
*
**
  
|
             
|
|
 Display Name         
|
 Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name. 
|
|
 
**
*
Optional
*
**
      
|
           
|
|
 Delay                
|
 Specifies the amount of time (in seconds) to wait before executing the "Upload Files" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1. 
|
**
How to use:
**
1.
 Drag and drop the "Upload Files" activity onto the workflow.
2.
 Configure the properties by specifying the FTP server credentials, local source files, server path, and optional delay.
3.
 Set the Overwrite property to decide whether to overwrite existing files with the same name in the destination location.
4.
 Execute the workflow to upload the specified files from the local system to the FTP server.
**
Example:
**
Consider an example where the "Upload Files" activity is used to upload files "uploadfile.docx" and "image.jpg" from the local system to the "/UploadFile" directory on the FTP server:
```plaintext
Upload Files:
  Delay: 0
  Password: "your_password"
  User Name: "your_username"
  Host: "ftp.yourftpserver.com"
  Source Files: new List
<
string
>
 { "D:\\UploadFile/uploadfile.docx", "D:\\UploadFile/image.jpg" }
  Server Path: "/UploadFile"
  Overwrite: true
In this example, the activity uploads files from the specified local paths to the "/UploadFile" directory on the FTP server. The Overwrite property is set to true, allowing files with the same name in the destination location to be overwritten.

URL: https://docs.automatr.tech/docs/Products/Activities/FTP/Download Files/index.html

Download Files
AutomatR.FTP.DownloadFiles
The "Download Files" activity in AutomatR is part of the FTP activities package, allowing automation processes to download specified files from an FTP server. This activity streamlines the process of retrieving files from the FTP server, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
User Name
Provides a valid username to establish a connection with the FTP server. String variables containing the username.
Password
Provides the password for the username to establish a connection with the FTP server. String variables containing the password.
Host
Provides a valid host credential to establish a connection with the FTP server. String variables containing the host information.
Server Path
Provides the server path for the file you wish to download. For example, "/ServerFile/downloadfile.doc". String variables containing the server path.
Destination Path
Browse or specify the full path on your local system where you would like to store the downloaded file from the FTP server. For example, "D:
\
FTP
\
DownloadFile". String variables containing the local destination path.
Overwrite
If checked, it enables you to download a file with the same name as the one in the destination location. Boolean variables to determine whether to overwrite existing files.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download Files" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
How to use:
Drag and drop the "Download Files" activity onto the workflow.
Configure the properties by specifying the FTP server credentials, server path for the file to download, local destination path, and optional delay.
Optionally, configure the overwrite property based on whether you want to overwrite existing files.
Execute the workflow to download the specified file from the FTP server to the local destination.
Example:

Consider an example where the "Download Files" activity is used to download a file named "downloadfile.doc" from the FTP server:
Download Files:
  Delay: 0
  Password: "your_password"
  User Name: "your_username"
  Host: "ftp.yourftpserver.com"
  Server Path: "/ServerFile/downloadfile.doc"
  Destination Path: "D:\\FTP\\DownloadFile"
  Overwrite: true
In this example, the activity downloads the "downloadfile.doc" file from the specified server path on the FTP server to the local destination path "D:
\
FTP
\
DownloadFile". The overwrite property is set to true, allowing the activity to overwrite the file if it already exists in the destination path.

URL: https://docs.automatr.tech/docs/Products/Activities/FTP/Move Item/index.html

Move Item
Certainly! Here is the help documentation for the "Move Item" activity:
#
 Move Item
```AutomatR.FTP.MoveItem```
The "Move Item" activity in AutomatR is part of the FTP activities package, facilitating the movement of an item on the FTP server from one remote location to another. This activity streamlines the process of transferring files within the FTP server, enhancing the efficiency of automation workflows.
##
 Properties
|
 Name                 
|
 Description           
|
|
 
--------------------
 
|
 
----------------
 
|
|
 
**
*
Input
*
**
   
|
       
|
|
 User Name            
|
 Provides a valid username to establish a connection with the FTP server. String variables containing the username. 
|
|
 Password             
|
 Provides the password for the username to establish a connection with the FTP server. String variables containing the password. 
|
|
 Host                 
|
 Provides a valid host credential to establish a connection with the FTP server. String variables containing the host information. 
|
|
 Server Source Path   
|
 Provides the server source path for the item you want to move. For example, "/MoveItemSource". String variables containing the server source path. 
|
|
 Server Destination Path 
|
 Provides the server destination path for the item you want to move. For example, "/MoveItemDestination". String variables containing the server destination path. 
|
|
 Overwrite           
|
 If checked, it enables you to move an item with the same name as the one in the destination location. Boolean variables indicating whether to overwrite existing items. 
|
|
 
**
*
Miscellaneous
*
**
  
|
             
|
|
 Display Name         
|
 Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name. 
|
|
 
**
*
Optional
*
**
      
|
             
|
|
 Delay    
|
 Specifies the amount of time (in seconds) to wait before executing the "Move Item" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1. 
|
**
How to use:
**
1.
 Drag and drop the "Move Item" activity onto the workflow.
2.
 Configure the properties by specifying the FTP server credentials, server source path, server destination path, and optional delay.
3.
 Set the Overwrite property to decide whether to overwrite existing items with the same name in the destination location.
4.
 Execute the workflow to move the specified item from the source path to the destination path on the FTP server.
**
Example:
**
Consider an example where the "Move Item" activity is used to move files from the source path "/MoveItemSource" to the destination path "/MoveItemDestination" on the FTP server:
```plaintext
Move Item:
  Delay: 0
  Password: "your_password"
  User Name: "your_username"
  Host: "ftp.yourftpserver.com"
  Server Source Path: "/MoveItemSource"
  Server Destination Path: "/MoveItemDestination"
  Overwrite: true
In this example, the activity moves items from the "MoveItemSource" directory to the "MoveItemDestination" directory on the FTP server. The Overwrite property is set to true, allowing items with the same name in the destination location to be overwritten.

URL: https://docs.automatr.tech/docs/Products/Activities/Configuration/Get Config Secure Text/index.html

Get Config Secure Text
The "Get Config Secure Text" activity in AutomatR is designed to securely retrieve sensitive information, such as passwords or API keys, stored in a configuration file. This activity enhances the security of automation processes by allowing the secure retrieval of confidential data without exposing it in the workflow.
Name
Description
Input
Configuration Key
Specifies the key associated with the secure text in the configuration file. Supports a 
string
 variable.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Secure Password
Captures the secure text (password) retrieved from the configuration file. It supports a 
SecureString
 variable, ensuring that the sensitive information is handled securely within the automation process.
Effectively configuring these properties allows for the secure retrieval of sensitive information from a configuration file, enhancing the security of your AutomatR automation processes. The use of SecureString ensures that confidential data remains protected throughout the workflow execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Configuration/Set Config Text/index.html

Set Config Text
The "Set Config Text" activity in AutomatR facilitates the dynamic updating or setting of non-sensitive information in a configuration file. This activity is useful for modifying configuration values based on a specified key during the execution of automation processes.
Name
Description
Input
Configuration Key
Specifies the key associated with the text value in the configuration file. Supports a 
string
 variable.
Value
Specifies the new text value that you want to set for the specified key. Supports a 
string
 variable.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Status
Captures the status of the "Set Config Text" operation, indicating whether the update or setting of the text value was successful. It supports a 
boolean
 variable, making it easy to incorporate the result into conditional workflows based on the success or failure of the update.
Effectively configuring these properties enables you to dynamically update or set text values in a configuration file, enhancing the adaptability and configurability of your AutomatR automation processes.

URL: https://docs.automatr.tech/docs/Products/Activities/Configuration/Get Config Text/index.html

Get Config Text
The "Get Config Text" activity in AutomatR is utilized to retrieve non-sensitive information stored in a configuration file. It provides a straightforward way to access configuration values based on the specified key, enhancing the configurability and adaptability of automation processes.
Name
Description
Input
Configuration Key
Specifies the key associated with the text value in the configuration file. Supports a 
string
 variable.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Value
Captures the text value retrieved from the configuration file based on the specified key. It supports a 
string
 variable, allowing the retrieved information to be used in subsequent activities within the workflow.
Effectively configuring these properties enables the seamless retrieval of non-sensitive configuration values, enhancing the flexibility and adaptability of AutomatR automation processes by leveraging external configuration files.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Find Element/index.html

Find Element
AutomatR.Web.FindElement
The "Find Element" activity in AutomatR's Web Activities category is designed to locate a specified UI element on the screen and return it as a UiElement variable. This activity is useful for interacting with specific elements on a web page during automation processes.
Properties
​
Name
Description
Input
Web Selector
Select the web element (e.g., a button) to indicate the element on the web using the selector window.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5 seconds) for the activity to be executed before throwing an exception. Default timeout is used if not specified.
Delay
Enter the wait time in seconds (e.g., 5 seconds) before starting the activity. Useful for handling synchronization issues.
Output
Result
Returns the found UI element selector and can be used as input to other activities. Variable of type Selector.
How to use:
Drag and drop the "Find Element" activity onto the workflow.
Use the "Web Selector" property to indicate the web element (e.g., button) you want to locate using the selector window.
Optionally, configure the "Timeout" and "Delay" properties based on your requirements.
Execute the workflow to find the specified UI element on the web page.
Example:

Consider an example where the "Find Element" activity is used to locate a "Submit" button on a web page:
Find Element:
  Web Selector: <your_selector_here>
  Timeout: 10
  Delay: 2
  Result: foundElement
In this example, the activity searches for the specified UI element using the provided selector. The found element's selector is stored in the variable "foundElement" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Open Developer Tools/index.html

Open Developer Tools
AutomatR.Web.OpenDeveloperTools
The "Open Developer Tools" activity in AutomatR is designed to invoke the developer tools associated with a specific browser instance. This activity is useful for inspecting and debugging web pages during automation processes.
Properties
​
Name
Description
Input
Browser
Specifies the type of browser for which the developer tools should be opened. Choose from options such as Chrome, Firefox, Edge, or Internet Explorer.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Open Developer Tools" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the developer tools were successfully opened (True) or not (False). Use a Boolean variable to store the result for further handling in the workflow.
How to use:
Drag and drop the "Open Developer Tools" activity onto the workflow.
Configure the properties by selecting the desired browser type.
Optionally, configure the delay before executing the activity.
Execute the workflow to open the developer tools for the specified browser.
Example:

Consider an example where the "Open Developer Tools" activity is used to open the developer tools for the Chrome browser:
Open Developer Tools:
  Browser: Chrome
  Delay: 3 (seconds)
  Result: isDeveloperToolsOpened
In this example, the activity opens the developer tools for the Chrome browser after a delay of 3 seconds. The result of the operation (success or failure) is stored in the Boolean variable "isDeveloperToolsOpened" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Type Secure Text/index.html

Type Secure Text
AutomatR.Web.TypeSecureText
The "Type Secure Text" activity in AutomatR is designed for UI automation workflows, specifically for sending a secure string to a UI element. This activity is commonly used to input passwords or other sensitive information into password fields.
Properties
​
Name
Description
Input
Element
Indicates the UI element to which the secure text should be sent. You can either select the element using the selector window (
Web Selector
) or provide the UI element variable (
Web Element
).
Password Key
Enter the configuration data variable text as set in Orchestrator. This key is used to retrieve the secure password for typing.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Specifies the maximum amount of time (in seconds) for the activity to be executed before throwing an exception. If not provided, the default timeout value will be used.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. This can be useful for handling synchronization issues.
How to use:
Drag and drop the "Type Secure Text" activity onto the workflow.
Configure the properties by providing the 
Element
 where the secure text should be typed and the 
Password Key
 to retrieve the secure password.
Optionally, configure the 
Timeout
 and 
Delay
 properties.
Execute the workflow to send the secure text to the specified UI element.
Note:
This activity should be used within the context of an "Open Browser" activity. Ensure that the "Type Secure Text" activity is placed within the workflow after the "Open Browser" activity, as indicated by the constraint 
BrowserValidation.HasParentType<TypeSecureText, OpenBrowser>
.
Example:

Consider an example where the "Type Secure Text" activity is used to input a secure password into a login form:
Type Secure Text:
  Element: [Select UI element for password input]
  Password Key: "ConfigKeyPassword"
  Timeout: 10 (seconds)
  Delay: 2 (seconds)
In this example, the activity types a secure password into the specified UI element with a timeout of 10 seconds and a delay of 2 seconds before starting the activity.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Console Logs/index.html

Get Console Logs
AutomatR.Web.GetConsoleLogs
The "Get Console Logs" activity in AutomatR's Web Activities category allows you to retrieve console logs from the Chrome browser for debugging purposes. This activity is helpful when you need to inspect and analyze the logs generated during a specific operation or process in your web automation workflow.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Console Logs" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs a JObject containing the console logs obtained from a certain operation or process. The JObject structure includes a "data" property containing the logs as a JArray. Use variables of type JObject to store the console logs for further analysis and debugging.
How to use:
Drag and drop the "Get Console Logs" activity onto the workflow.
Optionally, configure the delay based on your requirements.
Execute the workflow to fetch console logs from the Chrome browser.
Example:

Consider an example where the "Get Console Logs" activity is used to retrieve console logs during the execution of a web automation workflow:
Get Console Logs:
  Delay: 2
  Result: consoleLogs
In this example, the activity fetches the console logs with a 2 seconds delay and stores them in the variable "consoleLogs" of type JObject for further analysis.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Type Into/index.html

Type Into
AutomatR.Web.TypeInto
The "Type Into" activity in AutomatR is designed for UI automation workflows, allowing you to send keystrokes to a specified UI element, such as a text field on a webpage. This activity is particularly useful for automating data entry tasks on web applications.
Properties
​
Name
Description
Input
Empty Field
When enabled, it clears the content of the element before typing new content into it. Boolean variables indicating whether to empty the field before typing.
Text
Specifies the text to be typed into the UI element. Enter a string representing the text you want to input. String variables containing the text to be typed.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Type Into" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. This prevents the activity from running indefinitely. Integer variables containing the timeout duration. Ex.: If the maximum time is 5000 milliseconds or 5 sec, i.e., 5. Default: Common.Constants.Timeout
WaitForKeys
Specifies the wait time (in seconds) between individual keystrokes when sending input. Integer variables containing the wait duration. Ex.: If the wait time is 500 milliseconds or 0.5 sec, i.e., 0.5.
Web Selector
Select the browse button to indicate the element on the web with the help of the selector window. Use this property if the "Element" property is not specified.
Web Element
Enter a UI Element variable identified by the "Find Element" or other activity. Use this property if the "Element" property is not specified.
How to use:
Drag and drop the "Type Into" activity onto the workflow.
Configure the properties based on the desired behavior:
Specify whether to empty the field before typing (
Empty Field
).
Provide the text to be typed into the UI element (
Text
).
Optionally, set a delay before executing the activity (
Delay
).
Optionally, set a maximum timeout for the activity (
Timeout
).
Optionally, set the wait time between individual keystrokes (
WaitForKeys
).
Specify the UI element either by selecting it with the selector window (
Web Selector
) or by using a UI Element variable (
Web Element
).
Execute the workflow to send the specified keystrokes to the UI element.
Example:

Consider an example where the "Type Into" activity is used to enter the text "Hello, AutomatR!" into a text field on a webpage:
Type Into:
  Empty Field: True
  Text: "Hello, AutomatR!"
  Delay: 2 (seconds)
  Timeout: 10 (seconds)
  WaitForKeys: 0.5 (seconds)
In this example, the activity types the specified text into the UI element, empties the field before typing, introduces a 2-second delay, sets a timeout of 10 seconds, and adds a 0.5-second wait between individual keystrokes.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Hover/index.html

Hover
AutomatR.Web.Hover
The "Hover" activity in AutomatR's Web Activities category is designed to simulate hovering over a specified UI element on a web page. Hovering is a common action used in web automation to trigger certain behaviors, such as displaying additional information or revealing hidden elements.
Properties
​
Name
Description
Input
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Hover" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
Output
Result
Outputs a boolean value indicating whether the hover action was successful or encountered any errors. Variables of relevant types (e.g., Boolean variables) can be used to store the operation result.
How to use:
Drag and drop the "Hover" activity onto the workflow.
Configure the properties by choosing either the direct web element or providing a UI Element variable.
Optionally, configure the delay and timeout based on your requirements.
Execute the workflow to simulate the hover action over the specified web element on the web page.
Example:

Consider an example where the "Hover" activity is used to simulate hovering over a button on a web page:
Hover:
  Delay: 2
  Timeout: 10
  Element: Selector forButtonElement
  Result: isHoverSuccessful
In this example, the activity waits for 2 seconds, has a timeout of 10 seconds, and simulates the hover action over the web element identified by the selector "forButtonElement" on the web page.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Select Item/index.html

Select Item
AutomatR.Web.SelectItem
The "Select Item" activity in AutomatR is designed for UI automation workflows, specifically for selecting an item from a combo box or list box within a web application. This activity enables efficient interaction with dropdowns and lists, enhancing the capabilities of web automation.
NOTE:
 This activity must be added inside the Application/Browser activity.
NOTE:
 Using this activity on a combo box or list box that has not been interacted with before you run the workflow can cause the activity to throw an error. The best practice to avoid this issue is to add a Click activity configured to click the target drop-down menu before the Select Item activity is executed.
Properties
​
Name
Description
Input
Element
Select the web element by using the provided selector window. This indicates the UI element on the web page. Use either the "Element" or "WebElement" property.
WebElement
Enter the UI element variable identified by the "Find Element" or other activities. Use either the "Element" or "WebElement" property.
Item Name
Enter the string text for the item to be selected from the dropdown or list box. Provide either the "Item Name" or "Item Value" property; not both.
Item Value
Enter the string text for the item value, which can be captured from the CSS/DOM of the dropdown or list box. Provide either the "Item Name" or "Item Value" property; not both.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time, in seconds (e.g., 5), for the activity to be executed before throwing an exception. This is the maximum time the activity will wait for the selection to occur. If not provided, a default timeout will be used.
Compare
Enter a boolean value to determine if the item selection should be based on partial text comparison.
Regexp
Enter a regular expression to refine the selection based on specific patterns or criteria.
Delay
Enter the wait time in seconds before starting the activity. This can be useful for handling synchronization issues or waiting for specific conditions before selecting an item.
Output
Result
Returns True or False based on the success of the item selection. Use this output to verify if the item was successfully selected.
How to use:
Drag and drop the "Select Item" activity onto the workflow.
Configure the properties by selecting the web element or providing the UI element variable.
Specify either the "Item Name" or "Item Value" for the item you want to select from the dropdown or list box.
Optionally, configure the timeout, text comparison, regular expression, and delay.
Execute the workflow to interact with the specified dropdown or list box and select the desired item.
Example:

Consider an example where the "Select Item" activity is used to choose a country from a dropdown:
Select Item:
  Element: (Use the selector window to choose the dropdown element)
  Item Name: "United States"
  Timeout: 10 (seconds)
  Result: isItemSelected
In this example, the activity selects the item with the name "United States" from the specified dropdown element. The timeout is set to 10 seconds, and the result is stored in the Boolean variable "isItemSelected" for further workflow logic.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Find Children/index.html

Find Children
AutomatR.Web.FindChildren
The "Find Children" activity in AutomatR's Web Activities category is designed to retrieve a collection of UI elements based on specified filter criteria within a given scope. This activity is particularly useful for obtaining a list of child elements that match certain conditions, facilitating more complex automation workflows.
Properties
​
Name
Description
Input
Filter
String specifying the conditions of all UI objects in the collection. It serves as a filter criteria for finding child elements.
Web Selector
Select the web element (e.g., a button) to indicate the element on the web using the selector window.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5 seconds) for the activity to be executed before throwing an exception. Default timeout is used if not specified.
Delay
Enter the wait time in seconds (e.g., 5 seconds) before starting the activity. Useful for handling synchronization issues.
Output
Out Element
Returns a list of UI children found according to the applied filter criteria. Variables of type 
List<Selector>
 to store the result.
How to use:
Drag and drop the "Find Children" activity onto the workflow.
Configure the "Filter" property to specify the conditions for the UI objects you want to retrieve.
Use the "Web Selector" property to indicate the web element (e.g., button) to help define the scope for finding child elements.
Optionally, configure the "Timeout" and "Delay" properties based on your requirements.
Execute the workflow to retrieve the list of UI children based on the specified filter criteria.
Example:

Consider an example where the "Find Children" activity is used to retrieve a list of buttons within a specific web element:
Find Children:
  Filter: "Button"
  Web Selector: <your_selector_here>
  Timeout: 10
  Delay: 2
  Out Element: listOfButtons
In this example, the activity searches for all UI children within the specified web element that match the filter criteria "Button." The list of buttons is stored in the variable "listOfButtons" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Highlight/index.html

Highlight
AutomatR.Web.Highlight
The "Highlight" activity in AutomatR's Web Activities category visually highlights a specified UI element on a web page. This can be useful during the development and debugging phases to identify and verify the correct selection of UI elements within the automation workflow.
Properties
​
Name
Description
Input
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Highlight" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
How to use:
Drag and drop the "Highlight" activity onto the workflow.
Configure the properties by choosing either the direct web element or providing a UI Element variable.
Optionally, configure the delay and timeout based on your requirements.
Execute the workflow to visually highlight the specified web element on the web page.
Example:

Consider an example where the "Highlight" activity is used to visually identify a button on a web page:
Highlight:
  Delay: 2
  Timeout: 10
  Element: Selector forButtonElement
In this example, the activity waits for 2 seconds, has a timeout of 10 seconds, and visually highlights the web element identified by the selector "forButtonElement" on the web page.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Close Chrome Instances/index.html

Close Chrome Instances
AutomatR.Web.CloseChromeInstances
Close Chrome Instances activity stops a running Chrome instance.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Output
Result
Returns True or False based on the chrome instance close results. This field supports only boolean or 
Boolean
 variables.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Take Screenshot/index.html

Take Screenshot
AutomatR.Web.TakeScreenshot
The "Take Screenshot" activity in AutomatR is designed for UI automation workflows, allowing you to capture screenshots of specified UI elements. This activity is useful for visual inspection and documentation of automation processes.
NOTE:
 If the Take Screenshot is added inside the Application/Browser activity, only the targeted application is snapshotted. If added outside of an application card, since there is no target specified, the entire desktop is captured.
Properties
​
Name
Description
Input
ClipBoard
Enables the option to copy the captured screenshot to the clipboard, making it accessible for use in other activities (e.g., clipboard activities). Boolean variables to enable or disable this option.
File Path
Specifies the location and file name for saving the captured screenshot on the local drive. Enter a string containing the full path (e.g., D:\test\image.png).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Take Screenshot" activity. This can be useful for handling synchronization issues or waiting for the UI element to be in the desired state. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Screenshot
Outputs the captured screenshot as an image variable, allowing you to use it elsewhere in the workflow. Variables of the 
Image
 type to store the captured screenshot.
How to use:
Drag and drop the "Take Screenshot" activity onto the workflow.
Configure the properties based on the desired behavior:
Choose whether to copy the screenshot to the clipboard (
ClipBoard
).
Set the delay time if needed (
Delay
).
Provide the file path if you want to save the screenshot locally (
File Path
).
Execute the workflow to capture the screenshot.
Example:

Consider an example where the "Take Screenshot" activity is used to capture a screenshot of a specific UI element with a delay of 3 seconds and save it to the local drive:
Take Screenshot:
  Delay: 3 (seconds)
  File Path: "D:\Screenshots\MyScreenshot.png"
  Screenshot: capturedImage
In this example, the activity captures a screenshot after a delay of 3 seconds and saves it to the specified file path. The captured screenshot is stored in the 
capturedImage
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Set Web Attribute/index.html

Set Web Attribute
AutomatR.Web.SetWebAttribute
The "Set Web Attribute" activity in AutomatR is designed for UI automation workflows, allowing you to set the value of a specified HTML attribute for a selected web element. This activity is useful for dynamically updating attributes such as class names, data attributes, or any other HTML attribute of interest.
Properties
​
Name
Description
Input
Attribute
Enter the name of the HTML attribute to be updated for the selected web element. This can be any valid HTML attribute such as "class," "id," or custom data attributes. String variables containing the attribute name.
Value
Enter the string value to be set to the specified attribute. This is the value that will be assigned to the HTML attribute for the selected web element. String variables containing the attribute value.
Element
Select the web element using the provided selector window. This indicates the UI element on the web page. Use either the "Element" or "WebElement" property.
WebElement
Enter the UI element variable identified by the "Find Element" or other activities. Use either the "Element" or "WebElement" property.
Optional
Timeout
Enter the time, in seconds (e.g., 5), for the activity to be executed before throwing an exception. This is the maximum time the activity will wait for the UI element to be ready for the attribute update. If not provided, a default timeout will be used.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Highlight Time
If the workflow instance is set to highlight elements during execution, specify the time duration (in milliseconds) for which the element should be highlighted after setting the attribute.
How to use:
Drag and drop the "Set Web Attribute" activity onto the workflow.
Configure the properties by selecting the web element or providing the UI element variable, specifying the attribute name, and entering the value to be set.
Optionally, configure the timeout and highlight time.
Execute the workflow to update the HTML attribute for the targeted UI element on the web page.
Example:

Consider an example where the "Set Web Attribute" activity is used to update the class attribute of a button on a web page:
Set Web Attribute:
  Element: (Use the selector window to choose the button element)
  Attribute: "class"
  Value: "btn-primary"
  Timeout: 5 (seconds)
  Highlight Time: 500 (milliseconds)
In this example, the activity sets the "class" attribute of the specified button element to "btn-primary." The timeout is set to 5 seconds, and the element is highlighted for 500 milliseconds after updating the attribute.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Open Browser/index.html

Open Browser
AutomatR.Web.OpenBrowser
The "Open Browser" activity in AutomatR is designed to open a browser at a specified URL and allows the execution of multiple activities within the opened browser. This activity provides essential options for configuring the browser instance, such as specifying the URL, browser type, instance management, and additional settings.
Properties
​
Name
Description
Input
Instance
Specifies the behavior for handling browser instances. Choose from options such as 'New,' 'Attach to Existing,' or 'Attach or Create.'
URL
URL of the webpage to be opened in the new browser window. This is a required field when creating a new browser instance.
Title
Title of the browser window to attach to when the instance is set to 'Attach to Existing.'
Incognito
Opens a private/incognito session if set to true.
ClearCache
Clears the browser cache if set to true.
Maximise
Maximizes the browser window if set to true.
BrowserType
Type of the browser to be opened, such as Chrome, Firefox, Edge, or Internet Explorer.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Capture Console Logs
Enables the capture of console logs during browser activity.
LogCapture
Enables or disables log capturing.
Delay
Specifies the wait time (in seconds) before starting the activity.
Output
Browser
Outputs the browser object variable that can be used in other activities, such as 'Close Browser.'
How to use:
​
Drag and drop the "Open Browser" activity onto the workflow.
Configure the properties by specifying the instance type, URL, title (if attaching to an existing browser), and other optional settings.
Optionally, configure log capturing and browser type.
Execute the workflow to open the specified browser with the defined configurations.
Example:
​
Consider an example where the "Open Browser" activity is used to open a new Chrome browser instance and navigate to a specific URL:
Open Browser:
  Instance: New
  URL: "https://www.example.com"
  BrowserType: Chrome
  Incognito: false
  ClearCache: false
  Maximise: true
  Delay: 3
  Browser: browserObject
  Capture Console Logs: true
In this example, the activity opens a new Chrome browser window, navigates to "
https://www.example.com,"
 maximizes the window, and captures console logs. The resulting browser object is stored in the variable "browserObject" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Mouse Click/index.html

Mouse Click
AutomatR.Web.MouseClick
The "Mouse Click" activity in AutomatR's Web Activities category is designed to simulate a mouse click on a specified UI element based on either its position coordinates or a provided web selector. This activity is useful for interacting with web elements in a browser automation workflow.
Properties
​
Name
Description
Input
Coordinate X
Specifies the X-coordinate value based on the element's position on the web page. Provide an integer value representing the horizontal position.
Coordinate Y
Specifies the Y-coordinate value based on the element's position on the web page. Provide an integer value representing the vertical position.
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Mouse Click" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Delay Before Click
Specifies the wait time (in seconds) before the activity performs any operations, such as moving the mouse and clicking. This can be useful for adjusting to dynamic page elements. Integer variables containing the delay duration.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
Match Text
Enter the string of text description matching the element when the Element is selected. This can be useful for identifying the element when using a web selector.
Output
Result
Outputs a boolean value indicating whether the mouse click action was successful or encountered any errors. Variables of relevant types (e.g., Boolean variables) can be used to store the operation result.
How to use:
Drag and drop the "Mouse Click" activity onto the workflow.
Configure the properties based on your requirements:
Provide the web element directly using the "Element" property or use a UI Element variable with "WebElement."
Specify the position coordinates (X and Y) if you don't want to use a web selector.
Adjust optional properties such as delay and timeout.
Execute the workflow to simulate a mouse click on the specified web element or coordinates.
Example:

Consider an example where the "Mouse Click" activity is used to click a button on a web page:
Mouse Click:
  Delay: 2
  Coordinate X: 300
  Coordinate Y: 200
  Result: isClickSuccessful
In this example, the activity waits for 2 seconds, moves the mouse to the position (300, 200) on the web page, and performs a click. The result of the operation (success or failure) is stored in the Boolean variable "isClickSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Checkbox/index.html

Checkbox
AutomatR.Web.Checkbox
The "Checkbox" activity in AutomatR's Web Activities category is designed to interact with checkbox elements on a web page. It allows you to select, unselect, or toggle the state of a checkbox. This activity is useful for automating tasks that involve interacting with checkboxes, such as form submissions or preference settings.
Properties
​
Name
Description
Input
Action
Enables the selection of options for the checkbox. You can choose to select, uncheck, or toggle the checkbox element for the selected UI element.
Web Element
Enter the UI Element variable identified by the "Find Element" or other activity. This variable represents the checkbox element on the web page.
Web Selector
Select the browse button to indicate the element on the web with the help of the selector window. Use this when providing a selector for the checkbox element.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5) for the activity to be executed before throwing an exception. If not provided, a default timeout is used (specified in Constants).
Delay
Enter the wait time in seconds (e.g., 5) to start the activity. This can be useful for handling synchronization issues.
Output
Result
Outputs a boolean value indicating whether the checkbox action was successful. "True" indicates success, and "False" indicates failure. Use this output for further conditional branching or error handling in the workflow.
How to use:
Drag and drop the "Checkbox" activity onto the workflow.
Configure the properties by specifying the checkbox element using either the "Web Element" or "Web Selector" property.
Choose the desired action for the checkbox: select, uncheck, or toggle.
Optionally, configure the timeout and delay parameters.
Execute the workflow to perform the specified action on the checkbox element.
Example:

Consider an example where the "Checkbox" activity is used to select a checkbox for receiving newsletters on a web page:
Checkbox:
  Action: Select
  Web Element: checkboxElement
  Timeout: 10
  Delay: 2
  Result: isCheckboxSelected
In this example, the activity selects the specified checkbox element ("checkboxElement") on the web page. The result of the operation (success or failure) is stored in the boolean variable "isCheckboxSelected" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Text Exists/index.html

Text Exist
AutomatR.Web.TextExists
The "Text Exist" activity in AutomatR is designed for UI automation workflows, allowing you to check if a specified text is present within a given UI element. This activity is useful for verifying the presence of expected text on a webpage.
Properties
​
Name
Description
Input
Text
Specifies the text to be searched for on the webpage. Enter a string representing the text you want to verify. String variables containing the text to be searched.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Text Exist" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. This prevents the activity from running indefinitely. Integer variables containing the timeout duration. Ex.: If the maximum time is 5000 milliseconds or 5 sec, i.e., 5. Default: Common.Constants.Timeout
Output
Result
Outputs a Boolean value indicating whether the specified text exists within the UI element. Variables of relevant types (e.g., Boolean variables) to store the result.
How to use:
Drag and drop the "Text Exist" activity onto the workflow.
Configure the properties based on the desired behavior:
Provide the text to be searched for (
Text
).
Optionally, set a delay before executing the activity (
Delay
).
Optionally, set a maximum timeout for the activity (
Timeout
).
Execute the workflow to check if the specified text exists on the webpage.
Example:

Consider an example where the "Text Exist" activity is used to check if the text "Welcome to AutomatR" exists on a webpage with a timeout of 10 seconds:
Text Exist:
  Text: "Welcome to AutomatR"
  Delay: 2 (seconds)
  Timeout: 10 (seconds)
  Result: isTextFound
In this example, the activity checks if the specified text is found on the webpage, with a delay of 2 seconds and a maximum timeout of 10 seconds. The result of the check is stored in the Boolean variable "isTextFound" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Click/index.html

Click
AutomatR.Web.Click
The "Click" activity in AutomatR's Web Activities category is designed to simulate a click on a specified UI element within a web page. This activity is commonly used for interacting with buttons, links, or other clickable elements. The "Click" activity supports different technologies of the target application and provides options for simulating the click event, making it a faster alternative.
Properties
​
Name
Description
Input
Element
Select the browse button to indicate the element on the web with the help of the selector window. Use this when providing a selector for the clickable element.
Simulate Event
When enabled, it simulates the click based on the technology of the target application and is a faster option. Boolean variable or expression containing the simulation preference.
Web Element
Enter the UI Element variable identified by the "Find Element" or other activity. This variable represents the clickable element on the web page.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5) for the activity to be executed before throwing an exception. If not provided, a default timeout is used (specified in Constants).
Delay
Enter the wait time in seconds (e.g., 5) to start the activity. This can be useful for handling synchronization issues.
Output
Result
Outputs a boolean value indicating whether the click operation was successful. "True" indicates success, and "False" indicates failure. Use this output for further conditional branching or error handling in the workflow.
How to use:
Drag and drop the "Click" activity onto the workflow.
Configure the properties by specifying the clickable element using either the "Element" or "Web Element" property.
Optionally, enable the "Simulate Event" option for a faster click simulation.
Optionally, configure the timeout and delay parameters.
Execute the workflow to perform the specified click operation on the web page.
Example:

Consider an example where the "Click" activity is used to simulate clicking a "Submit" button on a web form:
Click:
  Element: submitButtonSelector
  Simulate Event: true
  Timeout: 10
  Delay: 2
  Result: isClickSuccessful
In this example, the activity simulates clicking the specified "Submit" button using the provided selector ("submitButtonSelector"). The result of the operation (success or failure) is stored in the boolean variable "isClickSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Extract Data/index.html

Extract Data
AutomatR.Web.ExtractData
The "Extract Data" activity in AutomatR's Web Activities category is designed to extract structured information, such as table data, from a web page. This activity is particularly useful for scraping data from web tables and making it available for further processing within your automation workflows.
Properties
​
Name
Description
Input
Web Element
Selector for the web element containing the structured information (e.g., a table). Utilize the selector editor for accurate selection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) before executing the "Extract Data" activity. Useful for handling synchronization issues.
Output
DataTable
Outputs the extracted structured information as a DataTable. The DataTable represents the tabular data structure. Variables of type DataTable to store the extracted data.
How to use:
Drag and drop the "Extract Data" activity onto the workflow.
Configure the "Web Element" property by selecting the web element (e.g., table) containing the structured information.
Optionally, configure the "Delay" to introduce a wait time before executing the "Extract Data" activity.
Execute the workflow to extract the specified structured information from the web page.
Example:

Consider an example where the "Extract Data" activity is used to extract table data from a web page:
Extract Data:
  Web Element: "<your_selector_here>"
  Delay: 2
  DataTable: extractedTable
In this example, the activity extracts table data from the specified web element, and the extracted data is stored in the DataTable variable "extractedTable" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Navigate Url/index.html

Navigate URL
AutomatR.Web.NavigateURL
The "Navigate URL" activity in AutomatR's Web Activities category is designed to navigate the browser to a specified URL. This activity is particularly useful for opening a specific webpage as part of a browser automation workflow.
Properties
​
Name
Description
Input
URL
Specifies the URL of the webpage to which the browser should navigate. Provide a string variable containing the desired URL.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Navigate URL" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the navigation to the specified URL was successful or encountered any errors. Variables of relevant types (e.g., Boolean variables) can be used to store the operation result.
How to use:
Drag and drop the "Navigate URL" activity onto the workflow.
Configure the properties by specifying the URL of the webpage to be opened in the browser.
Optionally, configure the delay and customize the display name.
Execute the workflow to navigate the browser to the specified URL.
Example:

Consider an example where the "Navigate URL" activity is used to open a specific website:
Navigate URL:
  Display Name: "Open Website"
  URL: "https://www.example.com"
  Result: isNavigationSuccessful
In this example, the activity opens the website "
https://www.example.com"
. The result of the operation (success or failure) is stored in the Boolean variable "isNavigationSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Stop Console Logs/index.html

Stop Console Logs
AutomatR.Web.StopConsoleLogs
The "Stop Console Logs" activity in AutomatR is designed for UI automation workflows, specifically targeting the Chrome browser. This activity allows you to stop capturing console logs in the Chrome browser, enhancing the efficiency of automation workflows that involve web applications.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Stop Console Logs" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Stop Console Logs" activity onto the workflow.
Optionally, configure the delay before executing the activity (
Delay
).
Execute the workflow to stop capturing console logs in the Chrome browser.
Note:

This activity is designed to work within the context of an "Open Browser" activity. Ensure that the "Stop Console Logs" activity is placed within the workflow after the "Open Browser" activity, as indicated by the constraint 
BrowserValidation.HasParentType<StopConsoleLogs, OpenBrowser>
.
Example:

Consider an example where the "Stop Console Logs" activity is used to stop capturing console logs after performing various actions on a web application:
Stop Console Logs:
  Delay: 2 (seconds)
In this example, the activity stops capturing console logs in the Chrome browser with a 2-second delay before execution.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Element Exist/index.html

Element Exists
AutomatR.Web.ElementExists
The "Element Exists" activity in AutomatR's Web Activities category allows you to verify if a UI element exists, even if it is not visible. This is a crucial step in web automation workflows to ensure that the desired element is present on the webpage.
Properties
​
Name
Description
Input
WebElement
Enter a UI Element variable identified by the "Find Element" or other activity. This is an alternative to providing the element directly using the "Web Selector."
Web Selector
Select the browse button to indicate the element on the web with the help of the selector window. Use this if you haven't provided a WebElement.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Timeout
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to wait for the activity to start. Default is set to a common timeout value if not provided.
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) before executing the "Element Exists" activity. Useful for handling synchronization issues.
Output
Result
Outputs True or False based on whether the specified UI element exists or not. Variables of Boolean type to store the operation result.
How to use:
Drag and drop the "Element Exists" activity onto the workflow.
Configure either the "WebElement" (using a UI Element variable) or the "Web Selector" to identify the target element on the web.
Optionally, configure the "Timeout" to specify the maximum time to wait for the activity to start (default is set to a common timeout value).
Optionally, configure the "Delay" to introduce a wait time before executing the "Element Exists" activity.
Execute the workflow to verify if the specified UI element exists on the webpage.
Example:

Consider an example where the "Element Exists" activity is used to check whether a button with a specific selector exists on a webpage:
Element Exists:
  Web Selector: (Selector indicating the button)
  Timeout: 10
  Delay: 2
  Result: doesElementExist
In this example, the activity checks if the UI element specified by the web selector exists on the webpage within a timeout of 10 seconds. The result (True or False) is stored in the boolean variable "doesElementExist" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Attribute/index.html

Get Attribute
AutomatR.Web.GetAttribute
The "Get Attribute" activity in AutomatR's Web Activities category retrieves the value of a specified attribute of a UI element on a web page. This activity is useful when you need to capture information such as the text, href, or other attributes of a particular web element during automation.
Properties
​
Name
Description
Input
Attribute
Enter the name of the attribute for which you want to retrieve the value. String variables containing the attribute name.
Web Selector
Select the web element to indicate the element on the web using the selector window. Only one of "Web Selector" or "Web Element" should be provided.
Web Element
Enter UI Element variable identified by Find Element or another activity. Only one of "Web Selector" or "Web Element" should be provided.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5 seconds) for the activity to be executed before throwing an exception. Default timeout is used if not specified.
Delay
Enter the wait time in seconds (e.g., 5 seconds) before starting the activity. Useful for handling synchronization issues.
Output
Result
Returns the value of the specified attribute as a string. Variable of type string to store the attribute value.
How to use:
Drag and drop the "Get Attribute" activity onto the workflow.
Choose either the "Web Selector" or "Web Element" property to indicate the web element for which you want to retrieve the attribute value.
Specify the name of the attribute you want to retrieve using the "Attribute" property.
Optionally, configure the "Timeout" and "Delay" properties based on your requirements.
Execute the workflow to retrieve the value of the specified attribute.
Example:

Consider an example where the "Get Attribute" activity is used to retrieve the "href" attribute value of a link on a web page:
Get Attribute:
  Web Selector: <your_selector_here>
  Attribute: "href"
  Timeout: 10
  Delay: 2
  Result: linkHref
In this example, the activity fetches the "href" attribute value of the specified web element, and the result is stored in the variable "linkHref" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Close Browser Instances/index.html

Close Browser Instances
AutomatR.Web.CloseBrowserInstances
The "Close Browser Instances" activity in AutomatR's Web Activities category is used to gracefully close browser instances based on the specified browser type. This activity is particularly useful for clean-up operations at the end of a workflow, ensuring that browser instances are closed efficiently.
Properties
​
Name
Description
Input
Browser Type
Select the type of browser instance to close. Options include Chrome, Firefox, Edge, and Internet Explorer.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Activate Browser" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the browser instance(s) were closed successfully. "True" indicates success, and "False" indicates failure.
How to use:
Drag and drop the "Close Browser Instances" activity onto the workflow.
Configure the properties by selecting the desired browser type.
Execute the workflow to gracefully close the specified browser instance(s).
Example:

Consider an example where the "Close Browser Instances" activity is used to close all open Chrome browser instances:
Close Browser Instances:
  Browser Type: Chrome
  Result: isClosedSuccessfully
In this example, the activity closes all open Chrome browser instances, and the result of the operation (success or failure) is stored in the boolean variable "isClosedSuccessfully" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Selector Position/index.html

Get Selector Position
AutomatR.Web.GetSelectorPosition
The "Get Selector Position" activity in AutomatR's Web Activities category retrieves the dimensions and position for a specified UI element. This information is valuable when you need to understand the location and size of a web element for precise automation.
Properties
​
Name
Description
Input
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Selector Position" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
Output
Position
Outputs a string containing the dimensions and position of the selected web element. The format of the string depends on the response received from the execution. Use a string variable to store the result for further processing within the workflow.
How to use:
Drag and drop the "Get Selector Position" activity onto the workflow.
Configure the properties by choosing either the direct web element or providing a UI Element variable.
Optionally, configure the delay and timeout based on your requirements.
Create a string variable to store the position result (e.g., "elementPosition").
Execute the workflow to obtain the dimensions and position of the specified web element.
Example:

Consider an example where the "Get Selector Position" activity is used to retrieve the position of a button on a web page:
Get Selector Position:
  Delay: 2
  Timeout: 10
  Element: Selector forButtonElement
  Position: elementPosition
In this example, the activity waits for 2 seconds, has a timeout of 10 seconds, and captures the dimensions and position of the web element identified by the selector "forButtonElement." The result is stored in the "elementPosition" string variable for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Extract Structured Data/index.html

Extract Structured Data
AutomatR.Web.ExtractStructuredData
The "Extract Structured Data" activity in AutomatR's Web Activities category is designed to extract structured information from a web page. This activity is particularly useful for scraping data from structured elements, such as tables, and making it available for further processing within your automation workflows.
Properties
​
Name
Description
Input
Web Element
Selector for the web element containing the structured information (e.g., a table). Utilize the selector editor for accurate selection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) before executing the "Extract Structured Data" activity. Useful for handling synchronization issues.
Output
DataTable
Outputs the extracted structured information as a DataTable. The DataTable represents the structured data. Variables of type DataTable to store the extracted data.
How to use:
Drag and drop the "Extract Structured Data" activity onto the workflow.
Configure the "Web Element" property by selecting the web element (e.g., table) containing the structured information.
Optionally, configure the "Delay" to introduce a wait time before executing the "Extract Structured Data" activity.
Execute the workflow to extract the specified structured information from the web page.
Example:

Consider an example where the "Extract Structured Data" activity is used to extract table data from a web page:
Extract Structured Data:
  Web Element: "<your_selector_here>"
  Delay: 2
  DataTable: extractedTable
In this example, the activity extracts structured data from the specified web element, and the extracted data is stored in the DataTable variable "extractedTable" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Select Multiple Items/index.html

Select Multiple Items
AutomatR.Web.SelectMultipleItems
The "Select Multiple Items" activity in AutomatR is designed for UI automation workflows, specifically for selecting multiple items from a combo box or list box within a web application. This activity streamlines the process of interacting with dropdowns and lists, allowing the selection of multiple items simultaneously.
Properties
​
Name
Description
Input
Element
Select the web element by using the provided selector window. This indicates the UI element on the web page. Use either the "Element" or "WebElement" property.
WebElement
Enter the UI element variable identified by the "Find Element" or other activities. Use either the "Element" or "WebElement" property.
Item Names
Enter a list of strings representing the names of the items to be selected from the dropdown or list box. Provide either the "Item Names" or "Item Values" property; not both.
Item Values
Enter a list of strings representing the item values, which can be captured from the CSS/DOM of the dropdown or list box. Provide either the "Item Names" or "Item Values" property; not both.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time, in seconds (e.g., 5), for the activity to be executed before throwing an exception. This is the maximum time the activity will wait for the selection to occur. If not provided, a default timeout will be used.
Delay
Enter the wait time in seconds before starting the activity. This can be useful for handling synchronization issues or waiting for specific conditions before selecting multiple items.
Output
Result
Returns True or False based on the success of the multiple item selection. Use this output to verify if the items were successfully selected.
How to use:
Drag and drop the "Select Multiple Items" activity onto the workflow.
Configure the properties by selecting the web element or providing the UI element variable.
Specify either the "Item Names" or "Item Values" for the items you want to select from the dropdown or list box.
Optionally, configure the timeout and delay.
Execute the workflow to interact with the specified dropdown or list box and select the desired multiple items.
Example:

Consider an example where the "Select Multiple Items" activity is used to choose multiple items from a list:
Select Multiple Items:
  Element: (Use the selector window to choose the dropdown element)
  Item Names: ["Item1", "Item2", "Item3"]
  Timeout: 10 (seconds)
  Result: areItemsSelected
In this example, the activity selects the items with names "Item1", "Item2", and "Item3" from the specified dropdown element. The timeout is set to 10 seconds, and the result is stored in the Boolean variable "areItemsSelected" for further workflow logic.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/On Element Appear/index.html

On Element Appear
AutomatR.Web.OnElementAppear
The "On Element Appear" activity in AutomatR's Web Activities category is a container that waits for a UI element to appear, enabling you to perform multiple actions within it. This activity is particularly useful in web automation scenarios where you need to synchronize with the appearance of a specific element before proceeding with further actions.
Properties
​
Name
Description
Input
WebElement
Specifies the UI element variable identified by the "Find Element" or other activity. This variable represents the target element that the activity waits for. Use a Selector variable.
Web Selector
Opens the selector window, allowing you to indicate the web element using a visual interface.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "On Element Appear" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the specified element to appear. If the element does not appear within this time frame, the activity throws an exception. Integer variables containing the timeout duration. Default value is defined by 
Common.Constants.Timeout
.
How to use:
Drag and drop the "On Element Appear" activity onto the workflow.
Configure the properties by specifying the target web element using either the 
WebElement
 or the 
Web Selector
.
Optionally, configure the delay, timeout, and customize the display name.
Add additional activities within the "On Element Appear" container to be executed when the specified element appears.
Execute the workflow to perform actions within the specified element after it appears.
Example:

Consider an example where the "On Element Appear" activity is used to wait for a "Submit" button to appear on a webpage:
On Element Appear:
  Display Name: "Wait for Submit Button"
  WebElement: submitButtonSelector
  Timeout: 20 (seconds)
  - Click Button:
      Display Name: "Click Submit Button"
      Button Selector: submitButtonSelector
In this example, the workflow waits for the "Submit" button to appear, and once it appears, the contained "Click Button" activity is executed to click the button.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Close Tab/index.html

Close Tab
AutomatR.Web.CloseTab
The "Close Tab" activity in AutomatR's Web Activities category is designed to close a browser page or active tab. This activity proves useful when you need to perform clean-up tasks or navigate between different pages within a web automation workflow.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Close Tab" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the "Close Tab" operation, indicating whether the tab was closed successfully or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Close Tab" activity onto the workflow.
Optionally, configure the delay to wait before executing the "Close Tab" activity.
Execute the workflow to close the active tab within the specified browser instance.
Example:

Consider an example where the "Close Tab" activity is used to close the currently active tab within an open Chrome browser:
Close Tab:
  Delay: 0
  Result: isTabClosedSuccessfully
In this example, the activity closes the active tab without any delay, and the result of the operation (success or failure) is stored in the boolean variable "isTabClosedSuccessfully" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Save Image/index.html

Save Image
AutomatR.Web.SaveImage
The "Save Image" activity in AutomatR facilitates saving an image to a specified location on your local drive. This activity is useful for capturing and persisting images obtained during UI automation workflows.
Properties
​
Name
Description
Input
File Path
Specifies the complete file path, including the location and file name, where the image should be saved on the local drive. Ensure to provide a valid string containing the desired folder location and file name (e.g., "D:
\
test
\
image.png").
Image
Specifies the image variable containing the image data to be saved. Ensure to provide a valid image variable obtained from other activities.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Save Image" activity. This can be useful for handling synchronization issues or waiting for specific conditions before saving the image. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
The "Save Image" activity does not provide direct output. Check the specified file path for the saved image on your local drive or use additional activities as needed.
How to use:
Drag and drop the "Save Image" activity onto the workflow.
Configure the properties by specifying the file path and providing the image variable obtained from other activities.
Optionally, configure the delay to wait for a specific duration before saving the image.
Execute the workflow to save the specified image to the local drive.
Example:

Consider an example where the "Save Image" activity is used to save a captured screenshot to a specific folder:
Save Image:
  File Path: "D:\\Screenshots\\captured_image.png"
  Image: capturedScreenshot
  Delay: 2 (seconds)
In this example, the activity saves the image variable "capturedScreenshot" to the specified file path, "D:
\
Screenshots
\
captured_image.png". The delay of 2 seconds allows time for any required conditions to be met before saving the image.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Activate Browser/index.html

Activate Browser
AutomatR.Web.Activities.ActivateBrowser
The "Activate Browser" activity in AutomatR's Web Activities category is designed to activate an already opened browser, facilitating the execution of multiple actions within it. This activity is useful when working with web automation scenarios, where interacting with a specific browser instance is required.
Properties
​
Name
Description
Input
Browser
Enter the browser object, which could be the output of other activities (e.g., Open Browser).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Activate Browser" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Activate Browser" activity onto the workflow.
Configure the properties by specifying the browser object obtained from other activities (e.g., Open Browser).
Optionally, configure the delay.
Execute the workflow to activate the specified browser, bringing it to the foreground for further actions.
Example:

Consider an example where the "Activate Browser" activity is used to activate a browser object obtained from the "Open Browser" activity:
Activate Browser:
  Browser: browserObjectFromOpenBrowser
  Delay: 2
In this example, the activity activates the browser specified by the "browserObjectFromOpenBrowser" variable, bringing it to the foreground for subsequent web automation actions.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Radio Button/index.html

Radio Button
AutomatR.Web.RadioButton
The "Radio Button" activity in AutomatR is designed for UI automation, allowing users to select or clear radio buttons on a web page. This activity enhances the capability to interact with dynamic web elements and perform actions based on user-defined conditions.
Properties
​
Name
Description
Input
Action
Enables the selection or clearing of radio buttons. Choose from the following options:
- 
Check
: Selects the radio button.
- 
Uncheck
: Clears the selection of the radio button.
WebElement
Enter a UI Element variable identified by the "Find Element" or another activity. This represents the target radio button on the web page.
Web Selector
Select the browse button to indicate the element on the web with the help of the selector window.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5) for the activity to be executed before throwing an exception. This is the maximum time the activity should wait for the specified action to complete.
Delay
Enter the wait time in seconds to start the activity. This can be useful for handling synchronization issues.
How to use:
Drag and drop the "Radio Button" activity onto the workflow.
Configure the properties by selecting the desired action (Check or Uncheck) and providing the target radio button element.
Optionally, configure the timeout and delay as needed.
Execute the workflow to interact with the specified radio button on the web page.
Example:

Consider an example where the "Radio Button" activity is used to select a radio button on a web page:
Radio Button:
  Action: Check
  WebElement: radioElement
  Timeout: 10 (seconds)
  Delay: 2 (seconds)
In this example, the activity selects the specified radio button ("radioElement") on the web page. The action has a timeout of 10 seconds and a delay of 2 seconds for proper synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Text/index.html

Get Text
AutomatR.Web.GetText
The "Get Text" activity in AutomatR's Web Activities category extracts a text value from a specified UI element. This activity is useful when you need to capture text content from a web page for further processing within your automation workflow.
Properties
​
Name
Description
Input
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Text" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
Output
Result
Outputs the value of text extracted from the web element. Store the result in a string variable for further operations within the workflow.
How to use:
Drag and drop the "Get Text" activity onto the workflow.
Configure the properties by choosing either the direct web element or providing a UI Element variable.
Optionally, configure the delay and timeout based on your requirements.
Create a string variable to store the text result (e.g., "extractedText").
Execute the workflow to extract the text from the specified web element.
Example:

Consider an example where the "Get Text" activity is used to extract the text content of a label on a web page:
Get Text:
  Delay: 2
  Timeout: 10
  Element: Selector forLabelElement
  Result: extractedText
In this example, the activity waits for 2 seconds, has a timeout of 10 seconds, and extracts the text content of the web element identified by the selector "forLabelElement." The result is stored in the "extractedText" string variable for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Refresh Tab/index.html

Refresh Tab
AutomatR.Web.RefreshTab
The "Refresh Tab" activity in AutomatR is designed for UI automation, allowing users to reload the web page currently displayed in the specified browser. This activity ensures that the latest content is fetched from the web server, enabling accurate and up-to-date interactions within the workflow.
Properties
​
Name
Description
Optional
Delay
Enter the wait time in seconds to start the activity. This can be useful for handling synchronization issues or waiting for certain elements to load before refreshing the tab.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
The "Refresh Tab" activity does not provide direct output. Check the success or failure of the refresh operation based on the context of your workflow or use additional activities as needed.
How to use:
Drag and drop the "Refresh Tab" activity onto the workflow.
Optionally, configure the delay to wait for a specific duration before refreshing the tab.
Execute the workflow to reload the web page in the specified browser.
Example:

Consider an example where the "Refresh Tab" activity is used to reload the web page in an open browser:
Refresh Tab:
  Display Name: "Reload Web Page"
  Delay: 2 (seconds)
In this example, the activity reloads the currently displayed web page in the open browser. The delay of 2 seconds allows time for any required elements to load before the page is refreshed.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Set Text/index.html

Set Text
AutomatR.Web.SetText
The "Set Text" activity in AutomatR is designed for UI automation workflows, allowing you to write a string to the Text attribute of a specified UI element on a web page. This activity is useful for entering text into input fields or other elements that accept textual input.
Properties
​
Name
Description
Input
Element
Select the web element using the provided selector window. This indicates the UI element on the web page. Use either the "Element" or "WebElement" property.
WebElement
Enter the UI element variable identified by the "Find Element" or other activities. Use either the "Element" or "WebElement" property.
Text
Enter the string text to be written to the specified UI element. This is the text that will be entered into the targeted element on the web page.
Optional
Timeout
Enter the time, in seconds (e.g., 5), for the activity to be executed before throwing an exception. This is the maximum time the activity will wait for the UI element to be ready for text input. If not provided, a default timeout will be used.
Delay
Enter the wait time in seconds before starting the activity. This can be useful for handling synchronization issues or waiting for specific conditions before setting text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Highlight Time
If the workflow instance is set to highlight elements during execution, specify the time duration (in milliseconds) for which the element should be highlighted after setting the text.
How to use:
Drag and drop the "Set Text" activity onto the workflow.
Configure the properties by selecting the web element or providing the UI element variable and entering the text to be set.
Optionally, configure the timeout, delay, and highlight time.
Execute the workflow to write the specified text to the targeted UI element on the web page.
Example:

Consider an example where the "Set Text" activity is used to enter a search query into a search input field on a web page:
Set Text:
  Element: (Use the selector window to choose the search input field)
  Text: "AutomatR Workflow"
  Timeout: 5 (seconds)
  Delay: 2 (seconds)
  Highlight Time: 500 (milliseconds)
In this example, the activity sets the specified text "AutomatR Workflow" into the search input field. The timeout is set to 5 seconds, there's a delay of 2 seconds before starting the activity, and the element is highlighted for 500 milliseconds after setting the text.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/URLDownload File/index.html

URL Download File
AutomatR.Web.URLDownloadFile
The "URL Download File" activity in AutomatR is designed for downloading files from a specified URL and saving them to a local disk. This activity is useful for scenarios where files hosted on external servers, such as images or documents, need to be retrieved and stored locally.
Properties
​
Name
Description
Input
URL
Specifies the URL where the file is hosted (e.g., Google Drive). String variables containing the URL.
Save File Path
Specifies the local path where the downloaded file should be saved. It can include the location and file name (e.g., "D:\test\image.png"). String variables containing the save file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "URL Download File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the "URL Download File" operation, indicating whether the file was successfully downloaded or encountered any errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "URL Download File" activity onto the workflow.
Configure the properties by specifying the URL and the local path where the downloaded file should be saved.
Optionally, configure the delay.
Execute the workflow to download the file from the specified URL and save it locally.
Note:
The activity checks if the provided save file path is a directory. If it is, the activity generates a file name based on the URL. If it's a complete file path, the file is saved with the specified name.
Example:

Consider an example where the "URL Download File" activity is used to download an image from a URL and save it to a local folder:
URL Download File:
  URL: "https://example.com/images/sample.png"
  Save File Path: "D:\Downloads\sample.png"
  Result: isDownloadSuccessful
In this example, the activity downloads the image from the specified URL and saves it to the "D:\Downloads" folder with the name "sample.png". The result of the operation (success or failure) is stored in the Boolean variable "isDownloadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Tab Exists/index.html

Tab Exists
AutomatR.Web.TabExists
The "Tab Exists" activity in AutomatR is designed for UI automation workflows, allowing you to determine the existence of a specific tab within a browser instance. This activity is useful when you need to check whether a particular webpage is open in the browser.
Properties
​
Name
Description
Input
Browser Type
Specifies the type of browser to check for the existence of the tab. Select the desired browser from the available options.
Title
Specifies the title of the webpage to identify the tab. String variables containing the title of the webpage.
URL
Specifies the URL of the webpage to identify the tab. String variables containing the URL of the webpage.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Tab Exists" activity. This can be useful for handling synchronization issues or waiting for the browser to load. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Exists
Outputs a Boolean result indicating whether the specified tab exists in the selected browser. Variables of relevant types (e.g., Boolean variables) to store the existence result.
How to use:
Drag and drop the "Tab Exists" activity onto the workflow.
Select the desired browser type from the available options (e.g., Chrome, Firefox, Edge).
Specify either the title or the URL of the webpage you want to check for in the "Title" or "URL" property.
Optionally, configure the delay to wait before executing the "Tab Exists" activity.
Execute the workflow to check the existence of the specified tab within the chosen browser.
Example:

Consider an example where the "Tab Exists" activity is used to check if a tab with the title "My Dashboard" exists in the Chrome browser:
Tab Exists:
  Browser Type: Chrome
  Title: "My Dashboard"
  Delay: 5 (seconds)
  Exists: isTabExists
In this example, the activity checks whether a tab with the title "My Dashboard" exists in the Chrome browser. The result of the existence check is stored in the Boolean variable "isTabExists" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Drop Down Values/index.html

Get Dropdown Values
AutomatR.Web.GetDropdownValues
The "Get Dropdown Values" activity in AutomatR's Web Activities category provides a list of dropdown values for a specified web element. This activity is particularly useful when you need to retrieve and analyze the available options within a dropdown menu during web automation.
Properties
​
Name
Description
Input
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Dropdown Values" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
Output
Result
Outputs a list of strings representing the dropdown values. Use a list variable of type string to store the retrieved values for further processing within the workflow.
How to use:
Drag and drop the "Get Dropdown Values" activity onto the workflow.
Configure the properties by choosing either the direct web element or providing a UI Element variable.
Optionally, configure the delay and timeout based on your requirements.
Create a list variable of type string to store the dropdown values (e.g., "dropdownValues").
Execute the workflow to obtain the dropdown values from the specified web element.
Example:

Consider an example where the "Get Dropdown Values" activity is used to retrieve the values from a dropdown menu on a web page:
Get Dropdown Values:
  Delay: 2
  Timeout: 10
  Element: Selector forDropdownElement
  Result: dropdownValues
In this example, the activity waits for 2 seconds (optional) and has a timeout of 10 seconds. It retrieves the dropdown values from the web element identified by the selector "forDropdownElement" and stores them in the "dropdownValues" list variable for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Wait For Element Disappear/index.html

Wait For Element Disappears
AutomatR.Web.WaitForElementDisappears
The "Wait For Element Disappears" activity in AutomatR is designed to pause the workflow execution until a specified UI element disappears from the screen. This is particularly useful when waiting for dynamic elements to load or complete actions on a web page.
Properties
​
Name
Description
Input
Element
Indicates the UI element on the web page. Use the "Select" button to choose the element using the selector window. Either this or the "Web Element" property should be provided.
Web Element
Specifies the UI element variable identified by the "Find Element" or other activities. This variable contains information about the UI element. Either this or the "Element" property should be provided.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "Wait For Element Disappears" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the maximum time (in seconds) to wait for the specified element to disappear. If the element does not disappear within this time, an exception is thrown. Integer variables containing the timeout duration. Ex.: If the timeout is set to 30 seconds, the value should be 30. If not provided, a default timeout is used.
Output
Result
Outputs the result of the "Wait For Element Disappears" operation, indicating whether the element disappeared within the specified timeout. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Wait For Element Disappears" activity onto the workflow.
Choose either the "Element" or "Web Element" property to specify the UI element to wait for.
Optionally, configure the delay and timeout properties.
Execute the workflow to pause until the specified UI element disappears or the timeout is reached.
Note:
The activity requires being placed within the context of an "Open Browser" activity.
Example:

Consider an example where the "Wait For Element Disappears" activity is used to wait for a loading spinner to disappear on a web page:
Wait For Element Disappears:
  Element: [Select UI element using the selector window]
  Timeout: 30
  Result: isElementDisappeared
In this example, the activity waits for the specified UI element to disappear within a maximum timeout of 30 seconds. The result of the operation (success or failure) is stored in the Boolean variable "isElementDisappeared" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Ancestor/index.html

Get Ancestor
AutomatR.Web.GetAncestor
The "Get Ancestor" activity in AutomatR's Web Activities category retrieves ancestors for a specified UI element on a web page. This is useful when you need information about the parent elements of a particular web element during the automation process.
Properties
​
Name
Description
Input
Levels Up
Enter an integer value specifying how many levels up you want to retrieve ancestor elements for the specified web element.
Web Selector
Select the web element to indicate the element on the web using the selector window. Only one of "Web Selector" or "Web Element" should be provided.
Web Element
Select the browse button to indicate the element on the web with the help of the selector window. Only one of "Web Selector" or "Web Element" should be provided.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time in seconds (e.g., 5 seconds) for the activity to be executed before throwing an exception. Default timeout is used if not specified.
Delay
Enter the wait time in seconds (e.g., 5 seconds) before starting the activity. Useful for handling synchronization issues.
Output
Result
Returns a list of strings representing the ancestral elements of the specified web element. Variable of type 
List<Selector>
.
How to use:
Drag and drop the "Get Ancestor" activity onto the workflow.
Choose either the "Web Selector" or "Web Element" property to indicate the web element for which you want to retrieve ancestors.
Configure the "Levels Up" property to specify how many levels up you want to fetch ancestor elements.
Optionally, configure the "Timeout" and "Delay" properties based on your requirements.
Execute the workflow to retrieve the ancestor elements of the specified web element.
Example:

Consider an example where the "Get Ancestor" activity is used to retrieve two levels up for a button on a web page:
Get Ancestor:
  Web Selector: <your_selector_here>
  Levels Up: 2
  Timeout: 10
  Delay: 2
  Result: ancestorElements
In this example, the activity fetches the ancestor elements of the specified web element up to two levels. The result is stored in the variable "ancestorElements" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Screen Coordinates/index.html

Get Screen Coordinates
AutomatR.Web.GetScreenCoordinates
The "Get Screen Coordinates" activity in AutomatR's Web Activities category allows users to determine the X and Y coordinates of a particular spot on the screen. This feature is useful when you need to capture the position of an element on a web page for further automation.
Properties
​
Name
Description
Input
Element
Allows you to select the web element using the selector window. Use this property if you want to indicate the web element directly within the activity.
WebElement
Specifies the UI Element variable identified by the "Find Element" or other activities. This allows you to use a previously identified web element in the workflow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Screen Coordinates" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Delay Before Click
Specifies the wait time (in seconds) before the activity performs any operations. This delay can be used to ensure that the element is ready for interaction. Integer variables containing the delay duration.
Scroll Element
If checked, the coordinates will be captured after moving the element to the center of the screen.
Timeout
Specifies the maximum time (in seconds) to wait for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. The default timeout is set in the Constants.Timeout constant.
Output
Result
Outputs a string containing the screen coordinates in the format: "{X=123, Y=456, Width=789, Height=1011}". Use a string variable to store the result for further processing within the workflow.
How to use:
Drag and drop the "Get Screen Coordinates" activity onto the workflow.
Configure the properties by choosing either the direct web element or providing a UI Element variable.
Optionally, configure the delay, delay before click, and timeout based on your requirements.
If needed, check the "Scroll Element" option to capture coordinates after moving the element to the center.
Create a string variable to store the screen coordinates result (e.g., "screenCoordinates").
Execute the workflow to obtain the screen coordinates from the specified web element.
Example:

Consider an example where the "Get Screen Coordinates" activity is used to retrieve the coordinates of a button on a web page:
Get Screen Coordinates:
  Delay: 2
  Delay Before Click: 1
  Timeout: 10
  Element: Selector forButtonElement
  Scroll Element: Checked
  Result: screenCoordinates
In this example, the activity waits for 2 seconds, delays for 1 second before performing any operations, and has a timeout of 10 seconds. It captures the screen coordinates of the web element identified by the selector "forButtonElement" after scrolling it to the center. The result is stored in the "screenCoordinates" string variable for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Set Focus/index.html

Set Focus
AutomatR.Web.SetFocus
The "Set Focus" activity in AutomatR is designed for UI automation workflows, specifically for setting keyboard focus to a specified UI element on a web page. This activity ensures that the targeted UI element is ready to receive user input, facilitating seamless automation of user interactions.
Properties
​
Name
Description
Input
Element
Select the web element using the provided selector window. This indicates the UI element on the web page. Use either the "Element" or "WebElement" property.
WebElement
Enter the UI element variable identified by the "Find Element" or other activities. Use either the "Element" or "WebElement" property.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time, in seconds (e.g., 5), for the activity to be executed before throwing an exception. This is the maximum time the activity will wait for the UI element to receive focus. If not provided, a default timeout will be used.
Delay
Enter the wait time in seconds before starting the activity. This can be useful for handling synchronization issues or waiting for specific conditions before setting focus.
How to use:
Drag and drop the "Set Focus" activity onto the workflow.
Configure the properties by selecting the web element or providing the UI element variable.
Optionally, configure the timeout and delay.
Execute the workflow to set the keyboard focus to the specified UI element on the web page.
Example:

Consider an example where the "Set Focus" activity is used to focus on a search input field on a web page:
Set Focus:
  Element: (Use the selector window to choose the search input field)
  Timeout: 5 (seconds)
  Delay: 2 (seconds)
In this example, the activity sets the keyboard focus on the specified search input field, allowing subsequent activities to interact with it. The timeout is set to 5 seconds, and there's a delay of 2 seconds before starting the activity.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Execute Script/index.html

Execute Script
AutomatR.Web.ExecuteScript
The "Execute Script" activity in AutomatR's Web Activities category allows you to execute JavaScript on a web page. This activity is crucial for injecting custom scripts into web pages, providing flexibility and extended capabilities in web automation workflows.
Properties
​
Name
Description
Input
Script
Browse the path of the JavaScript file to be executed on the web page. String variables containing the script path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) before executing the "Execute Script" activity. Useful for handling synchronization issues.
Output
Result
(Currently commented out in the code) Outputs the result of the "Execute Script" activity. The result can include data returned by the executed script. Variables of relevant types (e.g., object variables) to store the operation result.
How to use:
Drag and drop the "Execute Script" activity onto the workflow.
Configure the "Script" property by browsing the path of the JavaScript file to be executed on the web page.
Optionally, configure the "Delay" to introduce a wait time before executing the "Execute Script" activity.
Execute the workflow to inject and execute the specified JavaScript on the web page.
Example:

Consider an example where the "Execute Script" activity is used to inject a JavaScript file named "customScript.js" into a web page:
Execute Script:
  Script: "C:\Scripts\customScript.js"
  Delay: 2
In this example, the activity injects and executes the "customScript.js" file on the web page. The specified delay of 2 seconds provides time for the web page to load before executing the script.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Paste From Clipboard/index.html

Paste From Clipboard
AutomatR.DefaultActivities.SystemClipboard.PasteFromClipboard
The "Paste From Clipboard" activity in AutomatR is used to paste copied data from the clipboard to the current cursor position. This activity is beneficial for automating data entry and interactions with various applications.
Properties
​
Name
Description
Input
Method
Choose a specified method from the dropdown to perform operations. Options include:
- 
SendKey
: Uses the SendKeys method to simulate the Ctrl+V (paste) action.
- 
WindowApi
: Utilizes the Windows API to paste content. This method is suitable for scenarios where SendKeys may not be effective.
- 
RestrictedWebSite
: Performs a paste operation in a restricted website context, involving additional interactions.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Paste From Clipboard" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Specifies the timeout time (in seconds) for the activity. This is relevant, especially when using the "RestrictedWebSite" method. Integer variables containing the timeout duration.
The "Paste From Clipboard" activity does not provide direct output. However, it performs the paste operation based on the chosen method. Use other activities or variables as needed to capture results or handle errors.
How to use:
Drag and drop the "Paste From Clipboard" activity onto the workflow.
Configure the properties by selecting the desired method for the paste operation.
Optionally, configure the delay, method-specific settings, and timeout as needed.
Execute the workflow to paste data from the clipboard using the specified method.
Example:

Consider an example where the "Paste From Clipboard" activity is used to paste data into a text field in a web application:
Paste From Clipboard:
  Method: WindowApi
  Timeout: 10 (seconds)
  Delay: 2 (seconds)
In this example, the activity uses the WindowApi method to paste data from the clipboard to the current cursor position with a timeout of 10 seconds and a delay of 2 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Get Current URL/index.html

Get Current URL
AutomatR.Web.GetCurrentURL
The "Get Current URL" activity in AutomatR's Web Activities category retrieves the current URL from a web browser. This activity is useful when you need to capture and utilize the URL during a web automation workflow.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Current URL" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
URL
Outputs the current URL as a string. Use a string variable to store the retrieved URL for further processing within the workflow.
How to use:
Drag and drop the "Get Current URL" activity onto the workflow.
Optionally, configure the delay based on your requirements.
Create a string variable to store the current URL (e.g., "currentURL").
Execute the workflow to obtain the current URL from the web browser.
Example:

Consider an example where the "Get Current URL" activity is used to retrieve the URL during a web automation workflow:
Get Current URL:
  Delay: 2
  URL: currentURL
In this example, the activity waits for 2 seconds (optional) and then retrieves the current URL from the web browser, storing it in the "currentURL" string variable for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Element/Control/Start Console Logs/index.html

Start Console Logs
AutomatR.Web.StartConsoleLogs
The "Start Console Logs" activity in AutomatR is designed for UI automation workflows, capturing Chrome browser console logs. This activity is particularly useful when you need to monitor and analyze console logs for debugging or verification purposes.
Properties
​
Name
Description
Optional
Delay
Specifies the amount of time (in seconds) to wait before capturing the console logs. This can be useful for handling synchronization issues or waiting for the web page to load completely. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
How to use:
Drag and drop the "Start Console Logs" activity onto the workflow.
Optionally, configure the delay to wait before initiating the capture of console logs.
Execute the workflow to start capturing Chrome browser console logs.
Example:

Consider an example where the "Start Console Logs" activity is used to capture console logs for a web page:
Start Console Logs:
  Display Name: "Capture Console Logs"
  Delay: 5 (seconds)
In this example, the activity initiates the capture of Chrome browser console logs after waiting for 5 seconds. The captured logs can be further processed or analyzed as needed.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Snipping Region/index.html

Snipping Region
AutomatR.Windows.Activities.SnippingRegion
The "Snipping Region" activity in AutomatR for Windows Automation captures a specific region of the screen and saves it as an image file. This activity is particularly useful for extracting visual information from specific areas of the screen.
Properties
​
Name
Description
Input
Region Selection
The name or path of the image file representing the region to be captured.
File Path
Represents the file path where the captured image will be saved. It is of type string.
File Name
Represents the name of the file to be saved. It is of type string.
Region
Represents a System.Drawing.Rectangle object that defines the region to capture.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "Snipping Region" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Get File Path
Outputs the full file path of the captured image. It is of type string.
How to use:
Drag and drop the "Snipping Region" activity onto the workflow.
Configure the properties by providing the necessary inputs, such as the delay, region selection, file path, file name, and region.
Optionally, configure the delay.
Execute the workflow to capture the specified region of the screen and save it as an image file.
Example:

Consider an example where the "Snipping Region" activity is used to capture a region of the screen and save it as an image:
Snipping Region:
  Delay: 2
  Region Selection: "C:\Path\To\Image.png"
  File Path: "C:\Path\To\Save"
  File Name: "CapturedImage"
  Region: new System.Drawing.Rectangle(100, 100, 300, 200)
  Get File Path: CapturedFilePath
In this example, the activity captures a region defined by the System.Drawing.Rectangle (100, 100, 300, 200) after a 2-second delay and saves the image as "CapturedImage.png" in the specified file path. The full file path of the captured image is stored in the variable "CapturedFilePath" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Open Application/index.html

Open Application
AutomatR.Windows.Applications.OpenApplication
The "Open Application" activity in AutomatR is designed to execute multiple actions within a specified application. It allows you to open an application by providing the full file path to its executable, and optionally pass arguments to the application at startup. This activity is particularly useful for automating processes that involve interacting with specific applications.
Properties
​
Name
Description
Input
Application Path
The full file path where the executable file of the application is located. 
String
 variables containing the path to the application executable.
Arguments
The parameters to be passed to the application at startup. This property allows you to open a specific file with the specified application. 
String
 variables containing the arguments.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Open Application" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Open Application" activity onto the workflow.
Configure the properties by specifying the full file path to the application executable and, if needed, the arguments to be passed at startup.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to open the specified application.
Example:

Consider an example where the "Open Application" activity is used to open Notepad:
Open Application:
  Path: "C:\Windows\System32\notepad.exe"
  Arguments: "C:\Path\To\File.txt"
  Delay: 2
In this example, the activity opens Notepad and passes the argument "C:\Path\To\File.txt" to open a specific file. The delay of 2 seconds allows time for the application to start before proceeding with subsequent activities in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Image Exists/index.html

Image Exists
AutomatR.Windows.Activities.ImageExists
The "Image Exists" activity in AutomatR is part of the Windows activities package, providing the capability to verify whether an image is located within a specified UI element. This activity is useful for automating processes that require image recognition within the context of Windows applications.
Properties
​
Name
Description
Input
Region Selection
The name or path of the image file representing the region to be checked for existence. This image serves as a reference for the verification process. String variables containing the image file name or path.
Adjust The Resolution
Adjusts the resolution of the image based on the current screen scaling. This can be helpful when dealing with different display resolutions. Boolean variables to control resolution adjustment.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Image Exists" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: 5 for a 5-second delay.
Output
Result
Outputs a boolean value indicating whether the specified image was found within the designated UI element. True indicates the image exists, while False indicates otherwise. Variables of relevant types (e.g., Boolean variables) to store the result.
How to use:
Drag and drop the "Image Exists" activity onto the workflow.
Configure the properties by specifying the region selection (image file name or path) for verification.
Optionally, adjust the resolution based on the current screen scaling.
Optionally, set a delay to wait before executing the activity.
Execute the workflow to verify the existence of the specified image within the UI element.
Example:

Consider an example where the "Image Exists" activity is used to check whether a specific button image exists within a Windows application:
Image Exists:
  Region Selection: "ButtonImage.png"
  Adjust The Resolution: True
  Delay: 2
  Result: isImageFound
In this example, the activity checks for the existence of the "ButtonImage.png" within the designated UI element, adjusts the resolution based on screen scaling, waits for 2 seconds before execution, and stores the result in the Boolean variable "isImageFound" for further workflow handling.
Note:
It is crucial to provide the correct region selection, representing the image file used as a reference for verification.
Adjusting the resolution is optional and depends on the specific requirements of the automation process.
Consider setting an appropriate delay to handle synchronization issues or allow time for UI elements to load.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Type Into/index.html

Type Into
AutomatR.Windows.Activities.TypeInto
The "Type Into" activity in AutomatR for Windows Automation is designed to send keystrokes to a UI element, facilitating interaction with text-based controls within applications.
Properties
​
Name
Description
Input
Clear Text
When enabled, it clears the content of the element before writing new content to it.
Element
Select the browse button to indicate the element on the app with the help of the Window selector window.
Selector
Windows selector representing the UI element to which keystrokes will be sent.
Text
Enter the text to be written in the specified element.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "Type Into" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Enter the time in seconds (e.g., 5) for the activity to be executed before throwing an exception.
How to use:
Drag and drop the "Type Into" activity onto the workflow.
Configure the properties by providing the necessary inputs, such as the delay, element or selector, text, and clear text option.
Optionally, configure the delay and timeout.
Execute the workflow to send the specified keystrokes to the targeted UI element.
Example:

Consider an example where the "Type Into" activity is used to input a username into a login form:
Type Into:
  Delay: 2
  Selector: "YourAppUsernameTextBoxSelector"
  Clear Text: true
  Text: "example_username"
  Timeout: 10
In this example, the activity waits for 2 seconds, clears the content of the specified text box, and types the username "example_username" into the targeted UI element. The operation has a timeout of 10 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Hover/index.html

Hover
AutomatR.Windows.Activities.Hover
The "Hover" activity in AutomatR for Windows UI Automation simulates the action of moving the mouse pointer over a specified UI element on the application. This activity is often used for testing and interacting with UI elements that trigger events on hover.
Properties
​
Name
Description
Input
Windows Selector
A string defining the UI element to hover over. You can use the "Windows Selector" property or the "Windows Element" property to specify the UI element.
Windows Element
Select the browse button to indicate the element on the app with the help of the Window selector window. You can use this property instead of the "Windows Selector."
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time (in seconds) for the activity to be executed before throwing an exception. If not provided, the default timeout is used (e.g., 5 seconds).
Delay
Enter the wait time (in seconds) before starting the activity. This can be useful for handling synchronization issues. Default is 0 seconds.
How to use:
Drag and drop the "Hover" activity onto the workflow.
Configure the properties by either providing the Windows Selector or selecting the Windows Element with the help of the Window selector window.
Optionally, set the timeout to control the maximum time for the activity to be executed before throwing an exception.
Optionally, set the delay to wait before starting the hover action.
Execute the workflow to simulate the mouse pointer hovering over the specified UI element.
Example:

Consider an example where the "Hover" activity is used to simulate hovering over a button on a Windows application:
Hover:
  Display Name: "Hover Submit Button"
  Windows Selector: "Button[name='SubmitButton']"
  Timeout: 10
In this example, the activity simulates the mouse pointer hovering over the UI element identified by the Windows Selector "Button
[name='SubmitButton']
" with a timeout of 10 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Select Item/index.html

Select Item
AutomatR.Windows.Activities.SelectItem
The "Select Item" activity in AutomatR is designed for UI Automation within Windows applications. It enables the selection of an item from a combo box or list box, enhancing the capabilities of automation workflows.
Properties
​
Name
Description
Input
Element
Select the browse button to indicate the element on the app with the help of the Window selector window.
Item
Enter the string text for the item value of the dropdown or listbox.
Selector
Windows Selector - Editor for selecting UI elements within the Windows application.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "Select Item" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Enter the time in seconds (e.g., 5) for the activity to be executed before throwing an exception. If not provided, the default timeout value is used.
How to use:
Drag and drop the "Select Item" activity onto the workflow.
Configure the properties by providing either the Element or Selector, specifying the Item to be selected.
Optionally, configure the Delay and Timeout properties.
Execute the workflow to perform the item selection within the Windows application.
Example:

Consider an example where the "Select Item" activity is used to choose the item "Option 2" from a combo box:
Select Item:
  Element: [Selector indicating the combo box]
  Item: "Option 2"
  Delay: 2
  Timeout: 10
In this example, the activity selects "Option 2" from the specified combo box element, introducing a 2-second delay and a timeout of 10 seconds for the operation.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Close Window/index.html

Close Window
AutomatR.Windows.Activities.CloseWindow
The "Close Window" activity in AutomatR for Windows UI Automation enables you to close an existing application window. This activity is useful for automating window management tasks in Windows applications.
Properties
​
Name
Description
Input
Process Name
Enter the process name of the window app that needs to be closed. String variables containing the process name.
Process Title
Enter the process title of the window app that needs to be closed. String variables containing the process title.
Display Title
Enter the title of the window app that needs to be closed. String variables containing the window title.
Window
Enter the window variable for the app that has to be closed. 
InArgument<SelectorWindow>
 variables containing information about the window.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Close Window" activity onto the workflow.
Configure the properties by specifying either the Process Name, Process Title, Display Title, or the Window variable to identify the target application window.
Optionally, configure the delay setting.
Execute the workflow to close the specified window.
Example:

Consider an example where the "Close Window" activity is used to close a Notepad application window:
Close Window:
  Display Name: "Close Notepad Window"
  Process Name: "notepad"
In this example, the activity identifies the Notepad application by process name and closes its window.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Find Children/index.html

Find Children
AutomatR.Windows.Activities.FindChildren
The "Find Children" activity in AutomatR for Windows UI Automation retrieves a collection of child UI elements based on specified scope and filter criteria. This activity is useful for automating scenarios where interactions with multiple child elements are required.
Properties
​
Name
Description
Input
Windows Selector
Allows you to define the UI element using a Windows Selector. Use the browse button to indicate the element on the app. String variables containing the Windows Selector.
Windows Element
Allows you to provide the UI element directly using the Selector variable. 
InArgument<Selector>
 variables containing information about the UI element.
Name
Provides an input string for the name attribute as a filter criteria to find child elements for a selected element or control. String variables containing the filter criteria.
Control Type
Provides an input string for the control type attribute as a filter criteria to find child elements for a selected element or control. String variables containing the filter criteria.
Class
Provides an input string for the class attribute as a filter criteria to find child elements for a selected element or control. String variables containing the filter criteria.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Specifies the time (in seconds) for the activity to execute before throwing an exception. Integer variables containing the timeout duration.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Children
Outputs a list of selectors for all matching child elements based on the specified criteria. 
List<Selector>
 variables to store the retrieved child elements.
How to use:
Drag and drop the "Find Children" activity onto the workflow.
Configure the properties by either providing the Windows Selector or the Windows Element directly.
Optionally, specify filter criteria such as Name, Control Type, and Class to narrow down the search for child elements.
Optionally, configure the timeout and delay settings.
Execute the workflow to retrieve a list of child elements based on the specified criteria.
Example:

Consider an example where the "Find Children" activity is used to retrieve all button elements within a specific window:
Find Children:
  Display Name: "Find All Buttons"
  Windows Selector: "WindowSelector"
  Control Type: "Button"
  Children: listOfButtons
  Timeout: 10
In this example, the activity retrieves a list of buttons within the specified window based on the control type filter criteria. The list of buttons is stored in the 
List<Selector>
 variable "listOfButtons" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Highlight/index.html

Highlight
AutomatR.Windows.Activities.Highlight
The "Highlight" activity in AutomatR for Windows UI Automation visually highlights a specified UI element on the application. This activity is useful for debugging and visually identifying elements during the automation workflow.
Properties
​
Name
Description
Input
Windows Selector
A string defining the UI element to highlight. You can use the "Windows Selector" property or the "Windows Element" property to specify the UI element.
Windows Element
Select the browse button to indicate the element on the app with the help of the Window selector window. You can use this property instead of the "Windows Selector."
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Enter the time (in seconds) for the activity to be executed before throwing an exception. If not provided, the default timeout is used (e.g., 5 seconds).
Delay
Enter the wait time (in seconds) before starting the activity. This can be useful for handling synchronization issues. Default is 0 seconds.
How to use:
Drag and drop the "Highlight" activity onto the workflow.
Configure the properties by either providing the Windows Selector or selecting the Windows Element with the help of the Window selector window.
Optionally, set the timeout to control the maximum time for the activity to be executed before throwing an exception.
Optionally, set the delay to wait before starting the highlight activity.
Execute the workflow to visually highlight the specified UI element on the application.
Example:

Consider an example where the "Highlight" activity is used to visually highlight a button on a Windows application:
Highlight:
  Display Name: "Highlight Submit Button"
  Windows Selector: "Button[name='SubmitButton']"
  Timeout: 10
In this example, the activity visually highlights the UI element identified by the Windows Selector "Button
[name='SubmitButton']
" with a timeout of 10 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Attach Window/index.html

Attach Window
AutomatR.Windows.Activities.AttachWindow
The "Attach Window" activity in AutomatR for Windows UI Automation enables you to attach to an existing application window, allowing you to perform various actions on that window. This activity is particularly useful when interacting with specific applications during automation workflows.
Properties
​
Name
Description
Input
Selector
Indicates the application window to attach using the Window Selector. Use the browse button to select the window with the help of the Window Selector window. A string variable containing the window selector.
Window
Specifies the window variable for the application that needs to be attached for further activities. An InArgument of type SelectorWindow.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Delay (in seconds) between the time this activity is completed and the time the next activity begins any operations. Adding a delay between activities ensures that one activity has enough time to complete before the next activity begins. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the SelectorWindow for the attached application window. The SelectorWindow can be used in subsequent activities for interacting with the attached window. An OutArgument of type SelectorWindow.
How to use:
Drag and drop the "Attach Window" activity onto the workflow.
Configure the properties by selecting the application window using the Window Selector or providing a window variable.
Optionally, customize the display name.
Execute the workflow to attach to the specified application window.
Example:

Consider an example where the "Attach Window" activity is used to attach to the Notepad application window:
Attach Window:
  Display Name: "Attach to Notepad"
  Selector: "[Title='Untitled - Notepad']"
  Window: notepadWindow
  Result: attachedWindow
In this example, the activity attaches to the Notepad application window with the title "Untitled - Notepad." The SelectorWindow for the attached window is stored in the variable "attachedWindow" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Show Window/index.html

Show Window
AutomatR.Windows.Activities.ShowWindow
The "Show Window" activity in AutomatR for Windows Automation enables the display and focus of a designated window. This activity is useful for bringing attention to a specific application window during an automation workflow.
Properties
​
Name
Description
Input
Process Name
Enter the process name of the window app that needs to be shown.
Process Title
Enter the process title of the window app that needs to be shown.
Display Title
Enter the title of the window app that needs to be shown.
Window
Enter the window variable for the app that needs to be shown.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "Show Window" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Show Window" activity onto the workflow.
Configure the properties by providing the process name, process title, display title, or window variable based on the criteria to identify the target window.
Optionally, configure the Delay property.
Execute the workflow to display and bring focus to the designated window.
Example:

Consider an example where the "Show Window" activity is used to bring focus to a Notepad window:
Show Window:
  Process Name: "notepad"
  Delay: 2
In this example, the activity brings focus to the Notepad window with a 2-second delay before the operation.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Click/index.html

Click
AutomatR.Windows.Activities.Click
The "Click" activity in AutomatR for Windows UI Automation allows you to interact with a specified UI element by simulating a click. This activity is useful for automating UI interactions involving buttons, links, or other clickable elements in Windows applications.
Properties
​
Name
Description
Input
Click Type
Specifies the type of click action to perform on the UI element. Options include Single (default), Double, and Right-click.
Windows Selector
Specifies the selector that identifies the target UI element within the Windows application. It helps in uniquely identifying the UI element. String variables containing the selector.
Windows Element
Indicates the UI element on the app with the help of the window selector window. 
InArgument<Selector>
 variables containing the UI element information.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Timeout
Specifies the time limit in seconds for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. If not provided, the default timeout is used.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Click" activity onto the workflow.
Configure the properties by specifying either the Windows Selector or the Windows Element to identify the target clickable UI element.
Optionally, choose the type of click action (Single, Double, or Right-click).
Optionally, configure the timeout and delay settings.
Execute the workflow to simulate the specified click action on the UI element.
Example:

Consider an example where the "Click" activity is used to perform a single click on a button in a Windows application:
Click:
  Display Name: "Click OK Button"
  Windows Selector: "[Selector to identify the OK button]"
  Click Type: Single
  Timeout: 10
In this example, the activity uses the specified selector to identify the target button, performs a single click action, and sets a timeout of 10 seconds for the operation.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Open Window/index.html

Open Window
AutomatR.Windows.Activities.OpenWindow
The "Open Window" activity in AutomatR allows you to display and bring focus to a designated window. This activity is useful for interacting with specific applications or processes on your Windows system.
Properties
​
Name
Description
Input
File Path
Enter the string containing the location of the application executable available on the local drive, along with the executable name (e.g., C:\programfiles\System32\excel.exe), to open the designated window. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Open Window" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Open Window" activity onto the workflow.
Configure the properties by specifying the delay, file path, and optionally customize the display name.
Execute the workflow to open the designated window.
Example:

Consider an example where the "Open Window" activity is used to open the Notepad application:
Open Window:
  Display Name: "Open Notepad"
  File Path: "C:\Windows\System32\notepad.exe"
  Delay: 2
In this example, the activity opens the Notepad application after a delay of 2 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Image Click/index.html

Image Click
AutomatR.Windows.Activities.ImageClick
The "Image Click" activity in AutomatR is designed for capturing an image on the web UI to perform an action. This activity aids in automating scenarios where clicking on a specific region or image is required within a Windows application or web page.
Properties
​
Name
Description
Input
Region Selection
Specifies the name or path of the image file representing the region to be clicked. This image is used as a reference for identifying the target region. Provide a string value containing the image file name or path.
Adjust The Resolution
Adjusts the resolution of the image based on the current screen scaling. Enabling this option ensures accurate region identification across different screen scaling settings. Boolean variables control this option.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Windows Scaling
Stores the scaling factor of the current screen. This property is managed internally and not exposed for configuration in the workflow.
Rect Coordinates
Stores the coordinates of the captured image. This property is managed internally and not exposed for configuration in the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Image Click" activity. This delay can be useful for synchronization purposes. Provide integer variables containing the delay duration, for example, 5 seconds.
How to use:
Drag and drop the "Image Click" activity onto the workflow.
Configure the properties by specifying the region selection, adjusting the resolution (if needed), and setting the delay.
Execute the workflow to perform the image click action.
Example:

Consider an example where the "Image Click" activity is used to click on a button with a specific icon on a web page:
Image Click:
  Region Selection: "button_icon.png"
  Adjust The Resolution: True
  Delay: 2
In this example, the activity captures the specified region based on the provided image ("button_icon.png"), adjusts the resolution, waits for 2 seconds, and then simulates a mouse click on the identified region.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Element Exists/index.html

Element Exists
AutomatR.Windows.Activities.ElementExists
The "Element Exists" activity in AutomatR for Windows UI Automation enables you to verify if a UI element exists, even if it is not visible. This activity is useful for checking the presence of UI elements on a Windows application.
Properties
​
Name
Description
Input
Windows Selector
Allows you to define the UI element using a Windows Selector. Use the browse button to indicate the element on the app. String variables containing the Windows Selector.
Windows Element
Allows you to provide the UI element directly using the Selector variable. 
InArgument<Selector>
 variables containing information about the UI element.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Specifies the time (in seconds) for the activity to execute before throwing an exception. Integer variables containing the timeout duration.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Exists
Outputs True or False based on whether the UI element exists or not. Boolean variables to store the existence status.
How to use:
Drag and drop the "Element Exists" activity onto the workflow.
Configure the properties by either providing the Windows Selector or the Windows Element directly.
Optionally, configure the timeout and delay settings.
Execute the workflow to check the existence of the specified UI element.
Example:

Consider an example where the "Element Exists" activity is used to check if a button with a specific selector exists on a Windows application:
Element Exists:
  Display Name: "Check Button Existence"
  Windows Selector: "Button[@Name='SubmitButton']"
  Exists: isButtonPresent
  Timeout: 10
In this example, the activity checks whether the button with the name 'SubmitButton' exists within a timeout of 10 seconds. The result (True or False) is stored in the Boolean variable "isButtonPresent" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Extract Data/index.html

Extract Data
AutomatR.Windows.Activities.ExtractData
The "Extract Data" activity in AutomatR for Windows UI Automation is used to extract structured information, such as table data, from a Windows application. This activity is designed to retrieve tabular information and store it in a DataTable variable for further processing.
Properties
​
Name
Description
Input
Windows Selector
Allows you to define the UI element using a Windows Selector. Use the browse button to indicate the element on the app. String variables containing the Windows Selector.
Windows Element
Allows you to provide the UI element directly using the Selector variable. 
InArgument<Selector>
 variables containing information about the UI element.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Specifies the time (in seconds) for the activity to execute before throwing an exception. Integer variables containing the timeout duration.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the tabular information from the specified app and stores it under a DataTable variable. DataTable variables to store the extracted data.
How to use:
Drag and drop the "Extract Data" activity onto the workflow.
Configure the properties by either providing the Windows Selector or the Windows Element directly.
Optionally, configure the timeout and delay settings.
Execute the workflow to extract tabular information from the specified UI element.
Example:

Consider an example where the "Extract Data" activity is used to retrieve table data from a grid within a Windows application:
Extract Data:
  Display Name: "Extract Table Data"
  Windows Selector: "GridSelector"
  Result: extractedTable
  Timeout: 20
In this example, the activity extracts tabular information from the UI element with the specified grid selector. The extracted data is stored in the DataTable variable "extractedTable" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Focus/index.html

Focus
AutomatR.Windows.Activities.Focus
The "Focus" activity in AutomatR for Windows UI Automation sets the keyboard focus to a specified UI element. This activity is useful for ensuring that the desired UI element is active and ready for user interactions.
Properties
​
Name
Description
Input
Windows Selector
Allows you to define the UI element using a Windows Selector. Use the browse button to indicate the element on the app. String variables containing the Windows Selector.
Windows Element
Allows you to provide the UI element directly using the Selector variable. 
InArgument<Selector>
 variables containing information about the UI element.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Specifies the time (in seconds) for the activity to execute before throwing an exception. Integer variables containing the timeout duration.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Focus" activity onto the workflow.
Configure the properties by either providing the Windows Selector or the Windows Element directly.
Optionally, configure the timeout and delay settings.
Execute the workflow to set focus to the specified UI element.
Example:

Consider an example where the "Focus" activity is used to set focus to a text box within a specific window:
Focus:
  Display Name: "Set Focus to TextBox"
  Windows Selector: "WindowSelector"
  Timeout: 5
In this example, the activity sets focus to the text box within the specified window. The timeout is set to 5 seconds, and the activity waits for the specified delay before execution.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Region Click/index.html

Region Click
AutomatR.Windows.Activities.RegionClick
The "Region Click" activity in AutomatR provides functionality to click on a selected region within an image. This activity is particularly useful for automating interactions with graphical elements based on specified regions.
Properties
​
Name
Description
Input
Region Selection
Specifies the region on the screen where the click operation will be performed. This property allows you to select the region by providing coordinates (X, Y, Width, Height). Use the Region Click Editor to assist in selecting the appropriate region.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Region Click" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Region Click" activity onto the workflow.
Configure the properties by providing the region selection or using the Region Click Editor to choose the region interactively.
Optionally, configure the delay.
Execute the workflow to perform a click operation within the specified region.
Example:

Consider an example where the "Region Click" activity is used to click on a specific region within an image:
Region Click:
  Region Selection: "100, 200, 50, 50" (X, Y, Width, Height)
  Delay: 2
In this example, the activity clicks on the region with coordinates (X=100, Y=200) and a size of 50x50 pixels. The operation is performed after a delay of 2 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Restore Window/index.html

Restore Window
AutomatR.Windows.Activities.RestoreWindow
The "Restore Window" activity in AutomatR facilitates the restoration of a specific window to its original size and position. This activity is particularly useful for managing and interacting with windows within automation workflows.
Properties
​
Name
Description
Input
Process Name
Enter the process name of the window application that needs to be restored.
Process Title
Enter the process title of the window application that needs to be restored.
Display Title
Enter the title of the window application that needs to be restored.
Window
Enter the window variable for the application that needs to be restored.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Restore Window" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Restore Window" activity onto the workflow.
Configure the properties by providing the necessary inputs such as process name, process title, display title, or window variable.
Optionally, configure the delay.
Execute the workflow to restore the specified window to its original size and position.
Example:

Consider an example where the "Restore Window" activity is used to restore the window of an application named "MyApp" with a process title "MyAppTitle" and a display title "MyAppDisplayTitle":
Restore Window:
  Process Name: "MyApp"
  Process Title: "MyAppTitle"
  Display Title: "MyAppDisplayTitle"
  Delay: 2
In this example, the activity restores the window of the "MyApp" application to its original size and position after a delay of 2 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Get All Windows/index.html

Get All Windows
AutomatR.Windows.Activities.GetAllWindows
The "Get All Windows" activity in AutomatR for Windows UI Automation allows you to retrieve the names of all active windows. This activity is useful when you need to obtain information about the currently open applications or perform actions based on available windows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the list of SelectorWindow objects for the available open apps. SelectorWindow objects contain information such as window title, process name, and handle.
How to use:
Drag and drop the "Get All Windows" activity onto the workflow.
Optionally, configure the delay setting.
Execute the workflow to retrieve the list of all active windows.
Example:

Consider an example where the "Get All Windows" activity is used to obtain information about all currently open windows:
Get All Windows:
  Display Name: "Get All Open Windows"
  Delay: 2
  Result: windowsList
In this example, the activity waits for 2 seconds and then retrieves a list of SelectorWindow objects representing all active windows. The obtained list, stored in the "windowsList" variable, can be further utilized in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Radio Button/index.html

Radio Button
AutomatR.Windows.Activities.RadioButton
The "Radio Button" activity in AutomatR facilitates the selection or clearing of radio buttons within a Windows application. This activity is especially useful when automating interactions with graphical user interfaces (GUIs) that contain radio button controls.
Properties
​
Name
Description
Input
Windows Selector
Specifies the selector for identifying the radio button within the Windows application. You can either directly provide a selector or use the "Element" property to select the element using the Windows Selector window.
Windows Element
Allows you to choose the target radio button by indicating the element on the application. Use the browse button to open the Windows Selector window for assistance.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Timeout
Specifies the time limit (in seconds) for the activity to be executed before throwing an exception. If not provided, the default timeout is used.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. This delay can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Radio Button" activity onto the workflow.
Configure the properties by providing either the Windows Selector or the Windows Element (using the Windows Selector window).
Optionally, configure the timeout and delay, and customize the display name.
Execute the workflow to select or clear the specified radio button within the Windows application.
Example:

Consider an example where the "Radio Button" activity is used to select a specific radio button in a Windows application:
Radio Button:
  Display Name: "Select Gender"
  Windows Selector: "{...}" (Selector for the gender radio button)
  Timeout: 10
  Delay: 2
In this example, the activity selects the gender radio button within the Windows application after a delay of 2 seconds, and it has a timeout of 10 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Get Text/index.html

Get Text
AutomatR.Windows.Activities.GetText
The "Get Text" activity in AutomatR for Windows UI Automation extracts a text value from a specified UI element, allowing seamless integration of text extraction in automation workflows.
Properties
​
Name
Description
Input
Windows Selector
Specifies the UI element from which to extract text. Use the "Selector" property to indicate the target UI element. The selector is generated using the Windows Selector Editor.
Windows Element
Allows the selection of a UI element using a custom selector, providing more flexibility in choosing the target element. If not provided, the selector from the "Windows Selector" property is used.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Timeout
Sets the maximum time (in seconds) the activity should wait for the text extraction to complete before throwing an exception. Default is the common timeout defined in the Constants (e.g., 5 seconds).
Delay
Specifies the wait time (in seconds) before starting the activity, allowing for synchronization in automation workflows. Default is 0 seconds.
Output
Result
Outputs the extracted text value as a string. This variable can be used in subsequent activities for further processing or verification.
How to use:
Drag and drop the "Get Text" activity onto the workflow.
Configure the properties by specifying the UI element from which to extract text using either the "Windows Selector" or "Windows Element."
Optionally, set the timeout and delay values as needed.
Execute the workflow to extract the text from the specified UI element.
Example:

Consider an example where the "Get Text" activity is used to extract the text from a specific UI element:
Get Text:
  Display Name: "Extract Text from Element"
  Windows Selector: <ProvideSelectorHere>
  Result: extractedText
In this example, the activity extracts the text from the specified UI element using the provided selector, and the extracted text is stored in the variable "extractedText" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Hide Window/index.html

Hide Window
AutomatR.Windows.Activities.HideWindow
The "Hide Window" activity in AutomatR for Windows UI Automation hides a specified window identified by its process name, process title, or display title. This activity is useful for minimizing or hiding unwanted windows during automation workflows.
Properties
​
Name
Description
Input
Process Name
Specifies the name of the process whose window needs to be hidden. Provide the exact process name for identification. If not provided, use either "Process Title" or "Display Title."
Process Title
Specifies the title of the process window to be hidden. Use this property if the process window can be identified by its title. If not provided, use either "Process Name" or "Display Title."
Display Title
Specifies the display title of the window to be hidden. This can be an alternative title used for window identification. If not provided, use either "Process Name" or "Process Title."
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. This can be useful for handling synchronization issues. Default is 0 seconds.
How to use:
Drag and drop the "Hide Window" activity onto the workflow.
Configure the properties by specifying the process name, process title, or display title of the window to be hidden.
Optionally, set the entry delay to allow time before the window is hidden.
Execute the workflow to hide the specified window.
Example:

Consider an example where the "Hide Window" activity is used to hide a window with the process name "notepad.exe":
Hide Window:
  Display Name: "Hide Notepad Window"
  Process Name: "notepad.exe"
  Entry Delay: 1
In this example, the activity hides the window associated with the "notepad.exe" process after a delay of 1 second.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Set Text/index.html

Set Text
AutomatR.Windows.Activities.SetText
The "Set Text" activity in AutomatR is designed for UI Automation within Windows applications. It allows you to write a string to the Text attribute of a specified UI element, facilitating data entry and manipulation in automation workflows.
Properties
​
Name
Description
Input
Clear Text
When enabled, it clears the content of the element before writing new content to it.
Element
Select the browse button to indicate the element on the app with the help of the Window selector window.
Text
Enter the string text in the text box as per the UI element selected.
Selector
Windows Selector - Editor for selecting UI elements within the Windows application.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the "Set Text" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Timeout
Enter the time in seconds (e.g., 5) for the activity to be executed before throwing an exception. If not provided, the default timeout value is used.
How to use:
Drag and drop the "Set Text" activity onto the workflow.
Configure the properties by providing either the Element or Selector, specifying the text to be set, and choosing whether to clear existing text.
Optionally, configure the Delay and Timeout properties.
Execute the workflow to write the specified text to the designated UI element.
Example:

Consider an example where the "Set Text" activity is used to set a text value in a text box:
Set Text:
  Element: [Selector indicating the text box]
  Text: "Hello, AutomatR!"
  Clear Text: true
  Delay: 2
  Timeout: 10
In this example, the activity sets the text "Hello, AutomatR!" in the specified text box element, clearing any existing text, introducing a 2-second delay, and a timeout of 10 seconds for the operation.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Get Screen Dimensions/index.html

Get Screen Dimensions
AutomatR.Windows.Activities.GetScreenDimensions
The "Get Screen Dimensions" activity in AutomatR for Windows UI Automation retrieves the width and height of the primary screen. This information is valuable when designing or interacting with elements on the screen to ensure accurate positioning and scaling in automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Output
Width
Outputs the width of the primary screen. Double variables to store the screen width.
Height
Outputs the height of the primary screen. Double variables to store the screen height.
How to use:
Drag and drop the "Get Screen Dimensions" activity onto the workflow.
Execute the workflow to retrieve the width and height of the primary screen.
Use the output variables (Width and Height) in subsequent activities for accurate positioning and scaling.
Example:

Consider an example where the "Get Screen Dimensions" activity is used to obtain and store the screen dimensions:
Get Screen Dimensions:
  Display Name: "Retrieve Screen Dimensions"
  Width: screenWidth
  Height: screenHeight
In this example, the activity retrieves the width and height of the primary screen, and the values are stored in the variables "screenWidth" and "screenHeight" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Get Chrome Alert Message/index.html

Get Chrome Alert Message
AutomatR.Windows.Activities.GetChromeAlertMessage
The "Get Chrome Alert Message" activity in AutomatR for Windows UI Automation retrieves the alert message popup displayed on the Chrome browser. This activity is useful when you need to capture and process alert messages generated by web applications.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Message
Outputs the alert message retrieved from the Chrome browser. String variables to store the alert message.
How to use:
Drag and drop the "Get Chrome Alert Message" activity onto the workflow.
Optionally, configure the delay setting.
Execute the workflow to capture the alert message from the Chrome browser.
Example:

Consider an example where the "Get Chrome Alert Message" activity is used to retrieve and store an alert message:
Get Chrome Alert Message:
  Display Name: "Capture Alert Message"
  Delay: 2
  Message: alertMessage
In this example, the activity waits for 2 seconds and then retrieves the alert message displayed on the Chrome browser. The obtained message is stored in the "alertMessage" variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Move Window/index.html

Move Window
AutomatR.Windows.Activities.MoveWindow
The "Move Window" activity in AutomatR is designed for Windows UI Automation. It allows you to modify the position and dimensions of a specified window, providing control over the layout of applications in automation workflows.
Properties
​
Name
Description
Input
Process Name
Enter the process name of the window app that needs to be moved.
Process Title
Enter the process title of the window app that needs to be moved.
Display Title
Enter the title of the window app that needs to be moved.
X Value
The new X coordinate value of the window. Integer variables containing the X coordinate value.
Y Value
The new Y coordinate value of the window. Integer variables containing the Y coordinate value.
Width
Enter the new width of the window. Integer variables containing the width value.
Height
Enter the new height of the window. Integer variables containing the height value.
Window
Enter the window variable for the app that needs to be moved.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Move Window" activity onto the workflow.
Configure the properties by specifying the process name, process title, display title, or window variable, along with the new position and dimensions (X, Y, Width, Height) of the window.
Optionally, configure the delay.
Execute the workflow to modify the specified window's position and dimensions.
Example:

Consider an example where the "Move Window" activity is used to move a window with the process name "SampleApp" to a new position (X=100, Y=100) and set new dimensions (Width=500, Height=300):
Move Window:
  Process Name: "SampleApp"
  X Value: 100
  Y Value: 100
  Width: 500
  Height: 300
In this example, the activity modifies the position and dimensions of the window associated with the process name "SampleApp." The specified X, Y, Width, and Height values determine the new layout of the window.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Minimize Window/index.html

Minimize Window
AutomatR.Windows.Activities.MinimizeWindow
The "Minimize Window" activity in AutomatR is designed for UI Automation in Windows. It allows you to minimize the specified application window, providing flexibility and control in automation workflows.
Properties
​
Name
Description
Input
Display Title
Enter the title of the window app that needs to be minimized. String variables containing the window title.
Process Name
Enter the process name of the window app that needs to be minimized. String variables containing the process name.
Process Title
Enter the process title of the window app that needs to be minimized. String variables containing the process title.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Current Active Window
When enabled, indicates the current active window for the activity. Boolean variables to set the activity to focus on the current active window.
Window
Enter the window variable for the app that needs to be minimized. SelectorWindow variables.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Minimize Window" activity onto the workflow.
Configure the properties by specifying the display title, process name, or process title of the window app to be minimized.
Optionally, configure the delay and customize the display name.
Execute the workflow to minimize the specified window.
Example:

Consider an example where the "Minimize Window" activity is used to minimize a window with the title "Document Viewer."
Minimize Window:
  Display Title: "Document Viewer"
  Result: isMinimizeSuccessful
In this example, the activity minimizes the window with the title "Document Viewer." The result of the operation (success or failure) is stored in the Boolean variable "isMinimizeSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Get Active Window/index.html

Get Active Window
AutomatR.Windows.Activities.GetActiveWindow
The "Get Active Window" activity in AutomatR for Windows UI Automation allows you to retrieve information about the active window on your local system. This activity is helpful when you need to interact with the currently focused application or obtain details about the active window.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Get Active Window" activity onto the workflow.
Optionally, configure the delay setting.
Execute the workflow to retrieve information about the active window.
Example:

Consider an example where the "Get Active Window" activity is used to obtain details about the currently active window:
Get Active Window:
  Display Name: "Get Active Window Details"
  Delay: 2
In this example, the activity waits for 2 seconds and then retrieves information about the currently active window. The obtained details can be further utilized in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Maxmise Window/index.html

Maximise Window
AutomatR.Windows.Activities.Actvities.MaximiseWindow
The "Maximise Window" activity in AutomatR is part of the UI Automation for Windows activities package, allowing you to maximize the specified window. This activity is particularly useful for optimizing the visibility and accessibility of windows in your automation processes.
Properties
​
Name
Description
Input
Process Name
Enter the process name of the window app that needs to be maximized. String variables containing the process name.
Display Title
Enter the title of the window app that needs to be maximized. String variables containing the window title.
Process Title
Enter the process title of the window app that needs to be maximized. String variables containing the process title.
Current Window
When enabled, indicates the current active window for the activity. Boolean variables specifying the activation state. Default is true.
Window
Enter the variable for the window app that needs to be maximized. SelectorWindow variables containing information about the window.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) before starting the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Maximise Window" activity onto the workflow.
Configure the properties by specifying the process name, display title, process title, or selector window of the window you want to maximize.
Optionally, configure the delay and indicate whether to use the current active window.
Execute the workflow to maximize the specified window.
Example:

Consider an example where the "Maximise Window" activity is used to maximize the Notepad application window:
Maximise Window:
  Process Name: "notepad"
  Display Title: "Untitled - Notepad"
  Delay: 2
In this example, the activity maximizes the Notepad application window with the specified process name and display title after a delay of 2 seconds. Adjust the properties based on your specific automation requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Check/index.html

Check
AutomatR.Windows.Activities.Check
The "Check" activity in AutomatR for Windows UI Automation allows you to interact with checkboxes by either selecting or clearing them. This activity is useful for automating UI interactions involving checkboxes in Windows applications.
Properties
​
Name
Description
Input
Check
Enables checking or unchecking the selected UI element. Boolean variables indicating whether to check (True) or uncheck (False) the checkbox.
Windows Selector
Specifies the selector that identifies the target checkbox within the Windows application. It helps in uniquely identifying the UI element. String variables containing the selector.
Windows Element
Indicates the UI element on the app with the help of the window selector window. 
InArgument<Selector>
 variables containing the UI element information.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Timeout
Specifies the time limit in seconds for the activity to be executed before throwing an exception. Integer variables containing the timeout duration. If not provided, the default timeout is used.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Check" activity onto the workflow.
Configure the properties by specifying either the Windows Selector or the Windows Element to identify the target checkbox.
Provide the Check input to determine whether to check or uncheck the checkbox.
Optionally, configure the timeout and delay settings.
Execute the workflow to perform the checkbox interaction based on the provided configuration.
Example:

Consider an example where the "Check" activity is used to check a checkbox in a Windows application:
Check:
  Display Name: "Check Confirmation"
  Windows Selector: "[Selector to identify the checkbox]"
  Check: True
  Timeout: 10
In this example, the activity uses the specified selector to identify the target checkbox, checks it, and sets a timeout of 10 seconds for the operation.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Mouse Drag/index.html

Mouse Drag
AutomatR.Windows.Activities.MouseDrag
The "Mouse Drag" activity in AutomatR is designed for Windows UI Automation. It allows you to simulate dragging the mouse cursor to a specified region on the screen, providing precise control in automation workflows.
Properties
​
Name
Description
Input
Region Selection
The region to be dragged. Specify a 
System.Drawing.Rectangle
 representing the area to drag the mouse cursor.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Mouse Drag" activity onto the workflow.
Configure the properties by specifying the region to be dragged using the "Region Selection" property.
Optionally, configure the delay and customize the display name.
Execute the workflow to simulate dragging the mouse cursor to the specified region.
Example:

Consider an example where the "Mouse Drag" activity is used to drag the mouse cursor to a specific region on the screen.
Mouse Drag:
  Region Selection: new Rectangle(100, 100, 200, 200)
  Result: isDragSuccessful
In this example, the activity simulates dragging the mouse cursor to the region defined by the rectangle (x=100, y=100, width=200, height=200). The result of the operation (success or failure) is stored in the Boolean variable "isDragSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/UI Automation/Windows/Control/Launch SAP/index.html

Launch SAP
AutomatR.Windows.Activities.LaunchSAP
The "Launch SAP" activity in AutomatR is designed to automate the process of launching SAP, a comprehensive business software that assists companies in managing various aspects of their operations. This activity enables seamless integration and collaboration by automating the login process to the SAP system.
Properties
​
Name
Description
Input
Connection Name
The Connection Name facilitates communication and data exchange between different systems, ensuring seamless integration and collaboration. String variables containing the connection name.
Password
A valid user password used for authentication to verify the identity of individuals or entities seeking access to the SAP system. String variables containing the user password.
Path
The specific location or directory where files or executables related to the SAP software are stored. String variables containing the path.
User Name
A valid user name used as part of the authentication process to log in and perform actions within the SAP environment. String variables containing the user name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Launch SAP" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Launch SAP" activity onto the workflow.
Configure the properties by specifying the connection name, delay, password, path, and user name for SAP login.
Optionally, configure the display name for better organization.
Execute the workflow to automate the login process and launch SAP.
Example:

Consider an example where the "Launch SAP" activity is used to log in to SAP:
Launch SAP:
  Display Name: "Login to SAP"
  Connection Name: "SAP_Connection"
  Delay: 5
  Path: "C:\Program Files\SAP\SAP GUI\sapshcut.exe"
  User Name: "john_doe"
  Password: "********"
In this example, the activity logs in to SAP with the specified connection name, delay, path, user name, and password, initiating the SAP environment for further automation tasks.
Note:
The "Connection Name," "User Name," and "Password" are mandatory properties and must be provided for successful SAP login.
Ensure that the SAP GUI executable path is correctly specified in the "Path" property.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Get Mail/index.html

Get Mail
AutomatR.ExchangeServer.Activities.GetMails
The "Get Mails" activity in AutomatR is part of the Exchange Server activities package, allowing you to retrieve matching email messages from a specified mailbox. This activity simplifies the process of fetching emails based on various criteria, such as subject, sender address, and more.
Properties
​
Name
Description
Input
Body
The body of an email is where the writer explains the email's main point. String variable containing the desired content to match in the email body.
From Address
The name of the to recipient and the domain with which they are associated. String variable containing the sender's email address.
Subject
Please provide the subject line of the email from which you would like to retrieve the mail. String variable containing the desired subject line.
Top
Please specify the maximum number of emails you would like to retrieve. Integer variable representing the limit on the number of emails to fetch.
UnRead Only
Fetch only unread emails. Boolean variable to filter only unread emails.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variable representing the delay duration.
Output
Result
The result will be returned as a 
List<Mail Message>
 variable, allowing you to utilize it for further activities.
How to use:
Drag and drop the "Get Mails" activity onto the workflow.
Configure the properties by specifying the desired criteria such as subject, sender address, and others.
Optionally, configure the delay.
Execute the workflow to retrieve matching email messages.
Example:

Consider an example where the "Get Mails" activity is used to fetch the last 5 unread emails with the subject containing "Invoice" from a specific sender:
Get Mails:
  Subject: "Invoice"
  From Address: "accounts@example.com"
  Top: 5
  UnRead Only: True
  Delay: 2
  Messages: mailMessagesList
In this example, the activity fetches the last 5 unread emails with the subject containing "Invoice" from the sender "
accounts@example.com
". The result is stored in the 
mailMessagesList
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Delete Mail/index.html

Delete Mail
AutomatR.ExchangeServer.Activities.DeleteMail
The "Delete Mail" activity in AutomatR is part of the Exchange Server activities package, providing the capability to delete an email message from the specified mailbox. This activity enhances automation workflows by facilitating the removal of unwanted or obsolete email messages.
Properties
​
Name
Description
Input
Mail Message
Enter the mail message to be deleted. Use the 
MailMessage
 variable containing the email message to be deleted.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
Delay
Enter the wait time in seconds (e.g., 5) to start the activity.
Output
Result
Outputs the result of the "Delete Mail" operation, indicating whether the email message was successfully deleted. Boolean variable to store the operation result.
How to use:
Drag and drop the "Delete Mail" activity onto the workflow.
Configure the properties by specifying the mail message to be deleted.
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to delete the specified email message from the mailbox.
Example:

Consider an example where the "Delete Mail" activity is used to delete an email message with a specific message ID:
Delete Mail:
  Display Name: "Delete Important Email"
  Mail Message: importantMailMessage
  Result: isDeleteSuccessful
In this example, the activity deletes the email message specified by the 
importantMailMessage
 variable. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Send Mail/index.html

Send Mail
AutomatR.ExchangeServer.Activities.SendMail
The "Send Mail" activity in AutomatR is part of the Exchange Server activities package, allowing automation processes to send emails through Microsoft Exchange Server. This activity facilitates communication by enabling the automated sending of messages to one or more recipients.
Properties
​
Name
Description
Input
Attachments
Specifies the full file paths of files to be attached to the email. This uses a 
List<String>
 variable, allowing multiple file attachments in the email.
BCC
Specifies the email addresses to be marked as BCC (Blind Carbon Copy) when sending the email. BCC recipients receive a copy of the email, but their addresses are not visible to other recipients. String variables containing BCC email addresses.
Body
Specifies the content for the email body that will be sent. It can be in either text or HTML format, providing the main message of the email. String variables containing the email body content.
CC
Specifies the email addresses to be marked as CC (Carbon Copy) when sending the email. CC recipients receive a copy of the email for informational purposes. String variables containing CC email addresses.
Subject
Specifies the subject line for the email being sent. It represents a concise summary or description of the email content. String variables containing the subject line.
To
Specifies the email addresses of the recipients in the "To" field when sending the email. It represents the primary recipients of the email. String variables containing the email addresses.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Mail" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Send Mail" activity onto the workflow.
Configure the properties by specifying the recipients, subject, body, and any optional settings.
Optionally, configure the delay and customize the display name.
Execute the workflow to send the specified email through Microsoft Exchange Server.
Example:

Consider an example where the "Send Mail" activity is used to send a notification email:
Send Mail:
  Display Name: "Notify Users"
  To: "user1@example.com,user2@example.com"
  CC: "user3@example.com"
  BCC: "admin@example.com"
  Subject: "Notification Alert"
  Body: "This is an automated notification email."
  Attachments: ["C:\Files\attachment1.txt", "D:\Documents\attachment2.pdf"]
In this example, the activity sends a notification email to specified recipients, including CC and BCC recipients. The email contains a subject, body, and attachments as configured in the properties.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Forward Mail/index.html

Forward Mail
AutomatR.ExchangeServer.Activities.ForwardMail
The "Forward Mail" activity in AutomatR is part of the Exchange Server activities package, allowing automation processes to forward specified emails or invites. This activity is particularly useful for automating email management tasks within Microsoft Exchange Server.
Properties
​
Name
Description
Input
Attachments
Provide the full file path of the file you wish to attach from your local drive with the forwarded email, using a 
List<String>
 variable. List variable containing file paths.
BCC
Provide the email addresses that you would like to mark as BCC (Blind Carbon Copy) when forwarding the email. String variable containing BCC email addresses.
Body
Provide the desired content for the email body that you would like to send as a reply, in either text or HTML format. String variable containing the email body.
CC
Provide the email addresses that you would like to mark as CC (Carbon Copy) when forwarding the email. String variable containing CC email addresses.
Mail Message
Specify the MailMessage object representing the email to be forwarded. MailMessage variable.
Subject
Provide the subject line of the email that you would like to forward. String variable containing the email subject.
To
Provide the email addresses that you would like to mark as recipients in the "To" field when forwarding the email. String variable containing To email addresses.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (e.g., 5) to start the activity.
How to use:
Drag and drop the "Forward Mail" activity onto the workflow.
Configure the properties by specifying the MailMessage, subject, body, To, CC, BCC, and attachments for the forwarded email.
Optionally, set a delay and customize the display name.
Execute the workflow to forward the specified email within the Exchange Server.
Example:

Consider an example where the "Forward Mail" activity is used to forward an email with a specific subject, body, and attachments:
Forward Mail:
  Mail Message: emailObject
  Subject: "Meeting Agenda"
  Body: "Please find the meeting agenda attached below. Let me know if you have any questions."
  To: "recipient@example.com"
  CC: "cc@example.com"
  BCC: "bcc@example.com"
  Attachments: ["C:/Documents/Agenda.docx", "C:/Documents/Attachment.pdf"]
In this example, the activity forwards the specified email (
emailObject
) with the provided subject, body, and attachments to the specified recipients, CC, and BCC.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Exchange Server Scope/index.html

Exchange Server Scope
AutomatR.ExchangeServer.Activities.ExchangeServerScope
The "Exchange Server Scope" activity in AutomatR establishes a connection with the Exchange Server, allowing subsequent activities to interact with the server. This scope activity is essential for managing emails and other Exchange Server-related operations in the automation workflow.
Properties
​
Name
Description
Input
Password
Provide the password for the specified username/email ID within the Exchange Server scope. String variable.
User Name
Provide the username/email ID for the Exchange Server scope. String variable containing the username.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Result
The activity contains a hidden property 
Service
, representing the ExchangeService instance for advanced use.
Optional
Delay
Enter the wait time in seconds (e.g., 5) to start the activity.
Output
ES Scope Result
The result of the Exchange Server Scope will be stored, enabling you to utilize it for subsequent activities. This field accepts 
ExchangeService
 variables.
How to use:
Drag and drop the "Exchange Server Scope" activity onto the workflow.
Configure the properties by specifying the username/email ID and password for the Exchange Server scope.
Optionally, customize the display name and set a delay if necessary.
Create a sequence of activities within the scope to perform operations on the Exchange Server.
Execute the workflow to establish a connection with the Exchange Server and perform the specified activities.
Example:

Consider an example where the "Exchange Server Scope" activity is used to connect to the Exchange Server:
Exchange Server Scope:
  Display Name: "Connect to Exchange Server"
  User Name: "user@example.com"
  Password: "password123"
  Delay: 3
  -- Activities within the scope --
  - Download Attachment
  - Move Email
In this example, the activity establishes a connection to the Exchange Server with the provided credentials and executes the activities within the scope, such as downloading attachments and moving emails.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Download Attachment/index.html

Download Attachment
AutomatR.ExchangeServer.Activities.DownloadAttachment
The "Download Attachment" activity in AutomatR is part of the Exchange Server activities package, providing the capability to retrieve email attachments and save them to a designated local folder. This activity enhances automation workflows by enabling the extraction and storage of attachments from email messages.
Properties
​
Name
Description
Input
Download To
Enter the complete path of the local drive where the email attachments should be downloaded. String variable.
Mail Message
Enter the mail message containing the attachments to be downloaded. Use the 
MailMessage
 variable.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
Delay
Enter the wait time in seconds (e.g., 5) to start the activity.
How to use:
Drag and drop the "Download Attachment" activity onto the workflow.
Configure the properties by specifying the mail message containing attachments and the local path to download them.
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to retrieve and save attachments from the specified email message.
Example:

Consider an example where the "Download Attachment" activity is used to download attachments from a specific email message:
Download Attachment:
  Display Name: "Download Invoice Attachments"
  Mail Message: invoiceMailMessage
  Download To: "C:\Attachments\Invoices\"
In this example, the activity downloads attachments from the 
invoiceMailMessage
 and saves them to the "C:\Attachments\Invoices\" folder on the local drive.

URL: https://docs.automatr.tech/docs/Products/Activities/Exchange Server/Reply Mail/index.html

Reply Mail
AutomatR.ExchangeServer.Activities.ReplyMail
The "Reply Mail" activity in AutomatR is part of the Exchange Server activities package, allowing you to reply to a specified email. This activity simplifies the process of composing and sending a reply, including support for attachments and different reply types.
Properties
​
Name
Description
Input
Attachments
Specify the full file path of the file(s) you wish to attach from your local drive as a reply to the email, using a 
List<String>
 variable.
Body
Provide the desired body content that you would like to send as a reply, in the form of text or HTML. String variable containing the reply body.
Mail Message
Specify the message you want to reply to. This field only supports a mail message variable.
Reply Type
Select a reply type from the dropdown menu to specify the appropriate format for the reply email to be sent. Enum variable representing reply types (e.g., 
Reply
 or 
ReplyAll
).
Subject
Provide the subject line of the email for which you would like to send a reply. String variable containing the reply subject.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variable representing the delay duration.
How to use:
Drag and drop the "Reply Mail" activity onto the workflow.
Configure the properties by specifying the email to reply to, reply type, subject, body, and attachments (if needed).
Optionally, configure the delay.
Execute the workflow to send a reply email.
Example:

Consider an example where the "Reply Mail" activity is used to reply to an email with a specific subject and body:
Reply Mail:
  Mail Message: originalMailMessage
  Reply Type: Reply
  Subject: "Re: Your Inquiry"
  Body: "Thank you for your inquiry. We will get back to you shortly."
  Attachments: attachmentPathsList
In this example, the activity replies to the original email (
originalMailMessage
) with the subject "Re: Your Inquiry" and the body "Thank you for your inquiry. We will get back to you shortly." The attachments are specified using the 
attachmentPathsList
 variable.

URL: https://docs.automatr.tech/docs/Products/Activities/Power Shell/Invoke Power Shell/index.html

Invoke PowerShell
AutomatR.DefaultActivities.PowerShell.InvokePowerShell
The "Invoke PowerShell" activity in AutomatR allows you to execute PowerShell commands with specified input parameters. This activity leverages the power of PowerShell scripting within your automation workflows.
Properties
​
Name
Description
Input
Command
Specifies the PowerShell command to be executed. The command should be provided as a string. String variables containing the PowerShell command.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Invoke PowerShell" activity. This delay can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Outputs a collection of PSObject objects representing the result of executing the PowerShell command. This output can be used as input for subsequent activities in the workflow. Collection variables containing PSObject results.
How to use:
​
Drag and drop the "Invoke PowerShell" activity onto the workflow.
Configure the properties by specifying the PowerShell command to be executed and, optionally, set the delay.
Execute the workflow to run the specified PowerShell command.
The output, represented by a collection of PSObject results, can be utilized in subsequent activities within the workflow.
Example:
​
Consider an example where the "Invoke PowerShell" activity is used to retrieve a list of installed applications on a system:
Invoke PowerShell:
  Display Name: "Get Installed Applications"
  Params: "Get-WmiObject -Class Win32_Product | Select-Object Name, Version"
  Result: installedApplications
In this example, the activity executes the PowerShell command to retrieve information about installed applications. The results, represented as a collection of PSObject objects, are stored in the variable "installedApplications" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Power Shell/Power Shell Script/index.html

PowerShell Script
AutomatR.DefaultActivities.PowerShell.PowerShellScript
The "PowerShell Script" activity in AutomatR allows you to execute a PowerShell script file specified by its full path. This activity provides a versatile way to incorporate custom PowerShell scripts into your automation workflows.
Properties
​
Name
Description
Input
Script Path
Specifies the full path of the PowerShell script file to be executed. String variables containing the path of the PowerShell script file.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "PowerShell Script" activity. This delay can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Outputs a collection of PSObject objects representing the result of executing the PowerShell script. This output can be used as input for subsequent activities in the workflow. Collection variables containing PSObject results.
How to use:
​
Drag and drop the "PowerShell Script" activity onto the workflow.
Configure the properties by specifying the full path of the PowerShell script file to be executed and, optionally, set the delay.
Execute the workflow to run the specified PowerShell script.
The output, represented as a collection of PSObject results, can be utilized in subsequent activities within the workflow.
Example:
​
Consider an example where the "PowerShell Script" activity is used to execute a script that retrieves information about system processes:
PowerShell Script:
  Display Name: "Get Process Information"
  Path: "C:\Scripts\Get-ProcessInfo.ps1"
  Result: processInformation
In this example, the activity executes the PowerShell script located at "C:\Scripts\Get-ProcessInfo.ps1". The results, represented as a collection of PSObject objects, are stored in the variable "processInformation" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Get Templates By Document/List Templates For Documents/index.html

List Templates For Documents
AutomatR.DocuSign.Activities.ListTemplatesForDocuments
The "List Templates For Documents" activity in AutomatR is part of the DocuSign Get templates by Document package, designed to retrieve the templates associated with a specific document within the specified envelope. This activity facilitates efficient management of templates associated with documents in the DocuSign workflow.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID of the document to retrieve associated templates. String variables containing the Envelope ID.
Document ID
Enter the Document ID of the document for which templates need to be retrieved. String variables containing the Document ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Templates For Documents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns all the templates with data type 'TemplateInformation'. Variables of data type 
List<TemplateSummary>
 to store the list of templates associated with the specified document.
How to use:
Drag and drop the "List Templates For Documents" activity onto the workflow.
Configure the properties by specifying the Envelope ID and Document ID for which templates need to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve a list of templates associated with the specified document.
Important Notes:
Ensure that the "List Templates For Documents" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "List Templates For Documents" activity is used to retrieve templates associated with a specific document in a DocuSign envelope:
List Templates For Documents:
  Delay: 5
  Envelope ID: "Envelope123"
  Document ID: "Document456"
  Response: templateList
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves a list of templates associated with the document having the Envelope ID "Envelope123" and Document ID "Document456". The list of templates is stored in the variable "templateList" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Scope/DocuSign Scope/index.html

DocuSign Scope
AutomatR.DocuSign.Activities.DocuSignScope
The "DocuSign Scope" activity in AutomatR provides a scope for executing activities related to the DocuSign service. This activity facilitates the integration of DocuSign functionalities within automation workflows, allowing users to perform tasks such as sending documents for signature, checking the status of envelopes, and more.
Properties
​
Name
Description
Input
Account ID
Enter the Account ID associated with your DocuSign account. String variables containing the Account ID.
Refresh Token
Clicking on this enables DocuSign OAuth authentication with the option to approve or reject.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "DocuSign Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "DocuSign Scope" activity onto the workflow.
Configure the properties by providing the Account ID and, if needed, specifying the delay.
Click on "Refresh Token" to enable DocuSign OAuth authentication. This step allows you to authenticate with DocuSign and obtain an access token for executing activities within the scope.
Execute the workflow to perform DocuSign-related activities within the specified scope.
Important Note:
The "Refresh Token" property is crucial for authenticating with DocuSign. Ensure that you provide the necessary authentication details to enable successful integration with DocuSign.
Example:

Consider an example where the "DocuSign Scope" activity is used to perform DocuSign-related activities:
DocuSign Scope:
  Account ID: "your_account_id"
  Delay: 5
  Refresh Token: "your_refresh_token"
  - [Other DocuSign activities within the scope]
In this example, the activity establishes a scope for DocuSign-related activities, including a specified delay and OAuth authentication using the provided Account ID and Refresh Token. Other DocuSign activities can be added within this scope for seamless automation of DocuSign processes.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Document/Get Document/index.html

Get Document
AutomatR.DocuSign.Activities.GetDocument
The "Get Document" activity in AutomatR is part of the DocuSign Document activities package, allowing users to download a specific document from a DocuSign envelope. This activity simplifies the process of retrieving individual documents associated with an envelope for further processing within automation workflows.
Properties
​
Name
Description
Input
Document ID
Enter the Document ID of the specific document within the envelope that you want to download. This field supports only Strings or String variables.
Download Directory
Enter the file path of the directory where the downloaded document should be saved. This field supports only Strings or String variables. Example: "C:\Path\To\Your\Download\Directory\"
Envelope ID
Enter the Envelope ID from which the document needs to be downloaded. This field supports only Strings or String variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Document" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the full path with the file name of the downloaded document. Variables of data type string to store the path.
How to use:
Drag and drop the "Get Document" activity onto the workflow.
Configure the properties by specifying the Envelope ID, Document ID, and Download Directory.
Optionally, configure the delay and customize the display name.
Execute the workflow to download the specified document from the DocuSign envelope.
Important Note:
Ensure that the "Get Document" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Document" activity is used to download a specific document (Document ID: "doc123") from an envelope (Envelope ID: "env456") and save it to the directory "C:\DownloadedDocuments":
Get Document:
  Delay: 5
  Envelope ID: "env456"
  Document ID: "doc123"
  Download Directory: "C:\DownloadedDocuments"
  Response: documentPath
In this example, the activity downloads the document with Document ID "doc123" from the envelope with ID "env456" and saves it to the directory "C:\DownloadedDocuments." The full path of the downloaded document is stored in the variable "documentPath" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Document/List Documents/index.html

List Documents
AutomatR.DocuSign.Activities.ListDocuments
The "List Documents" activity in AutomatR is part of the DocuSign Document package, providing functionality to retrieve a list of documents associated with a specific envelope in DocuSign. This activity offers flexibility in filtering documents based on user ID, including metadata and tabs in the response, and more.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID to identify the DocuSign envelope for which documents need to be retrieved. This field supports only Strings or String variables.
Documents By User ID
Enter "true" or "false" to indicate whether to filter the envelope documents by user ID. If set to "true," recipient ID should not be provided. If set to "false," provide the recipient ID. String variables containing the value.
Include Metadata
Specify whether to include document metadata in the response. Enter "true" or "false." String variables containing the value.
Include Tabs
Specify whether to include document tabs in the response. Enter "true" or "false." String variables containing the value.
Recipient ID
Enter the recipient ID to filter envelope documents. Provide this value only if "Documents By User ID" is set to "false." String variables containing the recipient ID.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Documents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the envelope documents with data type 
EnvelopeDocumentsResult
. Variables of data type 
EnvelopeDocumentsResult
 to store the document details.
How to use:
Drag and drop the "List Documents" activity onto the workflow.
Configure the properties by specifying the Envelope ID and optionally, other filtering parameters.
Execute the workflow to retrieve information about documents associated with the specified envelope.
Important Notes:
Ensure that the "List Documents" activity is used within the scope of the "DocuSign Scope" activity.
Carefully set the "Documents By User ID" property to "true" or "false" based on the desired filtering criteria.
Example:

Consider an example where the "List Documents" activity is used to retrieve documents associated with an envelope:
List Documents:
  Delay: 5
  Envelope ID: "env123"
  Documents By User ID: "true"
  Include Metadata: "false"
  Include Tabs: "true"
  Response: envelopeDocumentsInfo
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves information about documents associated with the envelope having ID "env123." The details of the documents are stored in the variable "envelopeDocumentsInfo" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Document/Get Documents/index.html

Get Documents
AutomatR.DocuSign.Activities.GetDocuments
The "Get Documents" activity in AutomatR is part of the DocuSign Document activities package, providing the capability to download all documents associated with a DocuSign envelope and save them as a compressed (.zip) file. This activity streamlines the process of retrieving multiple documents from an envelope for further processing within automation workflows.
Properties
​
Name
Description
Input
Download Directory
Enter the file path of the directory where the downloaded documents should be saved. This field supports only Strings or String variables. Example: "C:\Path\To\Your\Download\Directory\"
Envelope ID
Enter the Envelope ID from which documents need to be downloaded. This field supports only Strings or String variables.
File Name
Provide a file name for the compressed (.zip) file. This field supports only Strings or String variables.
Overwrite
If checked, it enables you to download a file with the same name as the one in the destination location. Boolean variables or Boolean expressions for overwriting existing files.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Documents" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the full path with the name of the compressed (.zip) file containing all downloaded documents. Variables of data type string to store the path.
How to use:
Drag and drop the "Get Documents" activity onto the workflow.
Configure the properties by specifying the Envelope ID, Download Directory, File Name, and optionally, the Delay and Overwrite.
Execute the workflow to download all documents associated with the specified envelope and save them as a compressed (.zip) file.
Important Note:
Ensure that the "Get Documents" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Documents" activity is used to download all documents from an envelope (Envelope ID: "env456") and save them to the directory "C:\DownloadedDocuments" with the file name "AllDocuments":
Get Documents:
  Delay: 5
  Envelope ID: "env456"
  Download Directory: "C:\DownloadedDocuments"
  File Name: "AllDocuments"
  Overwrite: true
  Response: zipFilePath
In this example, the activity downloads all documents from the envelope with ID "env456" and saves them as a compressed (.zip) file named "AllDocuments.zip" in the directory "C:\DownloadedDocuments." The full path of the created zip file is stored in the variable "zipFilePath" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Recipients/List Recipients/index.html

List Recipients
AutomatR.DocuSign.Activities.ListRecipients
The "List Recipients" activity in AutomatR is part of the DocuSign Recipients package, providing the capability to retrieve information about recipients associated with a specific envelope in DocuSign. This activity offers flexibility in including various details such as anchor tab locations, extended information, metadata, and tabs in the response.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID to identify the DocuSign envelope for which recipients need to be retrieved. This field supports only Strings or String variables.
Include Anchor Tab Locations
Specify whether to include anchor tab locations in the response. Enter "true" or "false." String variables containing the value.
Include Extended
Specify whether to include extended details in the response. Enter "true" or "false." String variables containing the value.
Include MetaData
When true, the response includes metadata that indicates which properties the sender can edit. Enter "true" or "false." String variables containing the value.
Include Tabs
Specify whether to include document tabs in the response. Enter "true" or "false." String variables containing the value.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Recipients" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the list of recipient information for the envelope with data type 
List<Signer>
. Variables of data type 
List<Signer>
 to store recipient details.
How to use:
Drag and drop the "List Recipients" activity onto the workflow.
Configure the properties by specifying the Envelope ID and optionally, other filtering parameters.
Execute the workflow to retrieve information about recipients associated with the specified envelope.
Important Notes:
Ensure that the "List Recipients" activity is used within the scope of the "DocuSign Scope" activity.
Carefully set the optional properties based on the desired details to be included in the response.
Example:

Consider an example where the "List Recipients" activity is used to retrieve information about recipients associated with an envelope:
List Recipients:
  Delay: 5
  Envelope ID: "env123"
  Include Anchor Tab Locations: "true"
  Include Extended: "false"
  Include MetaData: "true"
  Include Tabs: "true"
  Response: envelopeRecipients
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves information about recipients associated with the envelope having ID "env123." The details of the recipients are stored in the variable "envelopeRecipients" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope/Create Envelope From Template/index.html

Create Envelope From Template
AutomatR.DocuSign.Activities.CreateEnvelopeFromTemplate
The "Create Envelope From Template" activity in AutomatR is part of the DocuSign activities package, allowing the creation and sending of an envelope based on a template. This activity simplifies the process of sending predefined templates, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Template ID
Enter the ID of the template to be used for creating the envelope. String variables containing the template ID.
Recipients Data
Enter a list of Signer objects representing the recipients to be included in the envelope. Each object should contain properties such as Email, Name, and RoleName.
Email Subject
Enter the email subject for the envelope. String variables containing the email subject.
Email Body
Enter the email body for the envelope. String variables containing the email body.
Document Details
Enter a list of Document objects representing the documents to be included in the template. Each Document object should contain properties such as DocumentId, Name, and DocumentBase64 (Provide the file path here).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Envelope From Template" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the created envelope information with the data type 
EnvelopeSummary
. Variables of type 
EnvelopeSummary
 to store the response.
How to use:
Drag and drop the "Create Envelope From Template" activity onto the workflow.
Configure the properties by specifying the template ID, recipients' data, email subject, email body, and document details if needed.
Optionally, configure the delay.
Execute the workflow to create and send an envelope based on the specified template.
Example:

Consider an example where the "Create Envelope From Template" activity is used to create an envelope from a template:
Create Envelope From Template:
  Delay: 5
  Template ID: "template123"
  Recipients Data: [{"recipient1@example.com":"John Doe", "recipient2@example.com":"Jane Doe"}]
  Email Subject: "Sign this document"
  Email Body: "Please sign the attached document."
  Document Details: [{"DocumentId": "doc1", "Name": "Agreement.pdf", "DocumentBase64": "C:\Documents\Agreement.pdf"}]
  Response: envelopeSummary
In this example, the activity creates an envelope from the specified template with recipients, email subject, email body, and an attached document. The response from the activity, including the envelope summary, is stored for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope/Get Comments/index.html

Get Comments
AutomatR.DocuSign.Activities.GetComments
The "Get Comments" activity in AutomatR is part of the DocuSign Envelope activities package, allowing users to retrieve comments transcript from a specified envelope. This activity is useful for obtaining information about comments associated with the documents within the envelope for further analysis and processing in automated workflows.
Properties
​
Name
Description
Input
Overwrite
If checked, it enables you to download a file with the same name as the one in the destination location. Boolean variables to determine whether to overwrite an existing file.
Envelope ID
Enter the ID of the envelope. This field supports only Strings or String variables.
Folder Path
Enter the file path for storing the comments transcript from the envelope. This field supports only Strings or String variables.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Comments" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Get Comments" activity onto the workflow.
Configure the properties by specifying the envelope ID, folder path for storing comments, and optionally, set the delay and overwrite parameters.
Execute the workflow to retrieve the comments transcript from the specified envelope.
Important Note:
Ensure that the "Get Comments" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Comments" activity is used to retrieve comments transcript for an envelope:
Get Comments:
  Delay: 5
  Envelope ID: "abc123"
  Folder Path: "C:\CommentsFolder"
  Overwrite: true
In this example, the activity retrieves the comments transcript for the envelope with ID "abc123" and stores it in a PDF file at the specified folder path "C:\CommentsFolder". The "Overwrite" option is set to true, allowing the activity to overwrite an existing file if present.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope/Create Envelope/index.html

Create Envelope
AutomatR.DocuSign.Activities.CreateEnvelope
The "Create Envelope" activity in AutomatR is part of the DocuSign activities package, facilitating the creation of a new envelope for document signing. This activity streamlines the process of sending documents for signatures, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Email Subject
Provide the email subject for the envelope. String variables containing the email subject.
Document Details
Enter document paths in a comma-separated format. The documents to be included in the envelope. String variables containing the document paths.
Recipient Details
Enter the recipient email (key) and name (value) in the form of a 
Dictionary<String, String>
 variable. The dictionary should contain email addresses as keys and recipient names as values.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Envelope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the created Envelope information as an EnvelopeSummary object. The EnvelopeSummary contains details about the newly created envelope, including the EnvelopeId and other properties. You can use this EnvelopeSummary object to refer to the created envelope in subsequent activities. Variables of type 
EnvelopeSummary
 to store the response.
How to use:
Drag and drop the "Create Envelope" activity onto the workflow.
Configure the properties by specifying the email subject, document details, and recipient details.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new envelope in DocuSign, initiating the document signing process.
Example:

Consider an example where the "Create Envelope" activity is used to create an envelope with the following details:
Create Envelope:
  Display Name: "Create Contract Envelope"
  Email Subject: "Please Sign Contract"
  Document Details: "C:\Documents\Contract.pdf,C:\Documents\Terms.pdf"
  Recipient Details: {"recipient1@example.com":"John Doe", "recipient2@example.com":"Jane Doe"}
  Response: envelopeSummary
In this example, the activity creates an envelope with the specified email subject, document details, and recipient details. The response from the activity, including the envelope summary, is stored for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope/Add Recipients/index.html

Add Recipients
AutomatR.DocuSign.Activities.AddRecipients
The "Add Recipients" activity in AutomatR is part of the DocuSign activities package, designed to add recipients to a specified envelope in DocuSign. This activity streamlines the process of managing recipients for document signing, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Envelope ID
Enter the envelope ID for the envelope to which recipients will be added. String variables containing the envelope ID.
Recipient Details
Enter a list of Signer objects representing the recipients of the envelope. Each Signer object should contain properties such as RecipientId, Email, Name, RoleName, etc.
Resend Envelope
If checked, it resends the envelope to all the recipients (existing also). Boolean variables containing the resend option.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Recipients" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the updated recipients with data type 
RecipientsUpdateSummary
.
Invalid Emails
Returns the invalid emails with data type 
List<string>
.
How to use:
Drag and drop the "Add Recipients" activity onto the workflow.
Configure the properties by providing the envelope ID, recipient details, and optional settings.
Optionally, configure the delay and customize the display name.
Execute the workflow to add recipients to the specified envelope in DocuSign.
Example:

Consider an example where the "Add Recipients" activity is used to add signers to an existing envelope in DocuSign:
Add Recipients:
  Display Name: "Add Signers to Envelope"
  Envelope ID: "abc123def456"
  Recipient Details:
    - RecipientId: "1"
      Email: "recipient1@example.com"
      Name: "Recipient One"
      RoleName: "Signer"
    - RecipientId: "2"
      Email: "recipient2@example.com"
      Name: "Recipient Two"
      RoleName: "Approver"
  Resend Envelope: false
In this example, the activity adds two recipients with their email addresses, names, and role names to the envelope with the ID "abc123def456." The envelope is not resent to the recipients since the "Resend Envelope" option is set to false. The response from the activity, including any updated recipient information, is stored for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope/Update Envelope/index.html

Update Envelope
AutomatR.DocuSign.Activities.UpdateEnvelope
The "Update Envelope" activity in AutomatR is part of the DocuSign Envelope package, allowing users to retrieve the status of an envelope. This activity enhances workflow automation in DocuSign by providing the capability to update various attributes of an existing envelope, such as email subject, advanced options, and resend settings.
Properties
​
Name
Description
Input
Email Subject
Enter the email subject for the envelope. String variables containing the email subject.
Envelope ID
Enter the ID of the envelope to be updated. This field supports only strings or string variables.
Advanced Update
When set to true, allows the caller to update recipients, tabs, custom fields, notification, email settings, and other envelope attributes. This field supports only strings or string variables.
Resend Envelope
Specifies whether or not to resend the envelope after the update. This field supports only strings or string variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Envelope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Envelope Update Summary
Returns the update summary object, providing information about the changes made during the envelope update. Variables of data type 'EnvelopeUpdateSummary' to store the update summary.
How to use:
Drag and drop the "Update Envelope" activity onto the workflow.
Configure the properties by specifying the envelope ID and providing details for the email subject.
Optionally, configure advanced update options and choose whether to resend the envelope.
Execute the workflow to update the specified envelope in DocuSign.
Important Notes:
Ensure that the "Update Envelope" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Update Envelope" activity is used to update the email subject of an existing DocuSign envelope:
Update Envelope:
  Delay: 5
  Envelope ID: "Envelope123"
  Email Subject: "Updated Subject"
  Advanced Update: "true"
  Resend Envelope: "false"
  Envelope Update Summary: envelopeUpdateSummary
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then updates the email subject of the envelope with ID "Envelope123" to "Updated Subject." The advanced update option is set to true, indicating that advanced attributes can be modified. The envelope is not resent after the update. The update summary is stored in the variable "envelopeUpdateSummary" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope/Get Envelope/index.html

Get Envelope
AutomatR.DocuSign.Activities.GetEnvelope
The "Get Envelope" activity in AutomatR is part of the DocuSign Envelope activities package, providing the ability to retrieve the status and information of a specific DocuSign envelope. This activity streamlines the process of obtaining envelope details for further analysis and decision-making within automation workflows.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID for which you want to retrieve information. This field supports only Strings or String variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Envelope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the envelope information in the form of an Envelope object. Variables of data type Envelope to store the envelope details.
How to use:
Drag and drop the "Get Envelope" activity onto the workflow.
Configure the properties by specifying the Envelope ID and optionally, the Delay.
Execute the workflow to retrieve information about the specified envelope.
Important Note:
Ensure that the "Get Envelope" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Envelope" activity is used to retrieve information about an envelope with ID "env123":
Get Envelope:
  Delay: 5
  Envelope ID: "env123"
  Response: envelopeInfo
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves information about the envelope with ID "env123." The details of the envelope are stored in the variable "envelopeInfo" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope Status Changes/index.html

Envelope Status Changes
AutomatR.DocuSign.Activities.EnvelopeStatusChanges
The "Envelope Status Changes" activity in AutomatR is part of the DocuSign activities package, allowing users to retrieve information about changes in envelope status within DocuSign. This activity is useful for tracking and managing the status of envelopes in automated workflows.
Properties
​
Name
Description
Input
From Date
Enter the from date in the format 'YYYY-MM-DDTHH:MM:SSZ for UTC time or YYYY-MM-DDTHH:MM:SS±HH:MM'. String variables containing the from date.
Envelope IDs
Enter the envelope IDs as a comma-separated list of GUIDs. String variables containing the envelope IDs.
User Filter
Specifies the user filter for retrieving envelope status changes. Options include 
all
, 
changes_only
, or 
recipient_activity
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Envelope Status Changes" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the envelope status changes information with data type 
List<Envelope>
. Variables of relevant types (e.g., 
List<Envelope>
) to store the envelope status changes.
How to use:
Drag and drop the "Envelope Status Changes" activity onto the workflow.
Configure the properties by providing the necessary input values, such as the delay, from date, envelope IDs, and user filter.
Execute the workflow to retrieve information about changes in envelope status.
Important Note:
Ensure that the "Envelope Status Changes" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Envelope Status Changes" activity is used to retrieve status changes for specific envelopes:
Envelope Status Changes:
  Delay: 5
  From Date: "2023-01-01T00:00:00Z"
  Envelope IDs: "guid1, guid2, guid3"
  User Filter: all
  Response: envelopeStatusChanges
In this example, the activity retrieves envelope status changes for the specified envelope IDs from the given date. The obtained information is stored in the variable "envelopeStatusChanges" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Bulk Send/Get Bulk Send Lists/index.html

Get Bulk Send Lists
AutomatR.DocuSign.Activities.GetBulkSendLists
The "Get Bulk Send Lists" activity in AutomatR is part of the DocuSign Bulk Send activities package, allowing users to retrieve a list of Bulk Send Lists from the DocuSign API. This activity is valuable for obtaining information about multiple bulk send lists for further analysis and processing in automated workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Bulk Send Lists" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the list of Bulk Send Lists retrieved from the DocuSign API. Variables of relevant types (e.g., List
<
BulkSendingListSummary
>
) to store the bulk send lists.
How to use:
Drag and drop the "Get Bulk Send Lists" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve information about all available bulk send lists.
Important Note:
Ensure that the "Get Bulk Send Lists" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Bulk Send Lists" activity is used to retrieve information about all bulk send lists:
Get Bulk Send Lists:
  Delay: 5
  Response: bulkSendLists
In this example, the activity retrieves a list of Bulk Send Lists from DocuSign. The obtained information is stored in the variable "bulkSendLists" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Bulk Send/Create Bulk Send Request/index.html

Create Bulk Send Request
AutomatR.DocuSign.Activities.CreateBulkSendRequest
The "Create Bulk Send Request" activity in AutomatR is part of the DocuSign activities package, designed to create a new BulkSendRequest for initiating bulk document sending in DocuSign. This activity streamlines the process of sending bulk envelopes using specified templates or envelope IDs, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Bulk Send List ID
The bulk send list ID. This property is created after you post a new bulk send list. String variables containing the bulk send list ID.
Envelope Or TemplateID
The envelope or template ID to use for the bulk send. String variables containing the envelope or template ID.
Batch Name
The batch name for the bulk send. String variables containing the batch name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Bulk Send Request" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the bulk send response with data type 
BulkSendResponse
.
Validation:
The 
Envelope Or TemplateID
 property is required. If not provided, a validation error will occur.
How to use:
Drag and drop the "Create Bulk Send Request" activity onto the workflow.
Configure the properties by specifying the bulk send list ID, envelope or template ID, and batch name.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new bulk send request in DocuSign, initiating the bulk send process.
Example:

Consider an example where the "Create Bulk Send Request" activity is used to create a bulk send request for a bulk send list with ID "1234-5678-ABCD-EFGH" using a template with ID "9876-5432-WXYZ" and batch name "ContractBatch":
Create Bulk Send Request:
  Display Name: "Create Contract Bulk Send Request"
  Bulk Send List ID: "1234-5678-ABCD-EFGH"
  Envelope Or TemplateID: "9876-5432-WXYZ"
  Batch Name: "ContractBatch"
  Response: bulkSendResponse
In this example, the activity creates a bulk send request for the specified bulk send list using the provided template ID and batch name. The response from the activity, including the bulk send response, is stored for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Bulk Send/Get Bulk Send List By ID/index.html

Get Bulk Send List By ID
AutomatR.DocuSign.Activities.GetBulkSendListByID
The "Get Bulk Send List By ID" activity in AutomatR is part of the DocuSign Bulk Send activities package, allowing users to retrieve a specific Bulk Send List from the DocuSign API using its Bulk Send List ID. This activity is useful for obtaining detailed information about a bulk send list for further processing in automated workflows.
Properties
​
Name
Description
Input
Bulk Send List ID
The bulk send list ID. This property is created after you post a new bulk send list. String variables containing the bulk send list ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Bulk Send List By ID" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the bulk sending list. Variables of relevant types (e.g., BulkSendingList) to store the bulk send list information.
How to use:
Drag and drop the "Get Bulk Send List By ID" activity onto the workflow.
Configure the properties by providing the necessary input values, such as the bulk send list ID.
Optionally, configure the delay.
Execute the workflow to retrieve information about the specified bulk send list.
Important Note:
Ensure that the "Get Bulk Send List By ID" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Bulk Send List By ID" activity is used to retrieve information about a specific bulk send list:
Get Bulk Send List By ID:
  Bulk Send List ID: "bulkSendListId"
  Delay: 5
  Response: bulkSendListInfo
In this example, the activity retrieves detailed information about the bulk send list with the specified ID. The obtained information is stored in the variable "bulkSendListInfo" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Bulk Send/Create Bulk Send List/index.html

Create Bulk Send List
AutomatR.DocuSign.Activities.CreateBulkSendList
The "Create Bulk Send List" activity in AutomatR is part of the DocuSign activities package, designed to create a new Bulk Send List for efficiently managing bulk document sending in DocuSign. This activity simplifies the process of preparing and sending multiple envelopes to recipients, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Bulk Send List Name
Enter the name of the bulk send list you want to create. String variables containing the name of the bulk send list.
Custom Fields
Enter the custom fields you want to include in the bulk send list. List variables containing 
BulkSendingCopyCustomField
 objects.
DocGenFormFields
Enter the document form fields you want to include in the bulk send list. List variables containing 
BulksendingCopyDocGenFormField
 objects.
Email Body
Enter the email body for this copy of the envelope. String variables containing the email body.
Email Subject
Enter the email subject line for this copy of the envelope. String variables containing the email subject.
Recipients
Enter the recipients for the bulk send list. List variables containing 
BulkSendingCopyRecipient
 objects.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Bulk Send List" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the bulk sending list with data type 
BulkSendingList
.
How to use:
Drag and drop the "Create Bulk Send List" activity onto the workflow.
Configure the properties by providing the bulk send list name and other optional settings.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new bulk send list in DocuSign, including specified custom fields, document form fields, email body, email subject, and recipients.
Example:

Consider an example where the "Create Bulk Send List" activity is used to create a bulk send list named "ContractBulkList" with specific recipients, custom fields, and document form fields:
Create Bulk Send List:
  Display Name: "Create Contract Bulk List"
  Bulk Send List Name: "ContractBulkList"
  Recipients:
    - RecipientId: "1"
      Email: "recipient1@example.com"
      Name: "Recipient One"
      RoleName: "Signer"
    - RecipientId: "2"
      Email: "recipient2@example.com"
      Name: "Recipient Two"
      RoleName: "Approver"
  Custom Fields:
    - FieldName: "CustomField1"
      Value: "Value1"
    - FieldName: "CustomField2"
      Value: "Value2"
  DocGenFormFields:
    - FieldName: "DocGenField1"
      Value: "DocGenValue1"
    - FieldName: "DocGenField2"
      Value: "DocGenValue2"
  Email Body: "Please review and sign the attached documents."
  Email Subject: "Contract Documents for Signature"
  Response: bulkSendListResponse
In this example, the activity creates a bulk send list named "ContractBulkList" with specific recipients, custom fields, document form fields, email body, and email subject. The response from the activity, including the created bulk send list, is stored for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Templates/List Templates/index.html

List Templates
AutomatR.DocuSign.Activities.ListTemplates
The "List Templates" activity in AutomatR is part of the DocuSign Templates package, providing the capability to retrieve a list of all templates available within a DocuSign account. This activity simplifies the process of working with DocuSign templates in automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Templates" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns all the templates with data type 'EnvelopeTemplateResults'. Variables of data type 'EnvelopeTemplateResults' to store the list of templates.
How to use:
Drag and drop the "List Templates" activity onto the workflow.
Configure the properties as needed, including an optional delay.
Execute the workflow to retrieve a list of templates from DocuSign.
Important Notes:
Ensure that the "List Templates" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "List Templates" activity is used to retrieve all templates within a DocuSign account:
List Templates:
  Delay: 5
  Response: templateList
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves a list of templates. The list of templates is stored in the variable "templateList" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Templates/Create Template/index.html

Create Template
AutomatR.DocuSign.Activities.CreateTemplate
The "Create Template" activity in AutomatR is part of the DocuSign activities package, allowing you to create one or more template definitions using a multipart request for each template. This activity simplifies the process of defining templates for use in DocuSign, streamlining template creation within automation workflows.
Properties
​
Name
Description
Input
Document Details
Enter a list of Document objects representing the documents to be included in the template. Each Document object should contain properties such as DocumentId, Name, and DocumentBase64 (Provide the file path here).
Recipient Details
Enter a list of Signer objects representing the recipients of the template. Each Signer object should contain properties such as RecipientId, Email, Name, RoleName, etc.
Email Subject
Enter the email subject for the template. String variables containing the email subject.
Email Message
Enter the email message for the template. String variables containing the email message.
Template Name
Enter the name for the template. String variables containing the template name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Template" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the created template information as a 
TemplateSummary
 object. The 
TemplateSummary
 contains details about the newly created template, including the TemplateId, Name, and other properties. You can use this 
TemplateSummary
 object to refer to the created template in subsequent activities. Variables of type 
TemplateSummary
 to store the response.
How to use:
Drag and drop the "Create Template" activity onto the workflow.
Configure the properties by specifying document details, recipient details, email subject, email message, and the template name.
Optionally, configure the delay.
Execute the workflow to create a template based on the specified parameters.
Example:

Consider an example where the "Create Template" activity is used to create a template:
Create Template:
  Delay: 5
  Document Details: [{"DocumentId": "doc1", "Name": "Agreement.pdf", "DocumentBase64": "C:\Documents\Agreement.pdf"}]
  Recipient Details: [{"RecipientId": "1", "Email": "recipient1@example.com", "Name": "John Doe", "RoleName": "Signer"}]
  Email Subject: "Sign this document"
  Email Message: "Please sign the attached document."
  Template Name: "AgreementTemplate"
  Response: templateSummary
In this example, the activity creates a template named "AgreementTemplate" with a specified document, recipient, email subject, and email message. The response from the activity, including the template summary, is stored for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Templates/Get Template By Document/index.html

Get Template By Document
AutomatR.DocuSign.Activities.GetTemplateByDocument
The "Get Template By Document" activity in AutomatR is part of the DocuSign Templates package, providing the capability to retrieve the template associated with a specific document within a DocuSign envelope. This activity facilitates seamless integration with DocuSign for template-related automation workflows.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID to identify the DocuSign envelope containing the target document. This field supports only Strings or String variables.
Document ID
Enter the Document ID to identify the specific document within the DocuSign envelope. This field supports only Strings or String variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Template By Document" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the template associated with the specified document in the form of a TemplateInformation object. Variables of data type TemplateInformation to store the template details.
How to use:
Drag and drop the "Get Template By Document" activity onto the workflow.
Configure the properties by specifying the Envelope ID, Document ID, and optionally, the Delay.
Execute the workflow to retrieve the template information associated with the specified document.
Important Note:
Ensure that the "Get Template By Document" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "Get Template By Document" activity is used to retrieve the template associated with a document in an envelope:
Get Template By Document:
  Delay: 5
  Envelope ID: "env123"
  Document ID: "doc456"
  Response: templateInfo
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves information about the template associated with the document having ID "doc456" in the envelope with ID "env123." The details of the template are stored in the variable "templateInfo" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Attachments/List Attachments/index.html

List Attachments
AutomatR.DocuSign.Activities.ListAttachments
The "List Attachments" activity in AutomatR is part of the DocuSign Attachments package, providing the functionality to retrieve all attachments associated with a specific envelope in DocuSign. This activity facilitates efficient management of attachments within DocuSign-enveloped workflows.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID to identify the DocuSign envelope for which attachments need to be retrieved. This field supports only Strings or String variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Attachments" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns all the attachments associated with the specified envelope in the form of an EnvelopeAttachmentsResult object. Variables of data type EnvelopeAttachmentsResult to store the attachment details.
How to use:
Drag and drop the "List Attachments" activity onto the workflow.
Configure the properties by specifying the Envelope ID and optionally, the Delay.
Execute the workflow to retrieve information about attachments associated with the specified envelope.
Important Note:
Ensure that the "List Attachments" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "List Attachments" activity is used to retrieve all attachments associated with an envelope:
List Attachments:
  Delay: 5
  Envelope ID: "env123"
  Response: attachmentsInfo
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves information about all attachments associated with the envelope having ID "env123." The details of the attachments are stored in the variable "attachmentsInfo" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Docusign/Envelope Custom Fields/List Custom Fields/index.html

List Custom Fields
AutomatR.DocuSign.Activities.ListCustomFields
The "List Custom Fields" activity in AutomatR is part of the DocuSign Envelope Custom Fields package, providing functionality to retrieve a list of custom fields associated with a specific envelope in DocuSign. This activity facilitates the seamless integration of custom data fields within DocuSign-enveloped workflows.
Properties
​
Name
Description
Input
Envelope ID
Enter the Envelope ID to identify the DocuSign envelope for which custom fields need to be retrieved. This field supports only Strings or String variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Custom Fields" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Output
Response
Returns the custom fields associated with the specified envelope in the form of a CustomFieldsEnvelope object. Variables of data type CustomFieldsEnvelope to store the custom field details.
How to use:
Drag and drop the "List Custom Fields" activity onto the workflow.
Configure the properties by specifying the Envelope ID and optionally, the Delay.
Execute the workflow to retrieve information about custom fields associated with the specified envelope.
Important Note:
Ensure that the "List Custom Fields" activity is used within the scope of the "DocuSign Scope" activity.
Example:

Consider an example where the "List Custom Fields" activity is used to retrieve custom fields associated with an envelope:
List Custom Fields:
  Delay: 5
  Envelope ID: "env123"
  Response: customFieldsInfo
In this example, the activity waits for 5 seconds (as specified in the Delay property) and then retrieves information about custom fields associated with the envelope having ID "env123." The details of the custom fields are stored in the variable "customFieldsInfo" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/Image Classification/Get Model/index.html

Get Model
AutomatR.Nanonets.Activities.GetModel
The "Get Model" activity in AutomatR is part of the Nanonets Image Classification activities package, providing details about a specific model by passing its Model ID. This activity enables you to retrieve information about the trained model, enhancing transparency and understanding of the model's characteristics.
Properties
​
Name
Description
Input
Model ID
Specifies the unique identifier of the model for which you want to retrieve details. String variables containing the Model ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Model" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the details of the specified model with the data type 
ImageClassificationProperties
. Variables of type 
ImageClassificationProperties
 to store the model details.
How to use:
Drag and drop the "Get Model" activity onto the workflow.
Configure the properties by specifying the Model ID of the Nanonets Image Classification model you want to retrieve details for.
Optionally, configure the delay.
Execute the workflow to obtain details about the specified model.
Example:

Consider an example where the "Get Model" activity is used to retrieve details about a Nanonets Image Classification model with the Model ID "12345":
Get Model:
  Model ID: "12345"
  Delay: 3
  Result: modelDetails
In this example, the activity retrieves details about the Nanonets Image Classification model with the Model ID "12345" with a delay of 3 seconds. The details are stored in the variable "modelDetails" of type 
ImageClassificationProperties
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/Image Classification/Image File Prediction/index.html

Image File Prediction
AutomatR.Nanonets.Activities.ImageFilePrediction
The "Image File Prediction" activity in AutomatR is part of the Nanonets Image Classification activities package, facilitating the prediction of categories for an image file using the Nanonets OCR model. This activity streamlines the process of categorizing images based on trained models, enhancing the efficiency of image classification workflows.
Properties
​
Name
Description
Input
Image Path
Specifies the full file path of the image to be used for prediction. It supports JPG, JPEG, and PNG file formats. String variables containing the image file path.
Model ID
Specifies the ID of the Nanonets OCR model used for image classification. String variables containing the Model ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Image File Prediction" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the predicted results for the image file. The results include information about the categories assigned to the image. The data type is 
ImagePredictByFileProperties
. Variables of type 
ImagePredictByFileProperties
 to store the prediction details.
How to use:
Drag and drop the "Image File Prediction" activity onto the workflow.
Configure the properties by specifying the image file path and the Model ID for Nanonets image classification.
Optionally, configure the delay.
Execute the workflow to predict the categories for the specified image file using the Nanonets OCR model.
Example:

Consider an example where the "Image File Prediction" activity is used to predict categories for an image file with the Model ID "789" and Image Path "C:/Images/sample.jpg":
Image File Prediction:
  Display Name: "Image Prediction Activity"
  Image Path: "C:/Images/sample.jpg"
  Model ID: "789"
  Delay: 3
  Result: imagePredictionDetails
In this example, the activity predicts categories for the image located at "C:/Images/sample.jpg" using the Nanonets OCR model with a Model ID of "789" and a delay of 3 seconds. The predicted results are stored in the variable "imagePredictionDetails" of type 
ImagePredictByFileProperties
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/Image Classification/Prediction for Image Urls/index.html

Prediction For Image Urls
AutomatR.Nanonets.Activities.PredictionForImageUrls
The "Prediction For Image Urls" activity in AutomatR is part of the Nanonets Image Classification activities package, allowing users to predict the category of an image based on its URL. This activity supports multiple image URLs in a comma-separated format, making it versatile for image classification automation workflows.
Properties
​
Name
Description
Input
Model ID
Enter the Model ID associated with the Nanonets Image Classification model to be used for prediction. String variables containing the Nanonets Image Classification model ID.
Image Url
Enter the image URLs in a comma-separated format. These URLs represent the images for which predictions will be made. String variables containing the image URLs.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Prediction For Image Urls" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the predicted results in the form of a list of 
ImageURLProperties
. Variables of type 
List<ImageURLProperties>
 to store the predicted results for each image URL.
How to use:
Drag and drop the "Prediction For Image Urls" activity onto the workflow.
Configure the properties by specifying the Nanonets Image Classification model ID and the image URLs for prediction.
Optionally, configure the delay.
Execute the workflow to perform predictions on the specified image URLs using the Nanonets Image Classification model.
Access the detailed predicted results from the output variable "Result" for further processing in the workflow.
Example:

Consider an example where the "Prediction For Image Urls" activity is used to predict categories for two image URLs ("
https://example.com/image1.jpg"
 and "
https://example.com/image2.png"
) using the Nanonets Image Classification model with the ID "xyz123" and a delay of 2 seconds:
Prediction For Image Urls:
  Display Name: "Image Classification Prediction"
  Model ID: "xyz123"
  Image Url: "https://example.com/image1.jpg,https://example.com/image2.png"
  Delay: 2
  Result: imageClassificationResults
In this example, the activity predicts categories for the specified image URLs using the Nanonets Image Classification model with the ID "xyz123". The detailed predicted results are stored in the variable "imageClassificationResults" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/Image Classification/Get All Models/index.html

Get All Models
AutomatR.Nanonets.Activities.GetAllModels
The "Get All Models" activity in AutomatR is part of the Nanonets Image Classification activities package, allowing you to retrieve details of all existing models. This activity facilitates the management and analysis of the available image categorization models in your Nanonets account.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Models" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the details of all existing models in the Nanonets account. The result is provided in the form of a list (
List<ImageGetAllModels>
) containing information about each model. Variables of type list to store the model details.
How to use:
Drag and drop the "Get All Models" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve details of all existing models in the Nanonets account.
Access the result variable (list of models) for further analysis or use in the workflow.
Example:

Consider an example where the "Get All Models" activity is used to retrieve details of all existing image categorization models:
Get All Models:
  Delay: 3
  Result: allModels
In this example, the activity retrieves details of all image categorization models with a delay of 3 seconds. The list of models is stored in the variable "allModels" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/Full Text/Get Full Text/index.html

Get Full Text
AutomatR.Nanonets.Activities.GetFullText
The "Get Full Text" activity in AutomatR is part of the Nanonets Full Text OCR activities package, allowing you to extract full text from images or PDF files using the Nanonets OCR model. This activity supports processing multiple files simultaneously and provides the extracted text as a list of 
FullOCRProperties
 for further automation.
Properties
​
Name
Description
Input
File Path
Specifies the file paths (PDF or image files) from which to extract full text. Provide multiple file paths separated by commas. String variables containing the file paths.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Full Text" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the full text extracted from the input files in the form of a list of 
FullOCRProperties
. Variables of type list to store the extracted text for each file.
How to use:
Drag and drop the "Get Full Text" activity onto the workflow.
Configure the properties by specifying the file paths (PDF or image files) from which to extract full text.
Optionally, configure the delay.
Execute the workflow to extract full text from the specified files using the Nanonets OCR model.
Example:

Consider an example where the "Get Full Text" activity is used to extract full text from two files, an image file ("document.jpg") and a PDF file ("report.pdf"):
Get Full Text:
  File Path: "/path/to/document.jpg, /path/to/report.pdf"
  Delay: 3
  Result: extractedTextList
In this example, the activity extracts full text from the specified image and PDF files with a delay of 3 seconds. The extracted text is stored in the list variable "extractedTextList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Model/Get Model By ID/index.html

Get Model By ID
AutomatR.Nanonets.Activities.GetModelByID
The "Get Model By ID" activity in AutomatR is part of the Nanonets OCR Model activities package, providing detailed information about a specific OCR model by passing its Model ID. This activity enhances transparency and understanding of the OCR model's characteristics.
Properties
​
Name
Description
Input
Model ID
Specifies the unique identifier of the OCR model for which you want to retrieve details. String variables containing the Model ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Model By ID" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the details of the specified OCR model with the data type 
GetModelID
. Variables of type 
GetModelID
 to store the model details.
How to use:
Drag and drop the "Get Model By ID" activity onto the workflow.
Configure the properties by specifying the Model ID of the Nanonets OCR model you want to retrieve details for.
Optionally, configure the delay.
Execute the workflow to obtain details about the specified OCR model.
Example:

Consider an example where the "Get Model By ID" activity is used to retrieve details about a Nanonets OCR model with the Model ID "12345":
Get Model By ID:
  Model ID: "12345"
  Delay: 3
  Result: modelDetails
In this example, the activity retrieves details about the Nanonets OCR model with the Model ID "12345" with a delay of 3 seconds. The details are stored in the variable "modelDetails" of type 
GetModelID
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Model/Get Model Details By ID/index.html

Get Model Details By ID
AutomatR.Nanonets.Activities.GetModelDetailsByID
The "Get Model Details By ID" activity in AutomatR is part of the Nanonets OCR Model activities package, providing comprehensive information about a specific OCR model by passing its Model ID. This activity enhances transparency and understanding of the OCR model's characteristics.
Properties
​
Name
Description
Input
Model ID
Specifies the unique identifier of the OCR model for which you want to retrieve detailed information. String variables containing the Model ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Model Details By ID" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the detailed information of the specified OCR model with the data type 
GetModelID
. Variables of type 
GetModelID
 to store the model details.
How to use:
Drag and drop the "Get Model Details By ID" activity onto the workflow.
Configure the properties by specifying the Model ID of the Nanonets OCR model for which you want to retrieve detailed information.
Optionally, configure the delay.
Execute the workflow to obtain detailed information about the specified OCR model.
Example:

Consider an example where the "Get Model Details By ID" activity is used to retrieve detailed information about a Nanonets OCR model with the Model ID "12345":
Get Model Details By ID:
  Model ID: "12345"
  Delay: 3
  Result: modelDetails
In this example, the activity retrieves detailed information about the Nanonets OCR model with the Model ID "12345" with a delay of 3 seconds. The detailed information is stored in the variable "modelDetails" of type 
GetModelID
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Model/Create New OCR Model/index.html

Create New OCR Model
AutomatR.Nanonets.Activities.CreateNewOCRModel
The "Create New OCR Model" activity in AutomatR is part of the Nanonets OCR Model activities package, allowing you to create a new OCR model with specified categories and obtain the associated model ID. This activity streamlines the process of setting up OCR models tailored to specific document categories for efficient text extraction.
Properties
​
Name
Description
Input
Categories
Specifies the categories for the OCR model, provided as a comma-separated string. These categories define the types of information the OCR model will recognize in documents (e.g., "Name, Age, Height"). String variables containing the categories.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create New OCR Model" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
ModelID
Outputs the unique identifier (ID) associated with the created OCR model. This ID is used for subsequent OCR operations using the Nanonets OCR model. Variables of type string to store the model ID.
Status
Outputs the status of the created OCR model, indicating whether the model creation was successful or any encountered errors. Variables of type string to store the model creation status.
How to use:
Drag and drop the "Create New OCR Model" activity onto the workflow.
Configure the properties by specifying the desired OCR model categories.
Optionally, configure the delay.
Execute the workflow to create a new OCR model with the specified categories.
Retrieve the model ID and status for further use in OCR operations.
Example:

Consider an example where the "Create New OCR Model" activity is used to create an OCR model with categories for extracting information from documents:
Create New OCR Model:
  Categories: "Name, Age, Address"
  Delay: 5
  ModelID: modelId
  Status: modelStatus
In this example, the activity creates a new OCR model with categories for extracting "Name," "Age," and "Address" information from documents. The model ID and status are stored in the variables "modelId" and "modelStatus" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/Scope/Nanonets Scope/index.html

Nanonets Scope
AutomatR.Nanonets.Activities.NanonetsScope
The "Nanonets Scope" activity in AutomatR provides a scope for executing activities related to the Nanonets service. This activity is crucial for managing the authentication and authorization details required for interacting with Nanonets API services. It encapsulates a sequence of activities within the Nanonets scope, ensuring proper authentication before executing the enclosed activities.
Properties
​
Name
Description
Input
API Token
Allows you to enter the API token (or API key) used for authentication and authorization with the Nanonets API services. This token enables you to make API requests and interact with the Nanonets models. String variables containing the Nanonets API token.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Nanonets Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
None
The "Nanonets Scope" activity does not produce any specific output variables. However, it sets the API token in the workflow context properties for use in enclosed Nanonets activities.
How to use:
Drag and drop the "Nanonets Scope" activity onto the workflow.
Configure the properties by specifying the API token for Nanonets authentication.
Optionally, configure the delay.
Enclose the activities related to Nanonets within the scope of the "Nanonets Scope" activity.
Execute the workflow, ensuring proper authentication with Nanonets before executing the enclosed activities.
Example:

Consider an example where the "Nanonets Scope" activity is used to authenticate with Nanonets using the API token "xyz123" with a delay of 3 seconds:
Nanonets Scope:
  Display Name: "Nanonets Authentication"
  API Token: "xyz123"
  Delay: 3
  (Enclosed Nanonets Activities)
In this example, the "Nanonets Scope" activity authenticates with Nanonets using the API token "xyz123" with a delay of 3 seconds. The enclosed Nanonets activities can now interact with Nanonets API services using the authenticated token.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Asyc Prediction For Image URL/index.html

Async Prediction For Image URL
AutomatR.Nanonets.Activities.AsyncPredictionForImageURL
The "Async Prediction For Image URL" activity in AutomatR is part of the Nanonets OCR activities package, enabling Optical Character Recognition (OCR) predictions on an image using the Nanonets OCR model, with the flexibility to process images from URLs asynchronously. This activity allows you to submit image URLs for processing and retrieve the OCR predictions with a unique ID at a later point in time.
Properties
​
Name
Description
Input
Async
Specifies whether you want to perform asynchronous processing. Enter either (true) or (false). Boolean variables containing the value true or false.
Image URL
Specifies the URL of the image for which OCR predictions will be made. Only web URLs are allowed. String variables containing the image URL.
Model ID
The ID of the Nanonets OCR model to use for prediction. String variables containing the model ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Async Prediction For Image URL" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the Nanonets OCR model based on the provided image URL. The response includes properties related to predictions for image URLs. Variables of type 
PredictionForImageUrlsProperties
 to store the response.
How to use:
Drag and drop the "Async Prediction For Image URL" activity onto the workflow.
Configure the properties by specifying the model ID, image URL, and whether to perform asynchronous processing.
Optionally, configure the delay.
Execute the workflow to perform OCR predictions on the specified image URL using the Nanonets OCR model asynchronously.
Example:

Consider an example where the "Async Prediction For Image URL" activity is used to perform OCR predictions on an image from the URL "
https://example.com/image.jpg"
 using the Nanonets OCR model:
Async Prediction For Image URL:
  Model ID: "your_model_id"
  Image URL: "https://example.com/image.jpg"
  Async: true
  Response: OCRResponse
In this example, the activity submits the image URL for asynchronous processing using the specified Nanonets OCR model. The detailed response generated by the model is stored in the variable "OCRResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Get Prediction File By Page ID/index.html

Get Prediction File By Page ID
AutomatR.Nanonets.Activities.GetPredictionFileByPageID
The "Get Prediction File By Page ID" activity in AutomatR is part of the Nanonets OCR PREDICT activities package, allowing users to retrieve prediction results for a specific page using the Nanonets OCR model. This activity streamlines the extraction of detailed information from a page, enhancing the efficiency of OCR-related automation workflows.
Properties
​
Name
Description
Input
Model ID
The ID of the Nanonets OCR model used for prediction. String variables containing the Model ID.
Page ID
The ID of the page received from the asynchronous prediction endpoint. String variables containing the page ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Prediction File By Page ID" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the Nanonets OCR model based on the provided page. The data type is 
GetPredictionFileByPageIDProperties
. Variables of type 
GetPredictionFileByPageIDProperties
 to store the prediction details.
How to use:
Drag and drop the "Get Prediction File By Page ID" activity onto the workflow.
Configure the properties by specifying the Model ID and Page ID for the Nanonets OCR model.
Optionally, configure the delay.
Execute the workflow to retrieve detailed prediction results for the specified page using the Nanonets OCR model.
Example:

Consider an example where the "Get Prediction File By Page ID" activity is used to retrieve prediction results for a page with the Model ID "789" and Page ID "XYZ123":
Get Prediction File By Page ID:
  Model ID: "789"
  Page ID: "XYZ123"
  Delay: 3
  Response: pagePredictionDetails
In this example, the activity retrieves detailed prediction results for the page associated with the Model ID "789" and Page ID "XYZ123" with a delay of 3 seconds. The detailed results are stored in the variable "pagePredictionDetails" of type 
GetPredictionFileByPageIDProperties
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Get All Prediction Files/index.html

Get All Prediction Files
AutomatR.Nanonets.Activities.GetAllPredictionFiles
The "Get All Prediction Files" activity in AutomatR is part of the Nanonets OCR Predict activities package, allowing you to perform OCR prediction on an image using the Nanonets OCR model. This activity retrieves detailed information about the prediction files generated by the specified OCR model within a specified date range.
Properties
​
Name
Description
Input
Model ID
Specifies the ID of the OCR model to use for prediction. String variables containing the model ID.
Start Date
Specifies the start date for retrieving prediction files in DD-MM-YYYY format. DateTime variables containing the start date.
End Date
Specifies the end date for retrieving prediction files in DD-MM-YYYY format. DateTime variables containing the end date.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Prediction Files" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the OCR model based on the provided image. The result is provided in the form of a class (
GetAllPredictionFilesProperties
) containing information about the prediction files. Variables of type class to store the response details.
How to use:
Drag and drop the "Get All Prediction Files" activity onto the workflow.
Configure the properties by specifying the model ID, start date, and end date for retrieving prediction files.
Optionally, configure the delay.
Execute the workflow to perform OCR prediction and retrieve detailed information about the prediction files.
Example:

Consider an example where the "Get All Prediction Files" activity is used to retrieve prediction files generated by an OCR model:
Get All Prediction Files:
  Model ID: "your_model_id"
  Start Date: 01-01-2023
  End Date: 31-01-2023
  Delay: 3
  Response: predictionFilesDetails
In this example, the activity retrieves detailed information about prediction files generated by the OCR model with a delay of 3 seconds. The response details are stored in the variable "predictionFilesDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Prediction For Image URL/index.html

Prediction For Image URL
AutomatR.Nanonets.Activities.PredictionForImageURL
The "Prediction For Image URL" activity in AutomatR is part of the Nanonets OCR activities package, facilitating OCR predictions on an image using the Nanonets OCR model. This activity is designed for processing images from URLs, enhancing automation processes involving optical character recognition.
Properties
​
Name
Description
Input
Model ID
The ID of the Nanonets OCR model to use for prediction. String variables containing the Nanonets OCR model ID.
Image URL
The image URL of the image on which predictions will be made. String variables containing the image URL.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Prediction For Image URL" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the Nanonets OCR model based on the provided image URL. Variables of type 
ResultPredictionForImageFile[]
 to store the OCR prediction results.
How to use:
Drag and drop the "Prediction For Image URL" activity onto the workflow.
Configure the properties by specifying the Nanonets OCR model ID and the image URL for OCR predictions.
Optionally, configure the delay.
Execute the workflow to perform OCR predictions on the specified image URL using the Nanonets OCR model.
Access the detailed OCR prediction results from the output variable "Response" for further processing in the workflow.
Example:

Consider an example where the "Prediction For Image URL" activity is used to predict text from an image URL "
https://example.com/document.jpg"
 using the Nanonets OCR model with the ID "xyz123" and a delay of 2 seconds:
Prediction For Image URL:
  Display Name: "OCR Prediction URL"
  Model ID: "xyz123"
  Image URL: "https://example.com/document.jpg"
  Delay: 2
  Response: ocrPredictionResultsURL
In this example, the activity performs OCR predictions on the image URL "
https://example.com/document.jpg"
 using the Nanonets OCR model with the ID "xyz123". The detailed OCR prediction results are stored in the variable "ocrPredictionResultsURL" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Asyc Prediction For Image File/index.html

Async Prediction For Image File
AutomatR.Nanonets.Activities.AsyncPredictionForImageFile
The "Async Prediction For Image File" activity in AutomatR is part of the Nanonets OCR activities package, facilitating Optical Character Recognition (OCR) predictions on an image using the Nanonets OCR model. This activity allows you to perform asynchronous predictions, enabling you to upload an image for processing and query the results with a unique ID at a later point in time.
Properties
​
Name
Description
Input
Async
Specifies whether you want to perform asynchronous processing. Enter either (true) or (false). String variables containing the value "true" or "false".
Image Path
Specifies the file path of the image for which OCR predictions will be made. String variables containing the image file path.
Model ID
The ID of the Nanonets OCR model to use for prediction. String variables containing the model ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Async Prediction For Image File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the Nanonets OCR model based on the provided image. The response includes properties related to asynchronous prediction for image files. Variables of type 
AsyncPredictionForImageFileProperties
 to store the response.
How to use:
Drag and drop the "Async Prediction For Image File" activity onto the workflow.
Configure the properties by specifying the model ID, image file path, and whether to perform asynchronous processing.
Optionally, configure the delay.
Execute the workflow to perform OCR predictions on the specified image using the Nanonets OCR model asynchronously.
Example:

Consider an example where the "Async Prediction For Image File" activity is used to perform OCR predictions on an image named "example.jpg" using the Nanonets OCR model:
Async Prediction For Image File:
  Model ID: "your_model_id"
  Image Path: "C:\Images\example.jpg"
  Async: "true"
  Response: OCRResponse
In this example, the activity uploads the "example.jpg" image for asynchronous processing using the specified Nanonets OCR model. The detailed response generated by the model is stored in the variable "OCRResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Get Prediction File By File ID/index.html

Get Prediction File By File ID
AutomatR.Nanonets.Activities.GetPredictionFileByFileID
The "Get Prediction File By File ID" activity in AutomatR is part of the Nanonets OCR PREDICT activities package, allowing users to retrieve prediction results for a specific file using the Nanonets OCR model. This activity facilitates seamless integration with Nanonets services for efficient handling of OCR predictions.
Properties
​
Name
Description
Input
Model ID
The ID of the Nanonets OCR model used for prediction. String variables containing the Model ID.
Request File ID
The request file ID of the file received from the asynchronous prediction endpoint. String variables containing the request file ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Prediction File By File ID" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the Nanonets OCR model based on the provided file. The data type is 
GetPredictionFileByFileIDProperties
. Variables of type 
GetPredictionFileByFileIDProperties
 to store the prediction details.
How to use:
Drag and drop the "Get Prediction File By File ID" activity onto the workflow.
Configure the properties by specifying the Model ID and Request File ID for the Nanonets OCR model.
Optionally, configure the delay.
Execute the workflow to retrieve detailed prediction results for the specified file using the Nanonets OCR model.
Example:

Consider an example where the "Get Prediction File By File ID" activity is used to retrieve prediction results for a file with the Model ID "789" and Request File ID "ABCDE123":
Get Prediction File By File ID:
  Model ID: "789"
  Request File ID: "ABCDE123"
  Delay: 3
  Response: predictionDetails
In this example, the activity retrieves detailed prediction results for the file associated with the Model ID "789" and Request File ID "ABCDE123" with a delay of 3 seconds. The detailed results are stored in the variable "predictionDetails" of type 
GetPredictionFileByFileIDProperties
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Nanonets/OCR Predict/Prediction For Image File/index.html

Prediction For Image File
AutomatR.Nanonets.Activities.PredictionForImageFile
The "Prediction For Image File" activity in AutomatR is part of the Nanonets OCR activities package, allowing users to perform OCR predictions on an image using the Nanonets OCR model. This activity aids in extracting text and information from images, enhancing automation processes involving optical character recognition.
Properties
​
Name
Description
Input
Model ID
The ID of the Nanonets OCR model to use for prediction. String variables containing the Nanonets OCR model ID.
Image Path
The file path of the image on which predictions will be made. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Prediction For Image File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the detailed response generated by the Nanonets OCR model based on the provided image. Variables of type 
ResultPredictionForImageFile[]
 to store the OCR prediction results.
How to use:
Drag and drop the "Prediction For Image File" activity onto the workflow.
Configure the properties by specifying the Nanonets OCR model ID and the file path of the image for OCR predictions.
Optionally, configure the delay.
Execute the workflow to perform OCR predictions on the specified image using the Nanonets OCR model.
Access the detailed OCR prediction results from the output variable "Response" for further processing in the workflow.
Example:

Consider an example where the "Prediction For Image File" activity is used to predict text from an image file named "document.jpg" using the Nanonets OCR model with the ID "xyz123" and a delay of 2 seconds:
Prediction For Image File:
  Display Name: "OCR Prediction"
  Model ID: "xyz123"
  Image Path: "C:\Images\document.jpg"
  Delay: 2
  Response: ocrPredictionResults
In this example, the activity performs OCR predictions on the image file "document.jpg" using the Nanonets OCR model with the ID "xyz123". The detailed OCR prediction results are stored in the variable "ocrPredictionResults" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Rename Sheet/index.html

Rename Sheet
AutomatR.GoogleSheets.Activities.RenameSheet
The "Rename Sheet" activity in AutomatR is part of the Google Sheets activities package, designed to rename a specified sheet within a Google spreadsheet. This activity simplifies the process of managing sheet names in Google Sheets, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
New Sheet Name
Specifies the new name for the sheet. String variables containing the desired new sheet name.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Rename Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Rename Sheet" operation, indicating whether the sheet renaming was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Rename Sheet" activity onto the workflow.
Configure the properties by specifying the new sheet name.
Optionally, configure the delay.
Place the "Rename Sheet" activity within a "Google Sheets App Scope" to ensure proper authentication and access to the Google Sheets service.
Execute the workflow to rename the specified sheet in the Google spreadsheet.
Example:

Consider an example where the "Rename Sheet" activity is used to rename a sheet named "Sheet1" to "Expenses" within a Google spreadsheet:
Rename Sheet:
  New Sheet Name: "Expenses"
  Delay: 1
  Result: isRenameSuccessful
In this example, the activity renames the sheet from "Sheet1" to "Expenses." The result of the operation (success or failure) is stored in the Boolean variable "isRenameSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Download File/index.html

Download File
AutomatR.GoogleSheets.Activities.DownloadFile
The "Download File" activity in AutomatR for Google Sheets allows the user to download a file from their instance of Google Sheets. This activity simplifies the process of retrieving spreadsheet content and saving it locally in desired file formats.
Properties
​
Name
Description
Input
Download As File
Specifies the type of file to save as: Excel Workbook (.xlsx) or PDF document (.pdf). String variables containing the file type.
Download Path
Specifies the local path where the file will be saved. Ensure that the path is correct and accessible. String variables containing the local path.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to Use
​
Drag and drop the "Download File" activity onto the workflow.
Configure the properties by specifying the delay, file type, and local download path.
Execute the workflow to download the specified file from the Google Sheets instance.
Example
​
Consider an example where the "Download File" activity is used to download a sheet named "SalesData" from a Google spreadsheet in PDF format and save it locally:
Download File:
  Display Name: "Download SalesData PDF"
  Delay: 2
  Download As File: "SalesData.pdf"
  Download Path: "C:\Downloads\"
In this example, the activity downloads the "SalesData" sheet in PDF format and saves it as "SalesData.pdf" in the "C:\Downloads\" local path after a delay of 2 seconds.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Read Cell/index.html

Read Cell
AutomatR.GoogleSheets.Activities.ReadCell
The "Read Cell" activity in AutomatR is part of the Google Sheets activities package, designed to read the value from a specified cell in a Google spreadsheet. This activity streamlines the process of retrieving cell values, enhancing the efficiency of automation workflows involving Google Sheets.
Properties
​
Name
Description
Input
Cell Address
Specifies the cell location on the spreadsheet to read (e.g., A1). String variables containing the cell address.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Cell" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Cell Value
Outputs the value or content of the specified cell. String variables to store the cell value.
How to use:
Drag and drop the "Read Cell" activity onto the workflow.
Configure the properties by specifying the cell address on the spreadsheet to read and optional settings like Delay.
Place the "Read Cell" activity within a "Google Sheets App Scope" to ensure proper authentication and access to the Google Sheets service.
Execute the workflow to retrieve the value from the specified cell in the Google spreadsheet.
Example:

Consider an example where the "Read Cell" activity is used to read the value from cell B2 in a Google Sheet named "Expense Sheet":
Read Cell:
  Cell Address: "B2"
  Delay: 1
  Cell Value: cellContent
In this example, the activity reads the content of cell B2 in the "Expense Sheet" and stores the result in the string variable "cellContent" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Write Range/index.html

Write Range
AutomatR.GoogleSheets.Activities.WriteRange
The "Write Range" activity in AutomatR is part of the Google Sheets activities package, tailored for seamless integration with Google Sheets. This custom activity enables you to write data from a DataTable to a specific range in a Google Sheets spreadsheet. This feature facilitates the efficient transfer of structured data from your workflow to Google Sheets.
Properties
​
Name
Description
Input
Starting Cell
Specifies the cell value from which the data writing should begin. Default value is "A1". String variables containing the starting cell value.
Data Table
Specifies the DataTable containing the data to be written to the spreadsheet. DataTable variables containing the data to be transferred.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Write Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Header
When enabled, considers the column headers as the first row in the specified cell range. Boolean variables controlling the inclusion of headers.
Output
Result
Outputs the range in the spreadsheet that has been modified due to the activity. For example, "A1:L32". String variables to store the modified range information.
How to use:
Drag and drop the "Write Range" activity onto the workflow.
Configure the properties by specifying the starting cell, data table, and optionally set a delay or include headers.
Place the "Write Range" activity within a "Google Sheets App Scope" to ensure proper authentication and access to the Google Sheets service.
Execute the workflow to write the data from the specified DataTable to the designated range in the Google Sheets spreadsheet.
Example:

Consider an example where the "Write Range" activity is used to write data from a DataTable named "EmployeeData" starting from cell "A1" in a Google Sheets spreadsheet:
Write Range:
  Starting Cell: "A1"
  Data Table: EmployeeData
  Header: True
  Delay: 1
  Result: ModifiedRange
In this example, the activity writes data from the "EmployeeData" DataTable to the Google Sheets spreadsheet starting from cell "A1". Headers are included, and the modified range information is stored in the string variable "ModifiedRange" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Read Range/index.html

Read Range
AutomatR.GoogleSheets.Activities.ReadRange
The "Read Range" activity in AutomatR is part of the Google Sheets activities package, designed to read the contents of a specified range in a Google spreadsheet and convert it to a DataTable. This activity streamlines the process of extracting structured data from Google Sheets, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Range
Specifies the range of cells that you want to read. String variables containing the cell range (e.g., "A1:B5").
Include Headers
When enabled, considers the first row as headers in the mentioned range of cells. Boolean variables indicating whether to include headers.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the data extracted from the specified range in a DataTable variable. DataTable variables to store the extracted data.
How to use:
Drag and drop the "Read Range" activity onto the workflow.
Configure the properties by specifying the range of cells to read, whether to include headers, and optional settings like Delay.
Place the "Read Range" activity within a "Google Sheets App Scope" to ensure proper authentication and access to the Google Sheets service.
Execute the workflow to retrieve data from the specified range in the Google spreadsheet.
Example:

Consider an example where the "Read Range" activity is used to read data from cells A1 to B5 in a Google Sheet named "Expense Sheet" and includes headers:
Read Range:
  Range: "A1:B5"
  Include Headers: true
  Delay: 1
  Result: dataTable
In this example, the activity reads data from the specified range, considering the first row as headers, and stores the result in the DataTable variable "dataTable" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Copy Sheet/index.html

Copy Sheet
AutomatR.GoogleSheets.Activities.CopySheet
The "Copy Sheet" activity in AutomatR for Google Sheets facilitates the copying of a sheet from one spreadsheet and pasting it into the same spreadsheet or a different spreadsheet. This activity provides an efficient way to duplicate sheet content, whether within the same document or across different documents in Google Sheets.
Properties
​
Name
Description
Input
New Sheet Name
Specifies the name for the new sheet where the copied cells of the source sheet will be pasted. String variables containing the desired new sheet name.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to Use
​
Drag and drop the "Copy Sheet" activity onto the workflow.
Configure the properties by specifying the new sheet name for pasting the copied cells.
Optionally, configure the delay and customize the display name.
Execute the workflow to copy the sheet's content to the specified new sheet within the same or a different spreadsheet.
Example
​
Consider an example where the "Copy Sheet" activity is used to copy a sheet named "DataSheet" from the current spreadsheet to a new sheet named "DataBackup":
Copy Sheet:
  Display Name: "Backup Data Sheet"
  New Sheet Name: "DataBackup"
  Delay: 2
In this example, the activity copies the contents of the "DataSheet" to a new sheet named "DataBackup." The delay is set to 2 seconds to allow for proper synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Google Sheets App Scope/index.html

Google Sheets App Scope
AutomatR.GoogleSheets.Activities.GoogleSheetsAppScope
The "Google Sheets App Scope" activity in AutomatR allows you to access a Google Sheet user account based on API Auth keys or OAuth mechanism. This activity serves as a container for other Google Sheets activities, providing the necessary authentication and authorization to perform actions on a specified Google Sheet.
Properties
​
Name
Description
Input
Application Name
Specifies the name of the Google Sheet on which the user needs to work. String variables containing the Google Sheet name.
Spread Sheet ID
Specifies the encrypted format of the spreadsheet ID (e.g., captured from the Google Sheets URL). String variables containing the spreadsheet ID.
Sheet Name
Specifies the name of the spreadsheet on which the user needs to work. String variables containing the spreadsheet name.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Google Sheets App Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Refresh Token
Allows browsing for the refresh token and selecting the email ID associated with your Google Sheets account. This enables the capture of the API token required to access your Google Sheets account.
Client ID
Specifies the client ID for your Google Sheets user's account. String variables containing the client ID.
Client Secret Key
Specifies the client secret key for your Google Sheets user's account. String variables containing the client secret key.
Output
Google Sheet Scope
Outputs the authenticated SheetsService object, which can be used in subsequent Google Sheets activities. Variables of type SheetsService to store the authenticated service.
Note:
 The "Google Sheets App Scope" activity requires either the combination of Client ID and Client Secret Key or the Refresh Token. Please provide Client ID & Client Secret Key or only Refresh Token.
How to use:
Drag and drop the "Google Sheets App Scope" activity onto the workflow.
Configure the properties by specifying the Application Name, Spread Sheet ID, Sheet Name, and optional settings like Delay, Refresh Token, Client ID, and Client Secret Key.
Drop other Google Sheets activities into the "Google Sheets App Scope" container to perform specific actions on the specified Google Sheet.
Execute the workflow to perform the desired actions on the Google Sheet.
Example:

Consider an example where the "Google Sheets App Scope" activity is used to access a Google Sheet named "Expense Sheet" with the spreadsheet ID "abc123456def" and the sheet name "Monthly Expenses":
Google Sheets App Scope:
  Application Name: "Expense Sheet"
  Spread Sheet ID: "abc123456def"
  Sheet Name: "Monthly Expenses"
  Delay: 1
  Refresh Token: {your_refresh_token}
  Client ID: {your_client_id}
  Client Secret Key: {your_client_secret}
  Google Sheet Scope: googleSheetsService
In this example, the activity authenticates the user, validates the specified Google Sheet, and provides the authenticated service (googleSheetsService) for use in subsequent Google Sheets activities within the scope.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Add New Sheet/index.html

Add New Sheet
AutomatR.GoogleSheets.Activities.AddNewSheet
The "Add New Sheet" activity in AutomatR facilitates the addition of a new sheet inside a specified Google spreadsheet. This activity is part of the Google Sheets activities package, allowing users to dynamically manage sheets within their Google Sheets documents.
Properties
​
Name
Description
Input
New Sheet Name
Specifies the name of the new sheet to be added to the Google spreadsheet. String variables containing the desired sheet name.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add New Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Add New Sheet" operation, indicating whether the new sheet addition was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Add New Sheet" activity onto the workflow.
Configure the properties by specifying the new sheet name.
Optionally, configure the delay and customize the display name.
Execute the workflow to add a new sheet to the specified Google spreadsheet.
Example
​
Consider an example where the "Add New Sheet" activity is used to add a sheet named "Monthly Expenses" to an existing Google spreadsheet:
Add New Sheet:
  Display Name: "Add Monthly Expenses Sheet"
  New Sheet Name: "Monthly Expenses"
  Result: isAdditionSuccessful
In this example, the activity adds a new sheet named "Monthly Expenses" to the Google spreadsheet. The result of the operation (success or failure) is stored in the Boolean variable "isAdditionSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Delete Sheet/index.html

Delete Sheet
AutomatR.GoogleSheets.Activities.DeleteSheet
The "Delete Sheet" activity in AutomatR for Google Sheets allows the deletion of a specified sheet from a Google spreadsheet. This activity facilitates the removal of unwanted sheets, providing efficient management of spreadsheet content in automation workflows.
Properties
​
Name
Description
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to Use
​
Drag and drop the "Delete Sheet" activity onto the workflow.
Configure the properties by specifying the delay and customize the display name.
Execute the workflow to delete the specified sheet from the Google spreadsheet.
Example
​
Consider an example where the "Delete Sheet" activity is used to delete a sheet named "UnusedSheet" from a Google spreadsheet:
Delete Sheet:
  Display Name: "Remove Unused Sheet"
  Delay: 2
In this example, the activity deletes the sheet named "UnusedSheet" after a delay of 2 seconds, allowing for proper synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Write Cell/index.html

Write Cell
AutomatR.GoogleSheets.Activities.WriteCell
The "Write Cell" activity in AutomatR is part of the Google Sheets activities package, designed to write a specified value into a cell within a Google spreadsheet. This activity simplifies the process of updating cell values in Google Sheets, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Cell Address
Specifies the cell location on the spreadsheet where the value should be written (e.g., A1). String variables containing the cell address.
Value
Specifies the content that should be written into the specified cell. String variables containing the content to be written.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Write Cell" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Write Cell" operation, indicating whether the cell write was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Write Cell" activity onto the workflow.
Configure the properties by specifying the cell address and the value to be written.
Optionally, configure the delay.
Place the "Write Cell" activity within a "Google Sheets App Scope" to ensure proper authentication and access to the Google Sheets service.
Execute the workflow to write the specified value into the designated cell in the Google spreadsheet.
Example:

Consider an example where the "Write Cell" activity is used to write the value "100" into cell "A1" within a Google spreadsheet:
Write Cell:
  Cell Address: "A1"
  Value: "100"
  Delay: 1
  Result: isWriteSuccessful
In this example, the activity writes the value "100" into cell "A1" of the Google spreadsheet. The result of the operation (success or failure) is stored in the Boolean variable "isWriteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Delete Range/index.html

Delete Range
AutomatR.GoogleSheets.Activities.DeleteRange
The "Delete Range" activity in AutomatR for Google Sheets allows the deletion of values in a specified range of cells and shifts the remaining cells up or left. This activity provides a powerful capability to clear specific cell ranges within a Google Sheets document, enhancing data manipulation in automation workflows.
Properties
​
Name
Description
Input
Range
Specifies the range of cells that need to be deleted. String variables containing the desired cell range (e.g., "A1:B5").
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to Use
​
Drag and drop the "Delete Range" activity onto the workflow.
Configure the properties by specifying the range of cells to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the values within the specified cell range in Google Sheets.
Example
​
Consider an example where the "Delete Range" activity is used to clear values in cells A1 to B5 in a sheet named "DataSheet":
Delete Range:
  Display Name: "Clear Data Range"
  Range: "A1:B5"
  Delay: 2
In this example, the activity clears the values in the specified range ("A1:B5"). The delay is set to 2 seconds to allow for proper synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Clear Range/index.html

Clear Range
AutomatR.GoogleSheets.Activities.ClearRange
The "Clear Range" activity in AutomatR for Google Sheets allows users to clear the values within a specified range of cells in a Google Sheet. This activity aids in the efficient management of data by providing the capability to remove existing values within the designated range.
Properties
​
Name
Description
Input
Range
Specifies the range of cells that need to be cleared in the Google Sheet. String variables containing the cell range, such as "A1:B5".
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Clear Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
The "Clear Range" activity does not have specific output properties. However, it visually represents the success or failure of the clearing operation within the workflow.
How to Use
​
Drag and drop the "Clear Range" activity onto the workflow.
Configure the properties by specifying the range of cells to be cleared in the Google Sheet.
Optionally, configure the delay and customize the display name.
Execute the workflow to clear the values within the specified range of cells in the Google Sheet.
Example
​
Consider an example where the "Clear Range" activity is used to clear values in the range "A1:B5" of a Google Sheet:
Clear Range:
  Display Name: "Clear Data"
  Range: "A1:B5"
  Delay: 2
In this example, the activity clears the values within the range "A1:B5" of the Google Sheet. The delay is set to 2 seconds to allow for proper synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Sheets/Batch Update Values/index.html

Batch Update Values
AutomatR.GoogleSheets.Activities.BatchUpdateValues
The "Batch Update Values" activity in AutomatR for Google Sheets enables users to send a single batch update that includes values from multiple Google Sheet activities. It provides a convenient way to make multiple changes to a single spreadsheet within a specified sheet.
Properties
​
Name
Description
Input
Sheet Name
Specifies the name of the sheet within the Google spreadsheet where values will be updated. String variables containing the desired sheet name.
Spreadsheet File Name
If not already existent, specifies the spreadsheet file to open or create. String variables containing the spreadsheet file name.
Batch Update Scope
Represents the file ID opened or created by the activity. Input argument of type 
SheetsService
 to carry the batch update scope.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Batch Update Values" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
The "Batch Update Values" activity does not have specific output properties. However, it can provide an overall result of the batch update process through a visual representation of successful execution or encountered errors within the workflow.
How to Use
​
Drag and drop the "Batch Update Values" activity onto the workflow.
Configure the properties by specifying the sheet name, spreadsheet file name, and batch update scope.
Optionally, configure the delay and customize the display name.
Add multiple Google Sheet activities inside the "Batch Update Values" activity to include them in the batch update process.
Execute the workflow to perform a batch update of values in the specified sheet of the Google spreadsheet.
Example
​
Consider an example where the "Batch Update Values" activity is used to update values in the "Expenses" sheet of a Google spreadsheet:
Batch Update Values:
  Display Name: "Update Expenses"
  Sheet Name: "Expenses"
  Spreadsheet File Name: "MyExpenseSheet"
  Batch Update Scope: GoogleSheetsService
  Delay: 2
In this example, the activity updates values in the "Expenses" sheet of the "MyExpenseSheet" Google spreadsheet. The delay is set to 2 seconds to allow for proper synchronization. Additional Google Sheet activities can be added inside the "Batch Update Values" scope to include them in the batch update process.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Get File Info/index.html

Get File Info
AutomatR.DefaultActivities.FileAndFolder.GetFileInfo
The "Get File Info" activity in AutomatR is designed to fetch information about a specified file on the local drive. This activity is part of the File and Folder activities package, providing users with details such as file size, name, last modified timestamp, etc.
Properties
​
Name
Description
Input
File Path
Specifies the full path of the file on the local drive for which information is needed. String variables containing the file path or the result of a file selection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get File Info" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
File Info
Outputs the file information as a 
FileInfo
 object. The 
FileInfo
 object contains details such as size, name, last modified timestamp, etc. Variables of type 
FileInfo
 to store the file information.
How to use:
Drag and drop the "Get File Info" activity onto the workflow.
Configure the properties by specifying the file path for which information is needed.
Optionally, configure the delay.
Execute the workflow to retrieve information about the specified file.
Example:

Consider an example where the "Get File Info" activity is used to fetch information about a file named "file.txt" located in the "D:\getFileInfo\" directory:
Get File Info:
  File Path: "D:\getFileInfo\file.txt"
  Result: fileInfoResult
In this example, the activity fetches information about the "file.txt" file, and the result, including details like size, name, and last modified timestamp, is stored in the 
fileInfoResult
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Unzip/index.html

UnZip
AutomatR.DefaultActivities.FileAndFolder.Unzip
The "UnZip" activity in AutomatR allows you to unzip a specified zip file to the desired location. This activity is part of the File category and simplifies the process of extracting files from a zip archive, enhancing automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the full path of the folder on your local drive where the files from the zip archive should be extracted. String variables containing the folder path.
Zip Path
Specifies the full path of the zip file on your local drive that needs to be extracted. String variables containing the zip file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "UnZip" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "UnZip" activity onto the workflow.
Configure the properties by specifying the folder path where files should be extracted and the path of the zip file to be unzipped.
Optionally, configure the delay.
Execute the workflow to unzip the specified zip file to the desired location.
Example:

Consider an example where the "UnZip" activity is used to extract files from a zip file named "ziphere.zip" to the folder "C:\unzipping files\":
UnZip:
  Folder Path: "C:\unzipping files\"
  Zip Path: "C:\zipping Files\ziphere.zip"
In this example, the activity extracts the contents of "ziphere.zip" to the specified folder "C:\unzipping files\". Adjust the folder path and zip file path based on your requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Delete File/index.html

Delete File
AutomatR.DefaultActivities.FileAndFolder.DeleteFile
The "Delete File" activity in AutomatR allows you to remove a specified file from a designated location. This activity simplifies the process of deleting files within automation workflows, providing efficient file management capabilities.
Properties
​
Name
Description
Input
File Path
Enter the full path of the file on your local drive, including the filename, which needs to be deleted. Example: 
"C:\deleteit\unused.txt"
. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete File" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the full path of the file to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified file.
Example:

Consider an example where the "Delete File" activity is used to remove a file named "unused.txt" from the "C:\deleteit\" directory:
Delete File:
  Display Name: "Delete Unused File"
  File Path: "C:\deleteit\unused.txt"
In this example, the activity deletes the "unused.txt" file from the specified directory. If the file does not exist, an exception is raised. Adjust the file path as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Path Exist/index.html

Path Exist
AutomatR.DefaultActivities.FileAndFolder.PathExist
The "Path Exist" activity in AutomatR is designed to check whether a specified file or folder path exists on your local drive. This activity, falling under the File category, provides a simple way to verify the existence of a path within automation workflows.
Properties
​
Name
Description
Input
Path
Specifies the full path of the file or folder that needs to be verified for existence. String variables containing the path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Path Exist" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Exist
Outputs the result (true or false) based on the existence of the specified path. Boolean variables to store the existence status.
How to use:
Drag and drop the "Path Exist" activity onto the workflow.
Configure the properties by specifying the path to be checked for existence.
Optionally, configure the delay.
Execute the workflow to determine whether the specified path exists.
Example:

Consider an example where the "Path Exist" activity is used to check whether a file named "workbook.csv" exists in the "C:\sample files\" directory:
Path Exist:
  Path: "C:\sample files\workbook.csv"
  Exist: isPathExist
In this example, the activity checks for the existence of the "workbook.csv" file in the specified path. The result (true or false) is stored in the Boolean variable "isPathExist" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Move File/index.html

Move File
AutomatR.DefaultActivities.FileAndFolder.MoveFile
The "Move File" activity in AutomatR allows you to efficiently move a specified file from a source location to a destination location on your local drive. This activity is categorized under File activities and streamlines file management tasks, enhancing the automation workflow.
Properties
​
Name
Description
Input
Destination Path
Specifies the full path of the folder on your local drive where the file should be moved. String variables containing the destination folder path.
Overwrite
When selected, overwrites files in the destination path with the file being moved. Boolean variables to indicate whether overwriting is enabled.
Source Path
Specifies the full path of the file on your local drive, including the filename, that needs to be moved. String variables containing the source file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move File" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Move File" activity onto the workflow.
Configure the properties by specifying the source path, destination path, and optionally enabling overwrite if needed.
Optionally, configure the delay.
Execute the workflow to move the specified file to the destination folder.
Example:

Consider an example where the "Move File" activity is used to move a file named "data.csv" from one folder to another:
Move File:
  Source Path: "C:\DataFiles\data.csv"
  Destination Path: "C:\Archive"
  Overwrite: true
In this example, the activity moves the "data.csv" file from the "C:\DataFiles\" folder to the "C:\Archive\" folder. If a file with the same name exists in the destination folder, it is overwritten due to the Overwrite option being set to true.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Copy File/index.html

Copy File
AutomatR.DefaultActivities.FileAndFolder.CopyFile
The "Copy File" activity in AutomatR allows you to copy a file from one specified location to another. This activity is designed to streamline the file copying process, enhancing automation workflows that involve file management.
Properties
​
Name
Description
Input
Destination Folder
Specifies the destination folder path where the file should be copied. Enter the full path of the destination folder on your local drive, or use the browse option. Example: 
"D:\Destination\"
. String variables containing the destination folder path.
Overwrite
When selected, overwrites the files in the destination folder with the file that has to be copied. Boolean variables or arguments to control the overwrite behavior.
Source Path
Specifies the source path of the file to be copied. Enter the full path of the file on your local drive, or use the browse option. Example: 
"D:\CopyingFiles\copyfile.txt"
. String variables containing the source path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy File" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Copy File" activity onto the workflow.
Configure the properties by specifying the source path, destination folder, and optionally, set the overwrite behavior.
Optionally, configure the delay and customize the display name.
Execute the workflow to copy the specified file to the destination folder.
Example:

Consider an example where the "Copy File" activity is used to copy a file named "copyfile.txt" from one folder to another:
Copy File:
  Display Name: "Copy Document File"
  Source Path: "D:\CopyingFiles\copyfile.txt"
  Destination Folder: "D:\Destination\"
  Overwrite: True
In this example, the activity copies the "copyfile.txt" from the "CopyingFiles" directory to the "Destination" directory on the local drive. The overwrite option is set to true, indicating that existing files in the destination folder should be overwritten if they have the same name.

URL: https://docs.automatr.tech/docs/Products/Activities/File/File Exist/index.html

File Exist
AutomatR.DefaultActivities.FileAndFolder.FileExist
The "File Exist" activity in AutomatR is designed to verify whether a specified file exists at a given location. This activity helps streamline automation workflows by allowing users to check for the presence of a file before proceeding with subsequent actions.
Properties
​
Name
Description
Input
File Path
Enter the full path of the file on your local drive, including the filename, that needs to be verified for existence. Example: 
"C:\sample files\workbook.csv"
. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "File Exist" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Exist
Returns the result as either true or false based on the existence of the specified file. Boolean variables or arguments to store the result.
How to use:
Drag and drop the "File Exist" activity onto the workflow.
Configure the properties by specifying the full path of the file to be checked for existence.
Optionally, configure the delay and customize the display name.
Execute the workflow to check if the specified file exists.
Example:

Consider an example where the "File Exist" activity is used to check if a file named "workbook.csv" exists in the "C:\sample files\" directory:
File Exist:
  Display Name: "Check Workbook File"
  File Path: "C:\sample files\workbook.csv"
  Exist: isFileExist
In this example, the activity checks whether the "workbook.csv" file exists. The result of the check (true or false) is stored in the Boolean variable "isFileExist" for further handling in the workflow. Adjust the file path as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Rename File/index.html

Rename File
AutomatR.DefaultActivities.FileAndFolder.RenameFile
The "Rename File" activity in AutomatR allows you to rename a file using Microsoft APIs within your OneDrive account. This activity falls under the File category and provides a convenient way to rename files, enhancing file management capabilities in your automation workflows.
Properties
​
Name
Description
Input
File Path
Specifies the full path of the file on your local drive, including the filename that needs to be renamed. String variables containing the file path.
New File Name
Specifies the new name that you want to assign to the file after renaming. String variables containing the new file name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Rename File" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Rename File" activity onto the workflow.
Configure the properties by specifying the file path and the new file name.
Optionally, configure the delay.
Execute the workflow to rename the specified file in your OneDrive account.
Example:

Consider an example where the "Rename File" activity is used to rename a file named "workbook.csv" to "updated_workbook.csv" in the "C:\files\" directory:
Rename File:
  File Path: "C:\files\workbook.csv"
  New File Name: "updated_workbook.csv"
In this example, the activity renames the "workbook.csv" file to "updated_workbook.csv" in the specified path. Adjust the file path and new file name based on your requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Zip/index.html

Zip
AutomatR.DefaultActivities.FileAndFolder.Zip
The "Zip" activity in AutomatR facilitates adding a specified file or folder to a compressed file. This activity, categorized under File, simplifies the process of creating zip archives, enhancing automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the full path of the folder on your local drive that you want to zip. String variables containing the folder path.
Zip Path
Specifies the full path of the folder on your local drive where the compressed file should be created. If not provided, the zip file will be created in the same location as the source folder with the same name and a .zip extension. String variables containing the zip file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Zip" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Zip" activity onto the workflow.
Configure the properties by specifying the folder path you want to zip and the path where the zip file should be created.
Optionally, configure the delay.
Execute the workflow to create a zip file containing the specified folder or file.
Example:

Consider an example where the "Zip" activity is used to create a zip file named "zipfile.zip" containing the contents of the folder "C:\zipping files\":
Zip:
  Folder Path: "C:\zipping files\"
  Zip Path: "C:\zipping files\zipfile.zip"
In this example, the activity creates a zip file named "zipfile.zip" in the "C:\zipping files\" directory, containing the contents of the specified folder. Adjust the folder path and zip file path based on your requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Browse For File/index.html

Browse For File
AutomatR.DefaultActivities.FileAndFolder.BrowseForFile
The "Browse For File" activity in AutomatR facilitates opening a dialog box at runtime, allowing users to browse and select a file for use within the project. This activity is particularly useful when you need user input to dynamically determine the file path during workflow execution.
Properties
​
Name
Description
Input
Filter
Enter the filter based on which file selection will be done. For example, you can use filters like "
*
.
*
", "
*
.png", "
*
.txt", "
*
.docx", "XAML - 
*
.xaml", etc. This property allows users to narrow down the file types visible in the dialog.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Browse For File" activity. This can be useful for handling synchronization issues. Integer variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Select File
Outputs the full path of the selected file. String variable or argument to store the selected file path. If no file is selected or the dialog is canceled, an empty string is returned.
How to use:
Drag and drop the "Browse For File" activity onto the workflow.
Optionally, configure the delay and customize the display name.
Specify the filter to narrow down the types of files visible in the dialog.
Execute the workflow, and during runtime, the dialog will appear for the user to browse and select a file.
Example:

Consider an example where the "Browse For File" activity is used to allow the user to select a CSV file with a specific filter:
Browse For File:
  Display Name: "Select CSV File"
  Filter: "CSV Files (*.csv)|*.csv|All files (*.*)|*.*"
  Select File: selectedFilePath
In this example, the activity opens a dialog box with the specified filter, allowing the user to select a CSV file. The selected file path is stored in the string variable "selectedFilePath" for further use in the workflow. If the user cancels the dialog, the output variable will contain an empty string.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Append Zip File/index.html

Append Zip File
AutomatR.DefaultActivities.FileAndFolder.AppendZipFile
The "Append Zip File" activity in AutomatR allows you to add new files or folders to an existing zip file. This is particularly useful when you need to update or extend the content of a zip archive during workflow automation.
Properties
​
Name
Description
Input
File Path
Enter the full path of the file(s) on your local drive, including the filename, which needs to be zipped within the existing zip file. This property is part of the "Input" overload group.
Folder Path
Enter the full path of the folder on your local drive that needs to be zipped within the existing zip file. This property is part of the "Input" overload group.
Zip Path
Enter the full path of the zip file on your local drive where you want to append new files. This property is required.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append Zip File" activity. This can be useful for handling synchronization issues. Integer variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Append Zip File" activity onto the workflow.
Configure the properties by specifying the zip file path and either the file path or folder path to be appended.
Optionally, configure the delay and customize the display name.
Execute the workflow to append the specified files or folder to the existing zip file.
Example:

Consider an example where the "Append Zip File" activity is used to add new files and a folder to an existing zip file:
Append Zip File:
  Display Name: "Append Files to Archive"
  File Path: ["C:\Files\file1.txt", "C:\Files\file2.doc"]
  Zip Path: "C:\Archives\archive.zip"
In this example, the activity appends the specified files ("file1.txt" and "file2.doc") to the existing zip file located at "C:\Archives\archive.zip." The operation is performed without direct output, and the updated zip file can be reviewed for the appended content.

URL: https://docs.automatr.tech/docs/Products/Activities/File/Create File/index.html

Create File
AutomatR.DefaultActivities.FileAndFolder.CreateFile
The "Create File" activity in AutomatR allows you to generate a new file at a specified location. This activity simplifies the process of creating files within automation workflows, enhancing file management capabilities.
Properties
​
Name
Description
Input
File Name
Enter the name for the file to be created. This should be provided as a string. Example: 
"newfile.txt"
. String variables containing the desired file name.
File Path
Select the browse option or enter the path on your local drive where the new file is to be created. Example: 
"D:\CreateFile\newfile.txt"
. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create File" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Create File" activity onto the workflow.
Configure the properties by specifying the file path and name for the new file.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the specified file.
Example:

Consider an example where the "Create File" activity is used to generate a new file named "newfile.txt" in the "D:\CreateFile\" directory:
Create File:
  Display Name: "Create New File"
  File Path: "D:\CreateFile\"
  File Name: "newfile.txt"
In this example, the activity creates a new file named "newfile.txt" in the specified directory. If the file already exists, an exception is raised. Adjust the file path and name as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/File/For Each File/index.html

For Each File
AutomatR.DefaultActivities.FileAndFolder.ForEachFile
The "For Each File" activity in AutomatR enables users to perform a series of activities on each file within a specified folder. This activity streamlines file processing tasks, allowing for efficient automation workflows.
Properties
​
Name
Description
Input
Filter By
Specifies the desired file extension for filtering. For example, 
".docx"
. String variables containing the file extension. Default is 
"*.*"
 (all files).
In Folder
Specifies the complete path for the folder on which you wish to perform operations. String variables containing the folder path.
Include Subfolders
Indicates whether to expand the search to include all subfolders of the selected location. Accepts Boolean values. Boolean variables or arguments.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Variables
Represents the index of the current iteration within the "For Each File" loop. Integer variables or arguments to store the index value.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "For Each File" activity. Useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "For Each File" activity onto the workflow.
Configure the properties by specifying the folder path, file extension filter, and whether to include subfolders.
Optionally, configure the delay and customize the display name.
Define the series of activities to be performed on each file by adding activities within the Body container.
Execute the workflow to iterate through each file in the specified folder and perform the defined actions.
Example:

Consider an example where the "For Each File" activity is used to process all ".txt" files within the "D:\Data" directory:
For Each File:
  Display Name: "Process Text Files"
  In Folder: "D:\Data"
  Filter By: ".txt"
  Include Subfolders: True
  Body:
    - Read Text File
    - Extract Data
    - ...
In this example, the activity iterates through each ".txt" file in the "D:\Data" directory, executing a series of defined actions within the Body container for each file. Adjust the folder path, file extension filter, and actions as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Python/Run Script/index.html

Run Script
AutomatR.DefaultActivities.Python.RunScript
The "Run Script" activity in AutomatR enables the execution of a Python script using a specified Python interpreter. This versatile activity allows you to integrate Python scripts seamlessly into your automation workflows.
Properties
​
Name
Description
Input
Enter Method Parameters
Enter the parameters/arguments in the code file as an Enumerable object list up to 9. The path should be specified as follows: Example - D:/abc/xyz/. Enumerable object containing the parameters for the Python script.
Python File
Specifies the Python path with the script file to be executed. String variables containing the path to the Python script file.
Python Path
Specifies the full path of the Python interpreter to be used for executing the script. String variables containing the path to the Python interpreter.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Run Script" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Returns the output of the Python script execution as a string. String variables containing the result of the Python script execution.
How to use:
​
Drag and drop the "Run Script" activity onto the workflow.
Configure the properties by specifying the full path of the Python interpreter, the parameters for the Python script, and the path to the Python script file.
Optionally, set the delay for the execution.
Execute the workflow to run the specified Python script.
The output of the Python script execution is stored in the variable specified in the "Result" property.
Example:
​
Consider an example where the "Run Script" activity is used to execute a Python script that processes input files and generates output images:
Run Script:
  Display Name: "Process Input Files"
  Python Path: "C:/Python38/python.exe"
  Arguments: ["D:/InputFiles/", "D:/OutputImages/", "param3", ..., "param8"]
  Python File: "C:/Scripts/ProcessFiles.py"
  Result: scriptOutput
In this example, the activity executes the Python script located at "C:/Scripts/ProcessFiles.py" using the Python interpreter at "C:/Python38/python.exe". The input parameters for the script are specified in the "Arguments" property, and the output of the script is stored in the variable "scriptOutput" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Hash Text Key/index.html

Hash Text Key
AutomatR.DefaultActivities.Cryptography.HashTextKey
The "Hash Text Key" activity in AutomatR is part of the Cryptography activities package, providing functionality to hash a string with a specified algorithm and encoding format, utilizing a key for enhanced security. This activity is essential for scenarios where an additional key is required to strengthen the hash generation process.
Properties
​
Name
Description
Input
Algorithm
Selects the hash algorithm to be applied to the input text with the provided key. Choose from available options such as HMACMD5, HMACSHA1, HMACSHA256, HMACSHA384, and HMACSHA512. 
Enum
 variables containing the desired algorithm.
Text
Specifies the text to be hashed. This field only accepts strings and 
String
 variables.
Key
Specifies the key to be used for hashing the specified text. This field only accepts strings and 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Hash Text Key" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the hashed input stored as a hexadecimal string. 
String
 variables to store the hash result for utilization in subsequent activities.
How to use:
Drag and drop the "Hash Text Key" activity onto the workflow.
Configure the properties by selecting the hash algorithm, specifying the text to be hashed, and providing the key.
Optionally, configure the delay.
Execute the workflow to obtain the hash of the specified text using the chosen algorithm and key.
Example:

Consider an example where the "Hash Text Key" activity is used to hash a text string "SensitiveData123" using the HMACSHA256 algorithm and a secret key:
Hash Text Key:
  Algorithm: HMACSHA256
  Text: "SensitiveData123"
  Key: "SecretKey123"
  Result: hashedResult
In this example, the activity applies the HMACSHA256 algorithm with the specified key to hash the text "SensitiveData123," and the resulting hash is stored in the string variable "hashedResult" for further use in the workflow.
Supported Hash Algorithms
​
HMACMD5:
 Produces a 32-character hexadecimal hash using HMACMD5.
HMACSHA1:
 Results in a 40-character hexadecimal hash using HMACSHA1.
HMACSHA256:
 Produces a 64-character hexadecimal hash using HMACSHA256.
HMACSHA384:
 Generates a 96-character hexadecimal hash using HMACSHA384.
HMACSHA512:
 Results in a 128-character hexadecimal hash using HMACSHA512.
Note:
The activity is designed to support HMAC-based algorithms, providing an additional layer of security by utilizing a key during the hash generation process.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Encrypt File/index.html

Encrypt File
 
AutomatR.DefaultActivities.Cryptography.EncryptFile
The "Encrypt File" activity in AutomatR is part of the Cryptography activities package, enabling automation processes to encrypt files using various encryption algorithms. This activity provides a secure way to protect sensitive information within files.
Name
Description
Input
Algorithm
Specifies the cryptographic algorithm to be used for encryption. Options include 
AES
 (Advanced Encryption Standard), 
DES
 (Data Encryption Standard), 
Triple DES
, 
AESGCM
 (AES Galois/Counter Mode), 
RC2
, and 
Rijndael
. Supports a 
CryptographyAlgorithm enumeration
 variable.
File Path
Specifies the path of the file that you want to encrypt. Supports a 
string
 variable.
Key
Specifies the encryption key to be used. The key should be kept confidential and used for decryption later. Supports a 
SecureString
 variable.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Output Path
Specifies the path where the encrypted file will be saved. It supports a 
string
 variable, allowing you to define the destination path dynamically.
How to use:
Drag and drop the "Encrypt File" activity onto the workflow.
Configure the properties by specifying the encryption algorithm, key, file path, and output path.
Optionally, configure the delay.
Execute the workflow to encrypt the specified file using the chosen algorithm and key.
Example:

Consider an example where the "Encrypt File" activity is used to encrypt a file named "document.txt" using the AES algorithm:
Encrypt File:
  Algorithm: AES
  Key: "MySecretKey123"
  File Path: "C:\Files\document.txt"
  Output Path: "C:\EncryptedFiles\document_encrypted.txt"
  Result: isEncryptionSuccessful
In this example, the activity encrypts the "document.txt" file using the specified AES algorithm and key. The result of the operation (success or failure) is stored in the Boolean variable "isEncryptionSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Hash Text/index.html

Hash Text
AutomatR.DefaultActivities.Cryptography.HashText
The "Hash Text" activity in AutomatR is part of the Cryptography activities package, providing functionality to apply a specified algorithm to hash a string and obtain the resulting hash as a hexadecimal string representation. This activity enhances security measures by allowing users to hash sensitive information for various purposes within automation workflows.
Properties
​
Name
Description
Input
Algorithm
Selects the hash algorithm to be applied to the input text. Choose from available options such as MD5, RIPEMD160, SHA1, SHA256, SHA384, and SHA512. 
Enum
 variables containing the desired algorithm.
Text
Specifies the text to be hashed. This field only accepts strings and 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Hash Text" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the hashed input stored as a hexadecimal string. 
String
 variables to store the hash result for utilization in subsequent activities.
How to use:
Drag and drop the "Hash Text" activity onto the workflow.
Configure the properties by selecting the hash algorithm and specifying the text to be hashed.
Optionally, configure the delay.
Execute the workflow to obtain the hash of the specified text using the chosen algorithm.
Example:

Consider an example where the "Hash Text" activity is used to hash a text string "SensitiveData123" using the SHA256 algorithm:
Hash Text:
  Algorithm: SHA256
  Text: "SensitiveData123"
  Result: hashedResult
In this example, the activity applies the SHA256 algorithm to hash the text "SensitiveData123," and the resulting hash is stored in the string variable "hashedResult" for further use in the workflow.
Note:
The activity supports various hash algorithms, allowing users to choose the most suitable one for their security and hashing requirements.
Supported Hash Algorithms
​
MD5:
 Produces a 32-character hexadecimal hash.
RIPEMD160:
 Generates a 40-character hexadecimal hash.
SHA1:
 Results in a 40-character hexadecimal hash.
SHA256:
 Produces a 64-character hexadecimal hash.
SHA384:
 Generates a 96-character hexadecimal hash.
SHA512:
 Results in a 128-character hexadecimal hash.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Decrypt Text/index.html

Decrypt Text
The "Decrypt Text" activity in AutomatR is part of the Cryptography activities package, enabling automation processes to decrypt text using various algorithms and key specifications. This activity enhances the security and privacy of sensitive information within automation workflows.
Name
Description
Input
Algorithm
Selects the decryption algorithm to be used. The dropdown menu provides options such as AES, TripleDES, DES, AESGCM, RC2, and Rijndael.
Key
Provides the key necessary for decrypting the specified text. 
String
 variables containing the decryption key.
Text
Specifies the text to be decrypted. Only 
string
 variables or direct string input are accepted.
Misc
Display Name
Customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Decrypt Text" activity. Useful for handling synchronization issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Output
Result
Outputs the decrypted text stored in a 
string
 variable for utilization in subsequent activities.
How to use:
Drag and drop the "Decrypt Text" activity onto the workflow.
Configure the properties by selecting the decryption algorithm, providing the decryption key, and specifying the text to be decrypted.
Optionally, configure the delay and customize the display name.
Execute the workflow to decrypt the specified text using the chosen algorithm and key.
Example:

Consider an example where the "Decrypt Text" activity is used to decrypt an AES-encrypted text:
Decrypt Text:
  Display Name: "Decrypt AES Text"
  Algorithm: AES
  Key: "SecretKey123"
  Text: "EncryptedTextToDecrypt"
  Result: DecryptedText
In this example, the activity decrypts the specified text using the AES algorithm and the provided key. The decrypted text is stored in the variable "DecryptedText" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Decrypt File/index.html

Decrypt File
AutomatR.DefaultActivities.Cryptography.DecryptFile
The "Decrypt File" activity in AutomatR is part of the Cryptography activities package, enabling users to decrypt a file using a specified key encoding and algorithm. This activity supports various decryption algorithms, including AES, TripleDES, DES, AESGCM, RC2, and Rijndael.
Properties
​
Name
Description
Input
Algorithm
Specifies the decryption algorithm to use. The drop-down menu provides options such as AES, TripleDES, DES, AESGCM, RC2, and Rijndael.
File Path
Specifies the full path of the file to decrypt. 
String
 variables containing the file path.
Key
Specifies the key to use for decrypting the specified file. 
String
 variables containing the decryption key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Output Path
Specifies the path where the decrypted file will be saved. It supports a 
string
 variable, allowing you to define the destination path dynamically.
Example
Decrypt File:
  Algorithm: "AES"
  Key: "myEncryptionKey"
  File Path: "C:\EncryptedFiles\encrypted.txt"
  Output Path: "C:\DecryptedFiles\decrypted.txt"
  Delay: 5
How to use:
Drag and drop the "Decrypt File" activity onto the workflow.
Select the decryption algorithm from the dropdown list (AES, TripleDES, DES, AESGCM, RC2, or Rijndael).
Configure the properties by specifying the decryption key, file path, and output path.
Optionally, configure the delay and customize the display name.
Execute the workflow to decrypt the specified file.
Note:
The activity supports various decryption algorithms, and the specific algorithm is chosen based on the selected option in the "Algorithm" property.
The decrypted file is saved to the specified output path.
Exception Handling:
The activity handles cryptographic exceptions and other potential errors that might occur during the decryption process.
If an error occurs, the activity outputs relevant information to aid in troubleshooting.
Supported Algorithms:
AES (Advanced Encryption Standard)
TripleDES (Triple Data Encryption Standard)
DES (Data Encryption Standard)
AESGCM (AES Galois/Counter Mode)
RC2 (Rivest Cipher 2)
Rijndael
Example:

Consider an example where the "Decrypt File" activity is used to decrypt an AES-encrypted file named "encrypted.txt" and save the decrypted content to "decrypted.txt":
Decrypt File:
  Algorithm: "AES"
  Key: "myEncryptionKey"
  File Path: "C:\EncryptedFiles\encrypted.txt"
  Output Path: "C:\DecryptedFiles\decrypted.txt"
  Delay: 5
In this example, the activity decrypts the specified file using the AES algorithm and saves the decrypted content to the specified output path.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Hash File Key/index.html

Hash File Key
AutomatR.DefaultActivities.Cryptography.HashFileKey
The "Hash File Key" activity in AutomatR is part of the Cryptography activities package, allowing users to hash a file using a key with a specified algorithm and encoding format. The resulting hash is obtained as a hexadecimal string representation. This activity enhances security measures by incorporating a key into the hashing process within automation workflows.
Properties
​
Name
Description
Input
Algorithm
Selects the HMAC algorithm to be applied to the file contents using the provided key. Choose from available options such as HMACMD5, HMACSHA1, HMACSHA256, HMACSHA384, HMACSHA512, and HMACRIPEMD160. 
Enum
 variables containing the desired algorithm.
File Path
Specifies the full path of the file to be hashed using the provided key. 
String
 variables containing the file path.
Key
Provides the key to be used for hashing the specified file. This field only accepts strings and 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Hash File Key" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the hashed file key stored as a hexadecimal string. 
String
 variables to store the hash result for utilization in subsequent activities.
How to use:
Drag and drop the "Hash File Key" activity onto the workflow.
Configure the properties by selecting the HMAC algorithm, specifying the file path, and providing the key.
Optionally, configure the delay.
Execute the workflow to obtain the hash of the specified file using the provided key.
Example:

Consider an example where the "Hash File Key" activity is used to hash a file named "document.txt" using the HMACSHA256 algorithm with a provided key:
Hash File Key:
  Algorithm: HMACSHA256
  File Path: "D:\\files\\document.txt"
  Key: "SecretKey123"
  Result: hashedResult
In this example, the activity applies the HMACSHA256 algorithm using the key "SecretKey123" to hash the contents of the "document.txt" file, and the resulting hash is stored in the string variable "hashedResult" for further use in the workflow.
Note:
Ensure that the specified file path is valid and accessible.
The activity supports various HMAC algorithms, allowing users to choose the most suitable one for their security requirements.
Exceptions:
If the specified file is open by another application, the activity throws an exception indicating that the file is locked.
Supported HMAC Algorithms
​
HMACMD5:
 Produces a 32-character hexadecimal hash.
HMACSHA1:
 Generates a 40-character hexadecimal hash.
HMACSHA256:
 Results in a 64-character hexadecimal hash.
HMACSHA384:
 Produces a 96-character hexadecimal hash.
HMACSHA512:
 Generates a 128-character hexadecimal hash.
HMACRIPEMD160:
 Produces a 40-character hexadecimal hash.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Hash File/index.html

Hash File
AutomatR.DefaultActivities.Cryptography.HashFile
The "Hash File" activity in AutomatR is part of the Cryptography activities package, enabling users to apply selected hashing algorithms to the contents of a provided file and obtain the resulting hash as a hexadecimal string representation. This activity enhances security measures and facilitates hash generation within automation workflows.
Properties
​
Name
Description
Input
Algorithm
Selects the hashing algorithm to be applied to the file contents. Choose from available options such as MD5, RIPEMD160, SHA1, SHA256, SHA384, and SHA512. 
Enum
 variables containing the desired algorithm.
File Path
Specifies the full path of the file to be hashed. 
String
 variables containing the file path.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Hash File" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the hashed file stored as a hexadecimal string. 
String
 variables to store the hash result for utilization in subsequent activities.
How to use:
Drag and drop the "Hash File" activity onto the workflow.
Configure the properties by selecting the hashing algorithm and specifying the file path.
Optionally, configure the delay.
Execute the workflow to obtain the hash of the specified file.
Example:

Consider an example where the "Hash File" activity is used to hash a file named "document.txt" using the SHA256 algorithm:
Hash File:
  Algorithm: SHA256
  File Path: "D:\\files\\document.txt"
  Result: hashedResult
In this example, the activity applies the SHA256 algorithm to hash the contents of the "document.txt" file, and the resulting hash is stored in the string variable "hashedResult" for further use in the workflow.
Note:
Ensure that the specified file path is valid and accessible.
The activity supports various hashing algorithms, allowing users to choose the most suitable one for their security requirements.
Exceptions:
If the specified file is open by another application, the activity throws an exception indicating that the file is locked.
Supported Hashing Algorithms
​
MD5:
 Provides a 32-character hexadecimal number.
RIPEMD160:
 Produces a 40-character hexadecimal string.
SHA1:
 Generates a 40-character hexadecimal hash.
SHA256:
 Results in a 64-character hexadecimal hash.
SHA384:
 Produces a 96-character hexadecimal string.
SHA512:
 Generates a 128-character hexadecimal hash.

URL: https://docs.automatr.tech/docs/Products/Activities/Cryptography/Encrypt Text/index.html

Encrypt Text
AutomatR.DefaultActivities.Cryptography.EncryptText
The "Encrypt Text" activity in AutomatR is part of the Cryptography activities package, enabling the encryption of a specified text using a key derived from a specified key encoding and algorithm. This activity enhances security measures within automation workflows by encrypting sensitive information.
Name
Description
Input
Algorithm
Specifies the cryptographic algorithm to be used for encryption. Options include 
AES
 (Advanced Encryption Standard), 
DES
 (Data Encryption Standard), 
Triple DES
, 
AESGCM
 (AES Galois/Counter Mode), 
RC2
, and 
Rijndael
. Supports a 
CryptographyAlgorithm enumeration
 variable.
Key
Specifies the encryption key to be used. The key should be kept confidential and used for decryption later. Supports a 
SecureString
 variable.
Text
Specifies the text that you want to encrypt. Supports a 
string
 variable.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Captures the result of the "Encrypt Text" operation, which is the encrypted text. It supports a 
string
 variable, allowing you to use the encrypted information in subsequent activities within the workflow.
How to use:
Drag and drop the "Encrypt Text" activity onto the workflow.
Choose the encryption algorithm from the drop-down menu.
Provide the encryption key and the text to be encrypted.
Optionally, configure the delay and customize the display name.
Execute the workflow to encrypt the specified text using the chosen algorithm and key.
Example:

Consider an example where the "Encrypt Text" activity is used to encrypt a sensitive message:
Encrypt Text:
  Algorithm: AES
  Key: "MySecretKey"
  Text: "Confidential information"
  Result: encryptedMessage
In this example, the activity uses the AES algorithm with the specified key to encrypt the confidential information. The result of the encryption is stored in the string variable "encryptedMessage" for further use in the workflow.
Note:
Ensure that the selected algorithm and key are appropriate for your security requirements.
Store encryption keys securely, and avoid exposing them in workflows or scripts.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Get File Details/index.html

Get File Details
AutomatR.OneDriveApp.Activities.GetFileDetails
The "Get File Details" activity in AutomatR is part of the OneDrive activities package, allowing automation processes to fetch details for a specific file in a user's OneDrive account. This activity simplifies the retrieval of file information, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Path
Specifies the file name, including its extension, for which you would like to retrieve details. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get File Details" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs the result of the "Get File Details" operation, storing the details of the specified file in a DriveItem variable. You can utilize this variable for further activities.
How to Use
​
Drag and drop the "Get File Details" activity onto the workflow.
Configure the properties by specifying the file path for which you want to retrieve details.
Optionally, configure the delay and customize the display name.
Execute the workflow to fetch details for the specified file in OneDrive.
Important Notes:
Ensure that the activity is placed within a "OneDrive Scope" activity to establish the necessary authentication scope.
The "Path" should include the file name, including its extension, for which you want to retrieve details.
Example:
Consider an example where the "Get File Details" activity is used to fetch details for a file named "document.txt" in OneDrive:
Get File Details:
  Display Name: "Fetch Document Details"
  Path: "/Folder1/document.txt"
  Result: documentDetails
In this example, the activity fetches details for the "document.txt" file in the "Folder1" directory within OneDrive. The details are stored in the DriveItem variable "documentDetails" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Download File/index.html

Download File
AutomatR.OneDriveApp.Activities.DownloadFile
The "Download File" activity in AutomatR is part of the OneDrive activities package, providing the capability to automate the download of files from Microsoft OneDrive. This activity streamlines the process of retrieving files from OneDrive, making it an essential component of automation workflows involving file transfers.
Properties
​
Name
Description
Input
Download To
Specifies the local path where the downloaded file should be saved. This represents the destination on the machine where the automation workflow is executed. String variables containing the local download path.
File Name
Specifies the name of the file to be downloaded from OneDrive. This includes the file extension. String variables containing the file name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in milliseconds) to wait before executing the "Download File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Download File" activity onto the workflow.
Configure the properties by specifying the local download path ("Download To") and the name of the file to be downloaded from OneDrive ("File Name").
Optionally, configure the delay and customize the display name.
Execute the workflow to download the specified file from OneDrive to the local machine.
Example:

Consider an example where the "Download File" activity is used to download a file named "presentation.pptx" from the "Presentations" directory in OneDrive to the local machine:
Download File:
  Display Name: "Download Presentation"
  Download To: "C:\Downloads\"
  File Name: "presentation.pptx"
In this example, the activity downloads the file "presentation.pptx" from the specified path within the "Presentations" directory in OneDrive to the local path "C:\Downloads\". The display name is set to "Download Presentation" for clarity in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Get List Of Items/index.html

Get List Of Items
AutomatR.OneDriveApp.Activities.GetListOfItems
The "Get List Of Items" activity in AutomatR is part of the OneDrive activities package, designed to retrieve a list of items using Microsoft OneDrive APIs. This activity facilitates the process of fetching and sorting items from a specified location within OneDrive, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Sort Type
Select the order type from the dropdown menu to specify the desired order for fetching the list items from OneDrive. Options include ascending (asc) or descending (desc) order.
Sort By
Select a value from the dropdown menu to specify the sorting criteria for the list of items. Options include sorting by name, created date, or other relevant criteria.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get List Of Items" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs the result of the "Get List Of Items" operation, storing the list of items in an IDriveItemChildrenCollectionPage variable. You can use this variable for further activities.
How to Use
​
Drag and drop the "Get List Of Items" activity onto the workflow.
Configure the properties by specifying the order type and sorting criteria for fetching the list of items.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the list of items from the specified location within OneDrive.
Important Notes:
Ensure that the activity is placed within a "OneDrive Scope" activity to establish the necessary authentication scope.
The "Sort Type" allows you to specify the order type, either ascending (asc) or descending (desc).
The "Sort By" parameter enables you to define the sorting criteria for the list of items.
Example:
Consider an example where the "Get List Of Items" activity is used to retrieve a list of items from the root directory of the user's OneDrive, sorted by name in ascending order:
Get List Of Items:
  Display Name: "Fetch Root Items"
  Sort Type: Ascending
  Sort By: Name
  Result: listOfItems
In this example, the activity fetches items from the root directory of OneDrive, sorting them by name in ascending order. The result is stored in the IDriveItemChildrenCollectionPage variable "listOfItems" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Delete File/index.html

Delete File
AutomatR.OneDriveApp.Activities.DeleteFile
The "Delete File" activity in AutomatR is part of the OneDrive activities package, providing automation capabilities to delete files from Microsoft OneDrive. This activity streamlines file management tasks in OneDrive, allowing users to remove unwanted or obsolete files as part of their automation workflows.
Properties
​
Name
Description
Input
Path
Specifies the path of the file to be deleted within OneDrive. It represents the location of the file within the user's OneDrive account. 
String
 variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete File" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the "Delete File" operation, indicating whether the file deletion was successful or any encountered errors. Variables of relevant types (e.g., 
Boolean
 variables) to store the operation result.
How to use:
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the path of the file to be deleted within OneDrive.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified file within OneDrive.
Example:

Consider an example where the "Delete File" activity is used to delete a file named "obsolete_report.xlsx" from the "Reports" directory in OneDrive:
Delete File:
  Display Name: "Delete Obsolete Report"
  Path: "/Documents/Reports/obsolete_report.xlsx"
  Result: isDeleteSuccessful
In this example, the activity deletes the file "obsolete_report.xlsx" from the specified path within the "Reports" directory in OneDrive. The result of the operation (success or failure) is stored in the 
Boolean
 variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Upload File/index.html

Upload File
AutomatR.OneDriveApp.Activities.UploadFile
The "Upload File" activity in AutomatR is part of the OneDrive activities package, facilitating the upload of a local file to your OneDrive account using the Microsoft upload API. This activity streamlines the process of uploading files, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the destination path within your OneDrive account where the file should be uploaded. It represents the directory path. String variables containing the destination path.
Source Path
Specifies the full path of the file on your local drive, including the filename, that you want to upload. For example: "C:\UploadFile\uploadfile.xlsx". String variables containing the local file path.
Overwrite
When selected, overwrites the files in the destination path with the file to be uploaded. Boolean variables to control overwrite behavior.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Upload File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Upload File" operation, indicating whether the file upload was successful or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Upload File" activity onto the workflow.
Configure the properties by specifying the destination path and the source path of the file to be uploaded.
Optionally, configure the delay, select the overwrite option, and customize the display name.
Execute the workflow to upload the specified file to the destination path within OneDrive.
Example:
Consider an example where the "Upload File" activity is used to upload a file named "uploadfile.xlsx" from a local drive to a folder within OneDrive:
Upload File:
  Display Name: "Upload Excel File"
  Source Path: "C:\UploadFile\uploadfile.xlsx"
  Destination Path: "/Documents/ExcelFiles/"
  Overwrite: true
  Result: isUploadSuccessful
In this example, the activity uploads the "uploadfile.xlsx" from the local path "C:\UploadFile\" to the "/Documents/ExcelFiles/" folder within OneDrive. The overwrite option is set to 
true
, and the result of the operation (success or failure) is stored in the Boolean variable "isUploadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Move File/index.html

Move File
AutomatR.OneDriveApp.Activities.MoveFile
The "Move File" activity in AutomatR is part of the OneDrive activities package, designed to move a file from a specified source path to a designated destination path within the user's OneDrive account. This activity streamlines the file management process in OneDrive, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Source Path
Specifies the file path from the drive of the file you wish to move. String variables containing the source file path.
Destination Path
Specifies the drive folder path where you would like to move the file to. String variables containing the destination folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move File" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to Use
​
Drag and drop the "Move File" activity onto the workflow.
Configure the properties by specifying the source file path and the destination folder path within the OneDrive account.
Optionally, configure the delay and customize the display name.
Execute the workflow to move the specified file within OneDrive.
Important Notes:
Ensure that the activity is placed within a "OneDrive Scope" activity to establish the necessary authentication scope.
The "Source Path" parameter specifies the file path from the drive of the file you want to move.
The "Destination Path" parameter specifies the drive folder path where you want to move the file to.
Example:
Consider an example where the "Move File" activity is used to move a file named "document.txt" from one folder to another within OneDrive:
Move File:
  Display Name: "Move Document File"
  Source Path: "/Folder1/document.txt"
  Destination Path: "/Folder2/"
In this example, the activity moves the "document.txt" file from the "Folder1" directory to the "Folder2" directory within OneDrive.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Shared/index.html

Shared
AutomatR.OneDriveApp.Activities.Shared
The "Shared" activity in AutomatR, part of the OneDrive activities package, retrieves a collection of files shared with the user within Microsoft OneDrive. This activity simplifies the process of identifying files shared with the user, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Shared" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs the result of the "Shared" activity, providing a collection of files shared with the user. The result is stored in an 
IDriveSharedWithMeCollectionPage
 variable, allowing you to utilize it for further activities.
How to Use
​
Drag and drop the "Shared" activity onto the workflow.
Optionally, configure the delay for the execution of the "Shared" activity.
Execute the workflow to retrieve a collection of files shared with the user within OneDrive.
Utilize the output variable (
Result
) to access information about the shared files for further activities.
Example:
Consider an example where the "Shared" activity is used to retrieve a collection of files shared with the user:
Shared:
  Display Name: "Retrieve Shared Files"
  Delay: 3
  Result: sharedFilesCollection
In this example, the activity retrieves a collection of files shared with the user within OneDrive, and the result is stored in the 
sharedFilesCollection
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Copy File/index.html

Copy File
AutomatR.OneDriveApp.Activities.CopyFile
The "Copy File" activity in AutomatR is part of the OneDrive activities package, enabling automation processes to copy files from one location to another within Microsoft OneDrive. This activity streamlines file management tasks in OneDrive, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the destination path where the file should be copied to in OneDrive. It represents the location within the OneDrive account. String variables containing the destination path.
File Name
Specifies the name of the file to be copied. This can include the file extension. String variables containing the file name.
Source Path
Specifies the source path of the file to be copied. It represents the location within the OneDrive account from which the file will be copied. String variables containing the source path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the "Copy File" operation, indicating whether the file copy was successful or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Copy File" activity onto the workflow.
Configure the properties by specifying the destination path, file name, and source path within the OneDrive account.
Optionally, configure the delay and customize the display name.
Execute the workflow to copy the specified file within OneDrive.
Example:

Consider an example where the "Copy File" activity is used to copy a file named "document.txt" from one folder to another within OneDrive:
Copy File:
  Display Name: "Copy Document File"
  Source Path: "/Folder1/document.txt"
  Destination Path: "/Folder2/"
  Result: isCopySuccessful
In this example, the activity copies the "document.txt" file from the "Folder1" directory to the "Folder2" directory within OneDrive. The result of the operation (success or failure) is stored in the Boolean variable "isCopySuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Rename File/index.html

Rename File
AutomatR.OneDriveApp.Activities.RenameFile
The "Rename File" activity in AutomatR, part of the OneDrive activities package, utilizes Microsoft APIs to rename a file within your OneDrive account. This activity streamlines the process of updating file names, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Path
Specifies the file path from the drive of the file you wish to rename. String variables containing the file path.
New Name
Specifies the new name that you would like to assign to the file mentioned in the file path. String variables containing the new file name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Rename File" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to Use
​
Drag and drop the "Rename File" activity onto the workflow.
Configure the properties by specifying the file path and the new name within the OneDrive account.
Optionally, configure the delay and customize the display name.
Execute the workflow to rename the specified file within OneDrive.
Example:
Consider an example where the "Rename File" activity is used to rename a file named "document.txt" within OneDrive:
Rename File:
  Display Name: "Rename Document File"
  Path: "/Folder1/document.txt"
  New Name: "new_document.txt"
In this example, the activity renames the "document.txt" file in "Folder1" to "new_document.txt" within OneDrive.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Search One Drive/index.html

Search One Drive
AutomatR.OneDriveApp.Activities.SearchOneDrive
The "Search OneDrive" activity in AutomatR, part of the OneDrive activities package, uses Microsoft APIs to find files, metadata, and/or contents that match the values of your search parameters (Query) within your OneDrive account. This activity streamlines the process of searching for specific files or folders, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Name
Specifies the file name, including its extension, that you would like to search for in your drive. String variables containing the file name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Search OneDrive" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs the result of the "Search OneDrive" operation, indicating whether the specified file or folder was found (True) or not found (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Search OneDrive" activity onto the workflow.
Configure the properties by specifying the file name you want to search for within the OneDrive account.
Optionally, configure the delay and customize the display name.
Execute the workflow to search for the specified file within OneDrive.
Example:
Consider an example where the "Search OneDrive" activity is used to find a file named "document.txt" within OneDrive:
Search OneDrive:
  Display Name: "Search Document"
  Name: "document.txt"
  Result: isFileFound
In this example, the activity searches for the "document.txt" file within OneDrive. The result of the operation (whether the file is found or not) is stored in the Boolean variable "isFileFound" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Create Folder/index.html

Create Folder
AutomatR.OneDriveApp.Activities.CreateFolder
The "Create Folder" activity in AutomatR is part of the OneDrive activities package, allowing automation processes to create new folders within Microsoft OneDrive. This activity is particularly useful for organizing and managing files in OneDrive through automation workflows.
Properties
​
Name
Description
Input
Destination Folder Path
Specifies the path where the new folder should be created within OneDrive. It represents the location where the folder will be added. String variables containing the destination folder path.
Name
Specifies the name of the new folder to be created within the specified destination. This is the label for the folder. String variables containing the desired folder name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Folder" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Create Folder" activity onto the workflow.
Configure the properties by specifying the destination folder path and the name of the new folder to be created within OneDrive.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the specified folder within OneDrive.
Example:

Consider an example where the "Create Folder" activity is used to create a new folder named "Reports" within the "Documents" directory in OneDrive:
Create Folder:
  Display Name: "Create Reports Folder"
  Destination Folder Path: "/Documents/"
  Name: "Reports"
In this example, the activity creates a new folder named "Reports" within the "Documents" directory in OneDrive. The display name is set to "Create Reports Folder" for clarity in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Edit Permission/index.html

Edit Permission
AutomatR.OneDriveApp.Activities.EditPermission
The "Edit Permission" activity in UiPath is part of the OneDrive activities package, allowing users to automate the modification of permissions (access rights) for files or folders in Microsoft OneDrive. This activity is particularly useful when it comes to managing and controlling access to shared resources within OneDrive.
Properties
​
Name
Description
Input
Path
Specifies the path of the file or folder for which the permissions are to be edited within OneDrive. It represents the location of the resource within the user's OneDrive account. String variables containing the file or folder path.
Roles
Specifies the roles or permissions to be assigned to the user or users for the specified file or folder. Roles can include "read" (view-only) or "write" (modify) permissions. String variables containing the role(s) to be assigned. Examples: "read," "write," or a combination like "read,write."
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in milliseconds) to wait before executing the "Download File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the "Edit Permission" operation, indicating whether the permission editing was successful or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Edit Permission" activity onto the workflow.
Configure the properties by specifying the path of the file or folder to be edited and defining the roles or permissions to be assigned.
Optionally, configure the delay and customize the display name.
Execute the workflow to edit the permissions for the specified file or folder within OneDrive.
Example:

Consider an example where the "Edit Permission" activity is used to grant "read" and "write" permissions to a shared document named "project_report.docx" within the "SharedDocuments" directory in OneDrive:
Edit Permission:
  Display Name: "Grant Document Permissions"
  Path: "/Documents/SharedDocuments/project_report.docx"
  Roles: "read,write"
  Result: isEditSuccessful
In this example, the activity edits the permissions for the document "project_report.docx," granting both "read" and "write" permissions. The result of the operation (success or failure) is stored in the Boolean variable "isEditSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/One Drive Scope/index.html

One Drive Scope
AutomatR.OneDriveApp.Activities.OneDriveScope
The "OneDrive Scope" activity in AutomatR facilitates OAuth authentication to establish a secure connection between AutomatR and your OneDrive environment. This connection authorizes a Robot to call OneDrive APIs and access resources on your behalf. This activity is essential for enabling other OneDrive activities within your workflow.
Properties
​
Name
Description
Input
Authentication
Specifies the authentication details needed to connect to OneDrive. It includes the refresh token and the mail ID associated with your OneDrive account.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "OneDrive Scope" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to Use
​
Drag and drop the "OneDrive Scope" activity onto the workflow.
Configure the properties by specifying the authentication details, including the refresh token and mail ID associated with your OneDrive account.
Optionally, configure the delay and customize the display name.
Place the activities you want to perform within the OneDrive scope inside the activity body.
Important Notes:
The "OneDrive Scope" activity must be used to encapsulate other OneDrive activities to ensure proper authentication.
The "Authentication" parameter requires the refresh token and the mail ID associated with your OneDrive account.
Example:
Consider an example where the "OneDrive Scope" activity is used to authenticate and execute a series of OneDrive activities:
OneDrive Scope:
  Display Name: "Authenticate and Access OneDrive"
  Authentication: (Specify Refresh Token and Mail ID)
    Refresh Token: "your_refresh_token"
    Mail ID: "your@mail.com"
  (Other OneDrive Activities Here...)
In this example, the "OneDrive Scope" activity establishes a connection with OneDrive using the provided refresh token and mail ID. The subsequent OneDrive activities placed inside the scope can now access OneDrive resources on behalf of the authenticated user.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Delete Folder/index.html

Delete Folder
AutomatR.OneDriveApp.Activities.DeleteFolder
The "Delete Folder" activity in AutomatR is part of the OneDrive activities package, enabling users to automate the deletion of folders from Microsoft OneDrive. This activity is designed to streamline the management of folders within OneDrive, allowing users to remove unnecessary or obsolete folders as part of their automation workflows.
Properties
​
Name
Description
Input
Path
Specifies the path of the folder to be deleted within OneDrive. It represents the location of the folder within the user's OneDrive account. 
String
 variables containing the folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Folder" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the "Delete Folder" operation, indicating whether the folder deletion was successful or any encountered errors. Variables of relevant types (e.g., 
Boolean
 variables) to store the operation result.
How to use:
Drag and drop the "Delete Folder" activity onto the workflow.
Configure the properties by specifying the path of the folder to be deleted within OneDrive.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified folder within OneDrive.
Example:

Consider an example where the "Delete Folder" activity is used to delete a folder named "ObsoleteDocuments" from the "Documents" directory in OneDrive:
Delete Folder:
  Display Name: "Delete Obsolete Documents Folder"
  Path: "/Documents/ObsoleteDocuments"
  Result: isDeleteSuccessful
In this example, the activity deletes the folder "ObsoleteDocuments" from the specified path within the "Documents" directory in OneDrive. The result of the operation (success or failure) is stored in the 
Boolean
 variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/One Drive/Share/index.html

Share
AutomatR.OneDriveApp.Activities.Share
The "Share" activity in AutomatR, part of the OneDrive activities package, uses Microsoft APIs to enable the sharing option for a particular file or folder within Microsoft OneDrive. This activity streamlines the process of sharing content, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Source Path
Specifies the path of the file or folder that you would like to share with others. String variables containing the file or folder path within OneDrive.
Emails
Specifies the recipient's email address to whom you would like to share the file or folder. Multiple email addresses can be provided, separated by commas or semicolons. String variables containing the recipient's email address(es).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Share" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Message
Specifies the plain text that you would like to include in the sharing invitation. String variables containing the message text.
Output
Result
Outputs the result of the "Share" operation, indicating whether the sharing process was successful (True) or encountered errors (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Share" activity onto the workflow.
Configure the properties by specifying the source path, recipient email(s), and optional message for the sharing invitation within the OneDrive account.
Optionally, configure the delay and customize the display name.
Execute the workflow to share the specified file or folder within OneDrive.
Example:
Consider an example where the "Share" activity is used to share a file named "document.txt" with two recipients within OneDrive:
Share:
  Display Name: "Share Document"
  Source Path: "/Folder1/document.txt"
  Emails: "recipient1@example.com, recipient2@example.com"
  Message: "Please review the document."
  Result: isSharingSuccessful
In this example, the activity shares the "document.txt" file from the "Folder1" directory within OneDrive with two recipients. The result of the operation (success or failure) is stored in the Boolean variable "isSharingSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mail/Get IMAP Messages/index.html

Get IMAP Messages
AutomatR.Mail.GetIMAPMessages
The "Get IMAP Messages" activity in AutomatR allows you to automate the retrieval of IMAP email messages from a designated server. This activity is part of the Mail Activities Pack, enhancing automation processes related to email management.
Properties
​
Name
Description
Input
Email
Specify the email account from which you want to retrieve the message. String variables containing the email account.
Host
Specify the host name as "imap.gmail.com" to establish a connection with the IMAP server. String variables containing the host name.
Password
Specify the password of the email account used to retrieve the message. String variables containing the password.
Port
Specify the port used to connect to the email server and retrieve the email message. Integer variables containing the port number.
Top
Specify the number of email messages to be retrieved from the email server. Integer variables containing the number of messages.
Use SSL
Specify the SSL encryption type to be used for the connection with the email server. Boolean variables determining whether to use SSL.
Body Contains
Specify the content that the mail body should contain for the messages to be retrieved. String variables containing the desired content.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
Has Attachments
If checked, only retrieve messages with attachments. Boolean variables determining whether to retrieve messages with attachments.
Mark As Read
If checked, retrieved messages will be marked as read. Boolean variables determining whether to mark messages as read.
Only Unread
If checked, only retrieve unread messages. Boolean variables determining whether to retrieve only unread messages.
Subject Contains
Specify the content that the subject line should contain for the messages to be retrieved. String variables containing the desired content.
Text Output
If checked, retrieve messages as text output. Boolean variables determining whether to retrieve messages as text.
Output
Exception
If an exception occurs while executing a sequence, the exception can be stored in a string variable for further processing. String variables containing the exception message.
Messages
The retrieved messages are stored as a collection of MailMessage objects. List variables containing the retrieved messages.
Result
Returns true or false based on the mail message retrieved. Boolean variables indicating the success of the operation.
How to use:
Drag and drop the "Get IMAP Messages" activity onto the workflow.
Configure the properties by specifying the email account, host, password, port, and other optional parameters.
Execute the workflow to retrieve email messages based on the specified criteria.
Retrieve the result, exception, and messages for further processing in the workflow.
Example:

Consider an example where the "Get IMAP Messages" activity is used to retrieve unread messages with attachments from the email account "
example@gmail.com
":
Get IMAP Messages:
  Email: "example@gmail.com"
  Host: "imap.gmail.com"
  Password: "your_password"
  Port: 993
  Top: 5
  Only Unread: true
  Has Attachments: true
  Result: isMessagesRetrieved
  Messages: retrievedMessages
In this example, the activity retrieves the top 5 unread messages with attachments from the specified email account and server. The result of the operation (success or failure) is stored in the Boolean variable "isMessagesRetrieved," and the retrieved messages are stored in the list variable "retrievedMessages" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mail/Save Mail Message/index.html

Save Mail Message
AutomatR.Mail.SaveMailMessage
The "Save Mail Message" activity in AutomatR, part of the Mail activities package, is designed to save an email message (MailMessage object) to a specified folder. This activity facilitates the storage and archiving of email messages as part of automation workflows.
Properties
​
Name
Description
Input
Mail Message
Specifies the MailMessage object that needs to be saved. Variables of type 
System.Net.Mail.MailMessage
 containing the email message to be saved.
Location Path
Specifies the full path where the MailMessage object should be saved. String variables containing the destination folder path. If the path includes the file name and extension, the activity will use that; otherwise, a new file with a unique name will be created with the ".eml" extension.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Save Mail Message" activity. This optional delay can help handle synchronization issues. Integer variables containing the delay duration (e.g., 5 seconds).
How to Use
​
Drag and drop the "Save Mail Message" activity onto the workflow.
Configure the properties by specifying the MailMessage object and the folder path where the email message should be saved.
Optionally, configure the display name for the activity.
Execute the workflow to save the email message to the specified folder.
Example
​
Consider an example where the "Save Mail Message" activity is used to save an email message (
emailMessage
) to a folder named "Emails":
Save Mail Message:
  Display Name: "Save Email"
  Mail Message: emailMessage
  Location Path: "C:\Documents\Emails"
In this example, the activity saves the specified email message to the "C:\Documents\Emails" folder. Adjust the input properties according to the requirements of your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mail/Send SMTP Mail/index.html

Send SMTP Mail
AutomatR.Mail.SendSMTPMail
The "Send SMTP Mail" activity in AutomatR, part of the Mail activities package, enables the automation of sending email messages using the SMTP protocol. This activity is versatile, supporting various input parameters such as recipients, sender information, server details, and more.
Properties
​
Name
Description
Input
To
Specifies the main recipients of the email message. String variables containing one or multiple email addresses separated by a semicolon (
;
).
From
Specifies the email address of the sender of the email message. String variables containing the sender's email address.
Email
Specifies the email account from which the message will be sent. String variables containing the email account.
Password
Specifies the password of the email account used to send the email message. String variables containing the email account password.
Server
Specifies the host name (e.g., "smtp.gmail.com") to establish a connection with the SMTP server. String variables containing the server host name.
Port
Specifies the port used to connect to the email server and send the email message. Integer variables containing the port number.
Is HTML
Specifies whether the body of the email message is written in HTML format. Boolean variables indicating whether the email body is HTML.
Subject
Specifies the subject line for the email to be sent. String variables containing the email subject.
Body
Specifies the email body content that you want to send in the email message. String variables containing the email body.
CC
Specifies additional recipients who should receive a copy of the email message. String variables containing one or multiple email addresses separated by a semicolon (
;
).
BCC
Specifies recipients who should receive the email message as hidden recipients. String variables containing one or multiple email addresses separated by a semicolon (
;
).
Attachments
Specifies a list of file paths for attachments to be included with the email. List variables containing strings representing file paths.
Mail Message
Specifies the MailMessage object to be forwarded. This field only supports MailMessage objects. Variables of type 
System.Net.Mail.MailMessage
.
Output
Success
Returns 
true
 or 
false
 based on whether the email message was sent successfully. Boolean variables indicating the success of the email sending operation.
Exception
If an exception occurs while executing the sequence, this property stores the exception message for further processing. String variables containing the exception message.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send SMTP Mail" activity. This optional delay can help handle synchronization issues. Integer variables containing the delay duration (e.g., 5 seconds).
How to Use
​
Drag and drop the "Send SMTP Mail" activity onto the workflow.
Configure the properties by specifying the necessary information such as recipients, sender details, server details, email content, and attachments.
Optionally, configure the delay and customize the display name.
Execute the workflow to send the specified email.
Example
​
Consider an example where the "Send SMTP Mail" activity is used to send an email:
Send SMTP Mail:
  Display Name: "Send Notification"
  To: "recipient@example.com"
  From: "sender@example.com"
  Email: "sender@example.com"
  Password: "password123"
  Server: "smtp.example.com"
  Port: 587
  Is HTML: true
  Subject: "Automated Notification"
  Body: "<p>This is an automated notification email.</p>"
  CC: "cc_recipient@example.com"
  BCC: "bcc_recipient@example.com"
  Attachments: ["C:\Documents\Attachment1.pdf", "C:\Documents\Attachment2.docx"]
  Success: isEmailSent
  Exception: emailException
In this example, the activity sends an HTML-formatted email notification to the main recipient "
recipient@example.com
" with carbon copy to "
cc_recipient@example.com
" and blind carbon copy to "
bcc_recipient@example.com
". Attachments "Attachment1.pdf" and "Attachment2.docx" are included. The success of the operation is stored in the Boolean variable "isEmailSent," and any exceptions are captured in the string variable "emailException" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mail/Get POP3 Mail Message/index.html

Get POP3 Mail Messages
AutomatR.Mail.GetPOP3MailMessages
The "Get POP3 Mail Messages" activity in AutomatR is designed to retrieve POP3 email messages from the specified server. This activity simplifies the process of fetching email messages from a POP3 server, allowing seamless integration into your automation workflows.
Properties
​
Name
Description
Input
Connection Type
Specify the desired connection type by selecting from a dropdown menu.
Delete Mail
Specifies whether the read messages should be marked for deletion.
Text Output
If checked, retrieved messages will be treated as text output.
Top
Specify the number of email messages to be retrieved from the email server.
Credential
Email
Specify the email account from which you want to retrieve the message.
Password
Specify the password of the email account used to retrieve the message.
Configuration
Host
Specify the host name (e.g., "imap.gmail.com") to establish a connection with the POP3 server.
Port
Specify the port used to connect to the email server and retrieve the email message.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Messages
Outputs the retrieved messages as a collection of MailMessage objects.
How to Use
​
Drag and drop the "Get POP3 Mail Messages" activity onto the workflow.
Configure the properties by specifying the email account credentials, server details, and other optional settings.
Optionally, customize the delay, text output, and choose whether to delete read messages.
Execute the workflow to retrieve email messages from the specified POP3 server.
Example
​
Consider an example where the "Get POP3 Mail Messages" activity is used to fetch the latest 5 email messages from a Gmail account:
Get POP3 Mail Messages:
  Email: "your_email@gmail.com"
  Password: "your_password"
  Host: "pop.gmail.com"
  Port: 995
  Connection Type: SSL/TLS
  Top: 5
  Delete Mail: false
  Text Output: false
  Delay: 0
  Messages: mailMessages
In this example, the activity connects to the Gmail POP3 server, retrieves the latest 5 email messages, and stores them in the 
mailMessages
 variable for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mail/Save Attachment/index.html

Save Attachment
AutomatR.Mail.SaveAttachment
The "Save Attachment" activity in AutomatR is designed to save attachments from a MailMessage object to a specified folder. This activity facilitates efficient attachment handling in email automation workflows, allowing users to organize and store attachments as needed.
Properties
​
Name
Description
Input
Mail Message
Specifies the MailMessage object from which the attachments are to be saved. Variables of type 
System.Net.Mail.MailMessage
 containing the email message with attachments.
Save Location
Specifies the full path of the folder where the attachments of the mail message should be saved. String variables containing the destination folder path.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Save Attachment" activity. This optional delay can help handle synchronization issues. Integer variables containing the delay duration (e.g., 5 seconds).
How to Use
​
Drag and drop the "Save Attachment" activity onto the workflow.
Configure the properties by specifying the MailMessage object containing attachments and the folder path to save attachments.
Optionally, configure the display name for the activity.
Execute the workflow to save attachments to the specified folder.
Example
​
Consider an example where the "Save Attachment" activity is used to save attachments from an email to a folder named "Attachments":
Save Attachment:
  Display Name: "Save Email Attachments"
  Mail Message: emailMessage
  Save Location: "C:\Documents\Attachments"
In this example, the activity saves attachments from the specified email message (
emailMessage
) to the "C:\Documents\Attachments" folder. Adjust the input properties according to the requirements of your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mail/Move IMAP Mail Message/index.html

Move IMAP Mail Message
AutomatR.Mail.MoveImapMailMessage
The "Move IMAP Mail Message" activity in AutomatR is designed to facilitate the relocation of an IMAP mail message from one location to another within an email account. This activity enhances email management capabilities in workflows, providing the flexibility to organize and manage messages efficiently.
Properties
​
Name
Description
Input
Connection Type
Specifies the type of connection established for the IMAP mail message movement. It defines the protocol and method used to connect to the mail server, such as SSL/TLS, STARTTLS, or plain text. SecureSocketOptions enum values.
Destination Folder
Specifies the specific folder or location to which the IMAP mail message will be moved. It represents the target folder where the message will be transferred within the email account or mailbox. String variables containing the folder name.
Email
Specifies the IMAP mail message that is being moved. It represents the specific email or message targeted for relocation within the email system, typically identified by its unique identifier or metadata. String variables containing the email identifier or metadata.
Host
Specifies the hostname or server address of the IMAP email server. String variables containing the server address.
Password
Specifies the security key that allows the user or application to establish a secure connection with the email server and perform actions such as moving the mail message. String variables containing the password.
Port
Specifies the numerical value that directs the move operation of the IMAP mail message to the correct port on the server. Integer variables containing the port number.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move IMAP Mail Message" activity. This optional delay can help handle synchronization issues. Integer variables containing the delay duration (e.g., 5 seconds).
Output
Mail Message
Outputs the specific email message within the IMAP mailbox that is targeted for movement. Variables of type 
System.Net.Mail.MailMessage
 to store the email message.
How to Use
​
Drag and drop the "Move IMAP Mail Message" activity onto the workflow.
Configure the properties by specifying the email, password, host, port, connection type, destination folder, and any optional delay.
Optionally, configure the display name for the activity.
Execute the workflow to move the specified IMAP mail message to the designated folder.
Example
​
Consider an example where the "Move IMAP Mail Message" activity is used to move an email with the subject "Important Document" from the inbox to the "Archived" folder:
Move IMAP Mail Message:
  Display Name: "Move Important Document"
  Email: "user@example.com"
  Password: "securepassword"
  Host: "imap.example.com"
  Port: 993
  Connection Type: SecureSocketOptions.SslOnConnect
  Destination Folder: "Archived"
  Mail Message: movedMail
In this example, the activity connects to the IMAP server, authenticates the user, and moves the email with the subject "Important Document" to the "Archived" folder. The moved email message is stored in the 
movedMail
 variable for further workflow processing.

URL: https://docs.automatr.tech/docs/Products/Activities/Flow Logic/Parallel/index.html

Parallel
System.Activities.Statements.Parallel
The "Parallel" activity in AutomatR allows you to execute multiple branches of a workflow simultaneously, enhancing efficiency and concurrency in your automation process. It enables parallel processing of activities, improving overall performance.
Properties
​
Name
Description
Misc
Completion Condition
Specifies the condition under which the parallel execution is considered complete. This condition can be a 
Boolean
 variable or 
expression
, allowing dynamic control over when the parallel branches should conclude. For example, you might set a completion condition based on the successful completion of specific tasks in each branch.
Display Name
This property allows you to customize the display name of the parallel activity within the workflow, enhancing clarity and organization.
Effectively configuring these properties allows you to design workflows with parallel execution, improving the overall efficiency of your automation processes. The "Completion Condition" provides flexibility in controlling when parallel branches should complete, giving you granular control over the parallel execution logic. The "Parallel" activity is valuable for handling tasks concurrently, leading to faster and more streamlined automation workflows in AutomatR.

URL: https://docs.automatr.tech/docs/Products/Activities/Flow Logic/Flowchart/index.html

Flowchart
System.Activities.Statements.Flowchart
The "Flowchart" activity in AutomatR provides a graphical representation of a sequence of activities, enabling the design of complex workflows with decision-making capabilities. This activity is integral for creating structured and branching logic within your automation processes.
Properties
​
Name
Description
Misc
Display Name
This property allows you to customize the display name of the flowchart within the workflow, enhancing clarity and organization.
Validate Unconnected Nodes
A checkbox property that, when checked (Yes), enforces validation of unconnected nodes within the flowchart. Unconnected nodes are activities or decision points that are not linked to the main flow. Enforcing validation ensures that all nodes are properly connected, reducing the risk of incomplete or dysfunctional workflows. This property supports a 
Boolean
 variable for dynamic control over the validation setting.
Effectively configuring these properties allows you to design and implement sophisticated workflows using the Flowchart activity. The graphical representation facilitates the visualization of logic, decisions, and branches, while the validation option ensures the integrity of the flowchart structure. The Flowchart activity is a powerful tool for creating dynamic and intricate automation processes within AutomatR.

URL: https://docs.automatr.tech/docs/Products/Activities/Flow Logic/Sequence/index.html

Sequence
System.Activities.Statements.Sequence
The "Sequence" activity in AutomatR is a fundamental building block that enables the organization and execution of a series of activities in a linear, sequential order. It provides a structured container for organizing tasks within your automation workflows.
Properties
​
Name
Description
Misc
Display Name
This property allows you to customize the display name of the sequence within the workflow, enhancing clarity and organization.
Effectively configuring the "Display Name" property allows you to create well-documented and organized workflows, making it easier to understand the purpose and structure of the sequence within the larger automation process. The "Sequence" activity serves as a container for organizing a series of activities, providing a clear and linear flow for the execution of tasks in AutomatR.

URL: https://docs.automatr.tech/docs/Products/Activities/Flow Logic/Delay/index.html

Delay
System.Activities.Statements.Delay
The "Delay" activity in AutomatR is used to introduce a pause or wait time in the execution of a workflow, allowing for better synchronization and control over the timing of actions. This activity is essential when you need to add delays between activities or steps in your automation process.
Properties
​
Name
Description
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Duration
Specifies the duration of the delay, i.e., the amount of time the workflow will pause before proceeding to the next activity. It supports a 
TimeSpan
 variable, allowing for dynamic configuration of the delay duration based on your workflow requirements. Alternatively, you can input a 
string
 representing the time duration, such as "00:00:05" for a 5-second delay.
Effectively configuring the "Delay" activity with an appropriate duration allows you to control the timing of your automation workflow, ensuring that actions are executed with the desired pauses between them. This is particularly useful for scenarios where synchronization, timing, or waiting for external processes is crucial to the success of the automation process.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Vendors/Create Vendor/index.html

Create Vendor
AutomatR.Zoho.Activities.CreateVendor
The "Create Vendor" activity in AutomatR is part of the Zoho activities package, facilitating the creation of new vendors within the Zoho platform. This activity streamlines the process of adding vendor details, enhancing automation workflows in Zoho.
Properties
​
Name
Description
Input
Vendor Owner
Enter the user id of the vendor owner.
Vendor Name
Enter the name of the vendor. This is a required field.
Email
Enter the email address of the vendor. If provided, it must be in a valid email format.
Phone
Enter the phone number of the vendor.
GL Account
Select the GL account for the vendor.
Website
Enter the website of the vendor. If provided, it must be in a valid format.
Category
Enter the category of the vendor.
Street
Enter the street address of the vendor.
City
Enter the city where the vendor is located.
State
Enter the state where the vendor is located.
Zip Code
Enter the zip code of the vendor's location.
Country
Enter the country where the vendor is located.
Description Information
Enter additional information or a description about the vendor.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the created vendor id of type string.
Note:
 
The "Vendor Name" field is mandatory, and either the "Email" or "Phone" field must be provided for contact purposes.
If the "Email" field is provided, it must be in a valid email format.
If the "Website" field is provided, it must be in a valid format.
How to Use
​
Drag and drop the "Create Vendor" activity onto the workflow.
Configure the properties by specifying the necessary details such as vendor name, email, phone, etc.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the vendor in Zoho.
Example
​
Consider an example where the "Create Vendor" activity is used to add a new vendor named "ABC Corp" with the following details:
Create Vendor:
  Vendor Name: "ABC Corp"
  Email: "abc@example.com"
  Phone: "+1234567890"
  GL Account: "Accounts Payable"
  Website: "https://www.abccorp.com"
  Category: "Software"
  Street: "123 Main Street"
  City: "Cityville"
  State: "Stateville"
  Zip Code: "12345"
  Country: "Countryland"
  Description Information: "Supplier of software solutions."
  Result: createdVendorID
In this example, the activity creates a new vendor in Zoho with the specified details, and the created vendor ID is stored in the variable "createdVendorID" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Vendors/Update Vendor/index.html

Update Vendor
AutomatR.Zoho.Activities.UpdateVendor
The "Update Vendor" activity in AutomatR is part of the Zoho CRM activities package, facilitating the update of vendor information within the Zoho CRM system. This activity streamlines the process of modifying vendor details, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Category
Specifies the category of the vendor. String variables containing the vendor category.
City
Specifies the city where the vendor is located. String variables containing the city information.
Country
Specifies the country where the vendor is located. String variables containing the country information.
Description Information
Specifies additional information or description about the vendor. String variables containing the description information.
Email
Specifies the email address of the vendor. String variables containing the vendor's email address.
GL Account
Specifies the General Ledger (GL) account associated with the vendor. Enumeration variable of GL_Account type.
ID
Specifies the unique identifier of the vendor to be updated. String variables containing the vendor ID.
Phone
Specifies the phone number of the vendor. String variables containing the vendor's phone number.
State
Specifies the state where the vendor is located. String variables containing the state information.
Street
Specifies the street address of the vendor. String variables containing the street address.
Vendor Name
Specifies the name of the vendor. String variables containing the vendor name.
Vendor Owner
Specifies the user ID of the owner associated with the vendor. String variables containing the owner's user ID.
Website
Specifies the website URL of the vendor. String variables containing the vendor's website URL.
Zip Code
Specifies the zip code of the vendor's location. String variables containing the zip code.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Vendor" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Update Vendor" activity onto the workflow.
Configure the properties by specifying the vendor ID and other optional information to be updated.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified vendor details within Zoho CRM.
Example:

Consider an example where the "Update Vendor" activity is used to modify the details of a vendor with ID "123":
Update Vendor:
  Display Name: "Modify Vendor Details"
  ID: "123"
  Vendor Name: "Updated Vendor"
  Email: "updated.vendor@email.com"
  Phone: "+123456789"
  City: "New City"
  State: "New State"
  Country: "New Country"
In this example, the activity updates the vendor with ID "123" by modifying the vendor name, email, phone, city, state, and country details.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Vendors/Delete Vendor/index.html

Delete Vendor
AutomatR.Zoho.Activities.DeleteVendor
The "Delete Vendor" activity in AutomatR is part of the Zoho activities package, allowing the deletion of vendor information in Zoho CRM. This activity streamlines vendor management tasks, enhancing automation workflows.
Properties
​
Name
Description
Input
Vendor ID
Enter the vendor ID to uniquely identify the vendor. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to Use
​
Drag and drop the "Delete Vendor" activity onto the workflow.
Configure the properties by specifying the Zoho CRM vendor ID to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified Zoho CRM vendor.
Example
​
Consider an example where the "Delete Vendor" activity is used to delete a Zoho CRM vendor with the vendor ID "123":
Delete Vendor:
  Vendor ID: "123"
  Delay: 0
In this example, the activity attempts to delete the Zoho CRM vendor with the specified vendor ID. The delay is set to 0, indicating that the activity should start immediately. The success or failure of the deletion operation is determined by any exceptions thrown during execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Vendors/Get Vendors/index.html

Get Vendors
AutomatR.Zoho.Activities.GetVendors
The "Get Vendors" activity in AutomatR is part of the Zoho activities package, designed to retrieve information about vendors. This activity streamlines the process of fetching vendor details, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs information about vendors. Variables of type 
GetVendorsModels
 to store the vendor information.
How to Use
​
Drag and drop the "Get Vendors" activity onto the workflow.
Configure the properties by specifying the delay.
Execute the workflow to retrieve information about vendors.
Example
​
Consider an example where the "Get Vendors" activity is used to retrieve information about all vendors:
Get Vendors:
  Delay: 0
  Result: vendorsInformation
In this example, the activity retrieves information about all vendors with a delay of 0 seconds. The result, i.e., the vendors' information, is stored in the 
vendorsInformation
 variable for further handling in the workflow.
Note:
 This documentation assumes that you have the necessary access tokens and permissions for interacting with Zoho CRM APIs. It handles various error scenarios, such as failed API requests.
Additional Information:
The activity uses the Zoho CRM API to retrieve vendors' information.
The retrieved information is of type 
GetVendorsModels
, providing detailed data about the vendors.
Important:
Ensure that the Zoho Scope activity encapsulates the "Get Vendors" activity for proper execution.
The delay property allows you to control the time before starting the activity, aiding in synchronization with other workflow elements.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Vendors/Get Vendor/index.html

Get Vendor
AutomatR.Zoho.Activities.GetVendor
The "Get Vendor" activity in AutomatR is part of the Zoho activities package, designed to retrieve specified vendor information. This activity streamlines the process of fetching vendor details, enhancing automation workflows.
Properties
​
Name
Description
Input
Vendor ID
Enter the vendor ID for the vendor whose information you want to retrieve. String variables containing the vendor ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the specified vendor details. Variables of type 
GetVendorModels
 to store the vendor information.
How to Use
​
Drag and drop the "Get Vendor" activity onto the workflow.
Configure the properties by specifying the delay and the vendor ID.
Execute the workflow to retrieve information about the specified vendor.
Example
​
Consider an example where the "Get Vendor" activity is used to retrieve information about a vendor with the ID "VENDOR123":
Get Vendor:
  Delay: 0
  Vendor ID: "VENDOR123"
  Result: vendorDetails
In this example, the activity retrieves information about the vendor with the ID "VENDOR123" with a delay of 0 seconds. The result, i.e., the vendor details, is stored in the 
vendorDetails
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Products/Delete Product/index.html

Delete Product
AutomatR.Zoho.Activities.DeleteProduct
The "Delete Product" activity in AutomatR is part of the Zoho activities package, allowing the deletion of a product in Zoho CRM by its ID. This activity streamlines product management tasks, enhancing automation workflows.
Properties
​
Name
Description
Input
Product ID
Enter the product ID of the Zoho CRM product to be deleted. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to Use
​
Drag and drop the "Delete Product" activity onto the workflow.
Configure the properties by specifying the Zoho CRM product ID to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified Zoho CRM product.
Example
​
Consider an example where the "Delete Product" activity is used to remove a Zoho CRM product with the product ID "12345":
Delete Product:
  Product ID: "12345"
  Delay: 0
In this example, the activity deletes the Zoho CRM product with the specified product ID. The delay is set to 0, indicating that the activity should start immediately. There is no output for this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Products/Get Products/index.html

Get Products
AutomatR.Zoho.Activities.GetProducts
The "Get Products" activity in AutomatR is part of the Zoho activities package, designed to retrieve information about all products. This activity streamlines the process of fetching products data, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the products information. Variables of type 
GetProductsModel
 to store the products data.
How to Use
​
Drag and drop the "Get Products" activity onto the workflow.
Configure the properties by specifying the delay.
Execute the workflow to retrieve information about all products.
Example
​
Consider an example where the "Get Products" activity is used to retrieve information about all products:
Get Products:
  Delay: 0
  Result: productsData
In this example, the activity retrieves information about all products with a delay of 0 seconds. The result, i.e., the products information, is stored in the 
productsData
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Products/Update Product/index.html

Update Product
AutomatR.Zoho.Activities.UpdateProduct
The "Update Product" activity in AutomatR is part of the Zoho activities package, facilitating the automation of product information updates in Zoho CRM. This activity leverages the Zoho CRM API to modify various attributes of a product, providing a streamlined approach to product management within Zoho CRM.
Properties
​
Name
Description
Input
Product ID
Specifies the ID of the product to be updated. It uniquely identifies the product within Zoho CRM. String variables containing the product ID.
Product Owner
Specifies the ID of the product owner. String variables containing the product owner ID.
Product Name
Specifies the new name for the product. String variables containing the product name.
Product Code
Specifies the new product code. String variables containing the product code.
Vendor ID
Specifies the new vendor ID. String variables containing the vendor ID.
Product Active
Specifies whether the product should be active. Enumeration (
EmailOptOut
) indicating whether the product is active.
Taxable
Specifies whether tax should be enabled. Enumeration (
EmailOptOut
) indicating whether tax is enabled.
Manufacturer
Specifies the new manufacturer for the product. String variables containing the manufacturer information.
Product Category
Specifies the new product category. String variables containing the product category.
Sales Start Date
Specifies the new sales start date in the format "DD-MM-YYYY". String variables containing the sales start date.
Sales End Date
Specifies the new sales end date in the format "DD-MM-YYYY". String variables containing the sales end date.
Support Start Date
Specifies the new support start date in the format "DD-MM-YYYY". String variables containing the support start date.
Support End Date
Specifies the new support end date in the format "DD-MM-YYYY". String variables containing the support end date.
Unit Price
Specifies the new unit price for the product. Double variables containing the unit price.
Commission Rate
Specifies the new commission rate for the product. Double variables containing the commission rate.
Usage Unit
Specifies the new usage unit for the product. String variables containing the usage unit.
Quantity Ordered
Specifies the new quantity ordered for the product. Double variables containing the quantity ordered.
Quantity In Stock
Specifies the new quantity in stock for the product. Double variables containing the quantity in stock.
Reorder Level
Specifies the new reorder level for the product. Double variables containing the reorder level.
Handler ID
Specifies the new handler ID for the product. String variables containing the handler ID.
Quantity In Demand
Specifies the new quantity in demand for the product. Double variables containing the quantity in demand.
Description Information
Specifies the new description for the product. String variables containing the product description.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the wait time in seconds before starting the activity. Integer variables containing the delay duration.
Output
Result
Outputs the updated product ID after the "Update Product" operation. String variables containing the updated product ID.
How to use:
Drag and drop the "Update Product" activity onto the workflow.
Configure the properties by specifying the product ID and desired changes to product attributes.
Optionally, configure the delay.
Execute the workflow to update the specified product in Zoho CRM.
Example:

Consider an example where the "Update Product" activity is used to modify a product's information:
Update Product:
  Delay: 5
  Product ID: "1234567890123456"
  Product Owner: "7890123456789012"
  Product Name: "New Product Name"
  Product Code: "ABC123"
  Vendor ID: "4567890123456789"
  Product Active: Enable
  Taxable: Disable
  Manufacturer: "New Manufacturer"
  Product Category: "Electronics"
  Sales Start Date: "15-01-2023"
  Sales End Date: "31-12-2023"
  Support Start Date: "20-01-2023"
  Support End Date: "30-12-2023"
  Unit Price: 99.99
  Commission Rate: 0.05
  Usage Unit: "Unit"
  Quantity Ordered: 100
  Quantity In Stock: 50
  Reorder Level: 20
  Handler ID: "3456789012345678"
  Quantity In Demand: 75
  Description Information: "Updated product description"
  Result: UpdatedProductID
In this example, the activity updates the specified product with the provided information, and the result is stored in the string variable "UpdatedProductID" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Products/Create Product/index.html

Create Product
AutomatR.Zoho.Activities.CreateProduct
The "Create Product" activity in AutomatR is part of the Zoho Products activities package, enabling automation processes to create new products within Zoho CRM. This activity streamlines the product creation process, allowing for efficient management of products in Zoho CRM.
Properties
​
Name
Description
Input
Product Name
Specifies the name of the product to be created. String variables containing the product name.
Product Owner
Specifies the product owner's ID. String variables containing the product owner's ID.
Product Code
Specifies the product code. String variables containing the product code.
Vendor ID
Specifies the vendor's ID. String variables containing the vendor's ID.
Product Active
If checked, the product will be in an active status. Boolean variables indicating whether the product is active.
Taxable
If checked, tax will be enabled for the product. Boolean variables indicating whether tax is enabled.
Manufacturer
Specifies the manufacturer of the product. String variables containing the manufacturer information.
Product Category
Specifies the product category. String variables containing the product category.
Sales Start Date
Specifies the sales start date (e.g., 29-11-1999). String variables containing the sales start date.
Sales End Date
Specifies the sales end date (e.g., 29-11-1999). String variables containing the sales end date.
Support Start Date
Specifies the support start date (e.g., 29-11-1999). String variables containing the support start date.
Support End Date
Specifies the support end date (e.g., 29-11-1999). String variables containing the support end date.
Unit Price
Specifies the unit price of the product. Double variables containing the unit price.
Commission Rate
Specifies the commission rate. Double variables containing the commission rate.
Usage Unit
Specifies the usage unit. String variables containing the usage unit.
Quantity Ordered
Specifies the quantity ordered. Double variables containing the quantity ordered.
Quantity In Stock
Specifies the quantity in stock (integer type). Double variables containing the quantity in stock.
Reorder Level
Specifies the reorder level. Double variables containing the reorder level.
Handler ID
Specifies the handler's ID. String variables containing the handler's ID.
Quantity In Demand
Specifies the quantity in demand. Double variables containing the quantity in demand.
Description Information
Specifies the description for the product. String variables containing the product description.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Product" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the created product ID of type string. String variables to store the created product ID.
How to use:
Drag and drop the "Create Product" activity onto the workflow.
Configure the properties by specifying the necessary information for product creation.
Optionally, configure the delay.
Execute the workflow to create the specified product in Zoho CRM.
Example:

Consider an example where the "Create Product" activity is used to create a product named "SampleProduct" with a unit price of $100:
Create Product:
  Delay: 1
  Product Name: "SampleProduct"
  Unit Price: 100.0
  Product Owner: "123456"
  Vendor ID: "789012"
  Product Active: True
  Result: CreatedProductID
In this example, the activity creates a product named "SampleProduct" with a unit price of $100. The product owner and vendor IDs are provided, and the result of the operation (created product ID) is stored in the string variable "CreatedProductID" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Leads/Update lead/index.html

Update Lead
AutomatR.Zoho.Activities.UpdateLead
The "Update Lead" activity in AutomatR is part of the Zoho Leads package, allowing automation processes to update lead information within the Zoho CRM. This activity simplifies the task of modifying lead details, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
ID
Specifies the lead ID to identify the lead to be updated. String variables containing the lead ID.
Company
(Optional) Name of the company associated with the lead. String variables containing the company name.
Last Name
(Optional) Specifies the last name of the lead. String variables containing the last name.
First Name
(Optional) Specifies the first name of the lead. String variables containing the first name.
Title
(Optional) Specifies the title or designation of the lead. String variables containing the title.
Mobile
(Optional) Specifies the mobile number of the lead. String variables containing the mobile number.
Email
(Optional) Specifies the email address of the lead. String variables containing the email address.
State
(Optional) Specifies the state associated with the lead. String variables containing the state.
Phone
(Optional) Specifies the phone number of the lead. String variables containing the phone number.
Annual Revenue
(Optional) Specifies the annual revenue associated with the lead. Double variables containing the annual revenue.
Fax
(Optional) Specifies the fax number of the lead. String variables containing the fax number.
Website
(Optional) Specifies the website associated with the lead. String variables containing the website.
No Of Employees
(Optional) Specifies the number of employees associated with the lead. Long variables containing the number of employees.
Skype ID
(Optional) Specifies the Skype ID associated with the lead. String variables containing the Skype ID.
Secondary Email
(Optional) Specifies the secondary email address of the lead. String variables containing the secondary email.
Twitter
(Optional) Specifies the Twitter handle associated with the lead. String variables containing the Twitter handle.
Street
(Optional) Specifies the street address associated with the lead. String variables containing the street address.
City
(Optional) Specifies the city associated with the lead. String variables containing the city.
Zip Code
(Optional) Specifies the ZIP code associated with the lead. String variables containing the ZIP code.
Country
(Optional) Specifies the country associated with the lead. String variables containing the country.
Description
(Optional) Specifies additional details or description of the lead. String variables containing the description.
Email Opt Out
(Optional) Specifies the email opt-out status of the lead. Select from options: 
Yes
, 
No
, or 
None
.
Lead Owner
(Optional) Specifies the user ID of the lead owner. String variables containing the user ID.
Lead Source
Specifies the lead source. Select from available options.
Lead Status
Specifies the lead status. Select from available options.
Rating
Specifies the lead rating. Select from available options.
Industry
Specifies the lead industry. Select from available options.
Salutation
Specifies the lead salutation. Select from available options.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Email Opt Out
Specifies whether the lead has opted out of email communications. Select from options: 
Yes
, 
No
, or 
None
.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Lead" activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Update Lead" operation, indicating success or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Update Lead" activity onto the workflow.
Configure the properties by specifying the lead ID and other optional details for update.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified lead in the Zoho CRM.
Example
​
Consider an example where the "Update Lead" activity is used to modify the details of a lead with ID "12345":
Update Lead:
  Display Name: "Update Lead Details"
  ID: "12345"
  Company: "ABC Corp"
  Last Name: "Doe"
  First Name: "John"
  Title: "Manager"
  Mobile: "+123456789"
  Email: "john.doe@example.com"
  State: "California"
  Phone: "+987654321"
  Annual Revenue: 100000.00
  Fax: "+1122334455"
  Website: "www.example.com"
  No Of Employees: 50
  Skype ID: "john_doe_skype"
  Secondary Email: "john.secondary@example.com"
  Twitter: "@john_doe"
  Street: "123 Main St"
  City: "Cityville"
  Zip Code: "12345"
  Country: "USA"
  Description: "Lead details updated via workflow."
  Email Opt Out: No
  Lead Owner: "67890"  # User ID of the lead owner
  Lead Source: OnlineForm
  Lead Status: InProgress
  Rating: Hot
  Industry: Technology/Software
  Salutation: Mr.
In this example, the activity updates the lead with ID "12345" with the specified details. The result of the operation (success or failure) is stored in the Boolean variable "Result" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Leads/Create Lead/index.html

Create Lead
AutomatR.Zoho.Activities.CreateLead
The "Create Lead" activity in AutomatR is part of the Zoho Leads package, facilitating the creation of a new lead in the Zoho CRM system. This activity streamlines the process of populating lead information within Zoho CRM, enhancing automation workflows.
Properties
​
Name
Description
Input
Company
Enter the company name. String variables containing the company name.
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Email
Enter the email address. String variables containing the email address.
Email Opt Out
Enter the email opt-out. Boolean variable indicating whether the email should be opted out.
First Name
Enter the first name. String variables containing the first name.
Last Name
Enter the last name. String variables containing the last name.
Lead Owner
Enter the user ID for the lead owner. String variables containing the user ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Annual Revenue
Enter the annual revenue. Double variables containing the annual revenue.
City
Enter the city. String variables containing the city.
Country
Enter the country. String variables containing the country.
Description
Enter the description. String variables containing the description.
FAX
Enter the fax number. String variables containing the fax number.
Industry
Select the industry. Enumeration variable (e.g., 
AutomatR.ZohoLeads.Enum.Industry
).
Lead Source
Select the lead source. Enumeration variable (e.g., 
AutomatR.ZohoLeads.Enum.LeadSource
).
Lead Status
Select the lead status. Enumeration variable (e.g., 
AutomatR.ZohoLeads.Enum.LeadStatus
).
No Of Employees
Enter the number of employees. String variables containing the number of employees.
Phone
Enter the phone number. String variables containing the phone number.
Rating
Select the rating. Enumeration variable (e.g., 
AutomatR.ZohoLeads.Enum.Rating
).
Salutation
Select the salutation. Enumeration variable (e.g., 
AutomatR.ZohoLeads.Enum.Salunation
).
Secondary Email
Enter the secondary email. String variables containing the secondary email.
Skype ID
Enter the Skype ID. String variables containing the Skype ID.
State
Enter the state. String variables containing the state.
Street
Enter the street. String variables containing the street.
Title
Enter the title or designation. String variables containing the title.
Twitter
Enter the Twitter account. String variables containing the Twitter account.
Website
Enter the website. String variables containing the website.
Zip Code
Enter the ZIP code. String variables containing the ZIP code.
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the lead ID. String variable to store the ID of the created lead.
How to use:
Drag and drop the "Create Lead" activity onto the workflow.
Configure the required input properties like Company, Email, First Name, and Last Name.
Optionally, configure additional properties based on your use case.
Execute the workflow to create a new lead in the Zoho CRM system.
Example:

Consider an example where the "Create Lead" activity is used to create a new lead with the following details:
Create Lead:
  Company: "ABC Corp"
  Email: "john.doe@example.com"
  First Name: "John"
  Last Name: "Doe"
  Lead Owner: "user123"
  Result: leadID
In this example, the activity creates a new lead with the specified details, and the lead ID is stored in the variable "leadID" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Leads/Get Leads/index.html

Get Leads
AutomatR.Zoho.Activities.GetLeads
The "Get Leads" activity in AutomatR is part of the Zoho activities package, designed to retrieve information about leads from Zoho CRM. This activity streamlines the process of fetching lead data, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the information about leads. Variables of type 
GetLeadsModels
 to store the leads information.
How to Use
​
Drag and drop the "Get Leads" activity onto the workflow.
Configure the properties by specifying the delay and output variable for the leads information.
Execute the workflow to retrieve information about leads from Zoho CRM.
Example
​
Consider an example where the "Get Leads" activity is used to retrieve information about all leads from Zoho CRM:
Get Leads:
  Delay: 0
  Result: leadsInformation
In this example, the activity attempts to retrieve details of all leads from Zoho CRM. The delay is set to 0, indicating that the activity should start immediately. The result, i.e., the leads information, is stored in the 
leadsInformation
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Leads/Get Lead/index.html

Get Lead
AutomatR.Zoho.Activities.GetLead
The "Get Lead" activity in AutomatR is part of the Zoho activities package, designed to retrieve lead information based on the provided lead ID from Zoho CRM. This activity streamlines the process of fetching lead data, enhancing automation workflows.
Properties
​
Name
Description
Input
ID
Enter the ID of the lead for which you want to retrieve information. String variables containing the lead ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the lead information of the specified ID. Variables of type 
GetLeadsModels
 to store the lead information.
How to Use
​
Drag and drop the "Get Lead" activity onto the workflow.
Configure the properties by specifying the delay, lead ID, and output variable for the lead information.
Execute the workflow to retrieve information for the specified lead from Zoho CRM.
Example
​
Consider an example where the "Get Lead" activity is used to retrieve information for a lead with the ID "12345" from Zoho CRM:
Get Lead:
  Delay: 0
  ID: "12345"
  Result: leadInformation
In this example, the activity attempts to retrieve the details of the lead with the ID "12345" from Zoho CRM. The delay is set to 0, indicating that the activity should start immediately. The result, i.e., the lead information, is stored in the 
leadInformation
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Leads/Delete Lead/index.html

Delete Lead
AutomatR.Zoho.Activities.DeleteLead
The "Delete Lead" activity in AutomatR is part of the Zoho activities package, providing the capability to delete a lead in Zoho CRM based on its lead ID. This activity streamlines lead management tasks in Zoho CRM, enhancing automation workflows.
Properties
​
Name
Description
Input
ID
Enter the lead ID of the Zoho CRM lead to be deleted. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to Use
​
Drag and drop the "Delete Lead" activity onto the workflow.
Configure the properties by specifying the Zoho CRM lead ID to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified Zoho CRM lead.
Example
​
Consider an example where the "Delete Lead" activity is used to remove a Zoho CRM lead with the lead ID "123456":
Delete Lead:
  ID: "123456"
  Delay: 0
In this example, the activity deletes the Zoho CRM lead with the specified lead ID. The delay is set to 0, indicating that the activity should start immediately. There is no output for this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Roles/Delete Role/index.html

Delete Role
AutomatR.Zoho.Activities.DeleteRole
The "Delete Role" activity in AutomatR is part of the Zoho activities package, allowing the transfer of users and deletion of a Zoho CRM role. This activity streamlines role management tasks, enhancing automation workflows.
Properties
​
Name
Description
Input
Role ID
Enter the role ID of the Zoho CRM role to be deleted. This is a required field.
Transfer To ID
Specify the role ID to which ownership should be transferred before deleting. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to Use
​
Drag and drop the "Delete Role" activity onto the workflow.
Configure the properties by specifying the Zoho CRM role ID to be deleted and the role ID for ownership transfer.
Optionally, configure the delay and customize the display name.
Execute the workflow to transfer ownership and delete the specified Zoho CRM role.
Example
​
Consider an example where the "Delete Role" activity is used to transfer ownership to role ID "456" before deleting the Zoho CRM role with the role ID "123":
Delete Role:
  Role ID: "123"
  Transfer To ID: "456"
  Delay: 0
In this example, the activity transfers ownership to the specified role ID before deleting the Zoho CRM role. The delay is set to 0, indicating that the activity should start immediately. There is no output for this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Roles/Update Role/index.html

Update Role
AutomatR.Zoho.Activities.UpdateRole
The "Update Role" activity in AutomatR is part of the Zoho Roles activities package, facilitating the automation of tasks related to updating role details within Zoho CRM. This activity allows for dynamic updates to role information, enhancing workflow flexibility.
Properties
​
Name
Description
Input
Result
Outputs the updated role ID in the form of a string. Variables of string type to store the updated role ID.
Role ID
Specifies the ID of the role to be updated. String variables containing the role ID. This is a required field.
Role Name
Specifies the new name for the role. String variables containing the updated role name. This is an optional field.
Reporting To
Represents the unique ID of the role higher in the role hierarchy to the current role. String variables containing the ID. This is an optional field.
Description
Represents the description of the role. String variables containing the updated role description. This is an optional field.
Share With Peers
If checked, users with the current role can share records with other users. Boolean variables to indicate whether sharing with peers is enabled. This is an optional field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Role" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: 5 seconds.
Output
Result
Outputs the updated role ID in the form of a string. Variables of string type to store the updated role ID.
How to use:
Drag and drop the "Update Role" activity onto the workflow.
Configure the properties by specifying the role ID and, optionally, the new name, reporting ID, description, and share with peers.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified role in Zoho CRM.
Example:

Consider an example where the "Update Role" activity is used to modify the name and description of a role with the ID "12345":
Update Role:
  Delay: 2 seconds
  Role ID: "12345"
  Role Name: "Updated Role"
  Reporting To: "54321"
  Description: "Updated description of the role."
  Share With Peers: true
  Result: updatedRoleID
In this example, the activity updates the role with the ID "12345" by changing its name to "Updated Role," reporting to "54321," updating the description, and enabling sharing with peers. The ID of the updated role is stored in the variable "updatedRoleID" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Roles/Get Roles/index.html

Get Roles
AutomatR.Zoho.Activities.GetRoles
The "Get Roles" activity in AutomatR is part of the Zoho activities package, designed to retrieve information about all roles. This activity streamlines the process of fetching roles data, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the roles information. Variables of type 
GetRolesModel
 to store the roles data.
How to Use
​
Drag and drop the "Get Roles" activity onto the workflow.
Configure the properties by specifying the delay.
Execute the workflow to retrieve information about all roles.
Example
​
Consider an example where the "Get Roles" activity is used to retrieve information about all roles:
Get Roles:
  Delay: 0
  Result: rolesData
In this example, the activity retrieves information about all roles with a delay of 0 seconds. The result, i.e., the roles information, is stored in the 
rolesData
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Roles/Add Role/index.html

Add Role
AutomatR.Zoho.Activities.AddRole
The "Add Role" activity in AutomatR is part of the Zoho CRM activities package, providing functionality to create a new role within the Zoho CRM system. This activity streamlines the process of managing roles, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Role Name
Specifies the name for the new role you are creating. String variables containing the role name.
Role ID
Specifies the role ID of the parent role under which you are creating the new role. String variables containing the role ID.
Description
Provides a description for the new role. String variables containing the role description.
Share With Peers
If checked, users with the current role can share records with other users. Boolean variables indicating whether to enable sharing with peers.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Role" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
Output
Result
Outputs the role ID of the newly created role. String variables containing the new role ID.
How to use:
Drag and drop the "Add Role" activity onto the workflow.
Configure the properties by specifying the role name, role ID, description, and optional settings such as delay and sharing with peers.
Execute the workflow to create a new role within the Zoho CRM system.
The role ID of the newly created role is stored in the "Result" variable for further reference.
Example:

Consider an example where the "Add Role" activity is used to create a new role named "Manager" under the parent role with the ID "12345" with a description and sharing with peers enabled:
Add Role:
  Delay: 0
  Role Name: "Manager"
  Role ID: "12345"
  Description: "Role for managerial tasks"
  Share With Peers: true
  Result: newRoleID
In this example, the activity creates a new role named "Manager" with the specified properties. The role ID of the newly created role is stored in the variable "newRoleID" for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Scope/Zoho Scope/index.html

Zoho Scope
AutomatR.Zoho.Activities.ZohoScope
The "Zoho Scope" activity in AutomatR provides a scope for executing activities related to the Zoho service. It enables you to perform Zoho-specific actions within a defined scope, such as authenticating with Zoho and executing subsequent activities.
Properties
​
Name
Description
Input
Body
Defines the sequence of activities to be executed within the Zoho Scope. This is where Zoho-specific activities should be placed for execution within the scope.
Refresh Token
Allows you to provide authentication details for Zoho. Clicking on this enables Zoho OAuth authentication with options to approve or reject. Utilizes the 
AuthDetails
 type for authentication details.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Zoho Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Zoho Scope" activity onto the workflow.
Configure the properties by providing the required authentication details through the "Refresh Token" property.
Optionally, configure the delay before executing the activities within the scope.
Place Zoho-specific activities within the "Body" of the "Zoho Scope" to perform actions such as updating vendors, creating leads, etc.
Execute the workflow to perform Zoho-related actions within the defined scope.
Example:

Consider an example where the "Zoho Scope" activity is used to authenticate with Zoho and update a vendor's information:
Zoho Scope:
  Refresh Token: (Provide Zoho OAuth authentication details)
  Delay: 0
  Body:
    Update Vendor:
      Delay: 0
      ID: "12345"
      Vendor Name: "New Vendor Name"
      Email: "newemail@example.com"
In this example, the "Zoho Scope" activity is used to authenticate with Zoho using the provided refresh token. Within the scope, the "Update Vendor" activity is used to update the vendor information, including the vendor's name and email address.
Note:
 The actual properties and activities within the "Body" will depend on the specific Zoho-related actions you want to perform within the scope.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Notes/Get Notes/index.html

Get Notes
AutomatR.Zoho.Activities.GetNotes
The "Get Notes" activity in AutomatR is part of the Zoho activities package, designed to retrieve notes information from Zoho CRM. This activity streamlines the process of fetching notes data, enhancing automation workflows.
Properties
​
Name
Description
Input
Page Number
Enter the page number to retrieve records from the respective page. The default value is 1.
Per Page
Enter the number of records per page between 1 and 200, default is 200.
Note Title
Select note title if you want to display note title only or select none.
Note Content
Select note content if you want to display note content only or select none.
Parent Id
Select parent id if you want to display parent id only or select none.
Owner
Select owner if you want to display owner only or select none.
Module
Select module if you want to display module only or select none.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Page Number
Enter the page number to retrieve records from the respective page. The default value is 1.
Per Page
Enter the number of records per page between 1 and 200, default is 200.
Note Title
Select note title if you want to display note title only or select none.
Note Content
Select note content if you want to display note content only or select none.
Parent Id
Select parent id if you want to display parent id only or select none.
Owner
Select owner if you want to display owner only or select none.
Module
Select module if you want to display module only or select none.
Output
Result
Outputs the notes information. Variables of type 
GetNotesModels
 to store the notes data.
How to Use
​
Drag and drop the "Get Notes" activity onto the workflow.
Configure the properties by specifying the delay, page number, per page, and optional fields to display (note title, note content, parent id, owner, module).
Execute the workflow to retrieve notes information from Zoho CRM.
Example
​
Consider an example where the "Get Notes" activity is used to retrieve notes information from Zoho CRM:
Get Notes:
  Delay: 0
  Page Number: 1
  Per Page: 10
  Note Title: Selected
  Note Content: None
  Parent Id: None
  Owner: Selected
  Module: None
  Result: notesInformation
In this example, the activity retrieves notes information with a delay of 0 seconds, from page 1, displaying 10 records per page. It selects to display note titles and owner information. The result, i.e., the notes information, is stored in the 
notesInformation
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Notes/Delete Note/index.html

Delete Note
AutomatR.Zoho.Activities.DeleteNote
The "Delete Note" activity in AutomatR is part of the Zoho activities package, allowing the deletion of specific note information in Zoho CRM. This activity streamlines note management tasks, enhancing automation workflows.
Properties
​
Name
Description
Input
Note ID
Enter the note ID of the Zoho CRM note to be deleted. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to Use
​
Drag and drop the "Delete Note" activity onto the workflow.
Configure the properties by specifying the Zoho CRM note ID to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified Zoho CRM note.
Example
​
Consider an example where the "Delete Note" activity is used to remove a Zoho CRM note with the note ID "987654":
Delete Note:
  Note ID: "987654"
  Delay: 0
In this example, the activity deletes the Zoho CRM note with the specified note ID. The delay is set to 0, indicating that the activity should start immediately. There is no output for this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Notes/Update Note/index.html

Update Note
AutomatR.Zoho.Activities.UpdateNote
The "Update Note" activity in AutomatR is part of the Zoho Notes activities package, facilitating the automation of tasks related to updating specific note information within Zoho CRM. This activity enhances workflow efficiency by allowing dynamic updates to note details.
Properties
​
Name
Description
Input
Note ID
Specifies the ID of the note to be updated. String variables containing the note ID. This is a required field.
Note Title
Specifies the new title for the note. String variables containing the updated note title. This is an optional field.
Note Content
Specifies the new content for the note. String variables containing the updated note content. This is an optional field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Note" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: 5 seconds.
Output
Result
Outputs the ID of the updated note in the form of a string. Variables of string type to store the updated note ID.
How to use:
Drag and drop the "Update Note" activity onto the workflow.
Configure the properties by specifying the note ID and, optionally, the new title and content.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified note in Zoho CRM.
Example:

Consider an example where the "Update Note" activity is used to modify the title and content of a note with the ID "12345":
Update Note:
  Delay: 2 seconds
  Note ID: "12345"
  Note Title: "Updated Title"
  Note Content: "Updated content of the note."
  Result: updatedNoteID
In this example, the activity updates the note with the ID "12345" by changing its title to "Updated Title" and the content to "Updated content of the note." The ID of the updated note is stored in the variable "updatedNoteID" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Notes/Create Note/index.html

Create Note
AutomatR.Zoho.Activities.CreateNote
The "Create Note" activity in AutomatR is part of the Zoho Notes activities package, allowing you to automate the process of creating notes within the Zoho platform. This activity streamlines the creation of notes associated with specific records in Zoho CRM, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
NoteContent
Specifies the content or details of the note. String variables containing the note content.
Parent ID
Specifies the ID of the record to which the note should be associated. String variables containing the parent record ID.
Title
Specifies the title or subject of the note. String variables containing the note title.
Module
Specifies the module or category to which the note belongs. String variables containing the module name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Note" activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the ID of the created note. String variables containing the note ID.
How to use:
Drag and drop the "Create Note" activity onto the workflow.
Configure the properties by specifying the note content, parent record ID, note title, and module name.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a note within Zoho CRM.
Example:

Consider an example where the "Create Note" activity is used to add a note to a lead record in Zoho CRM:
Create Note:
  Display Name: "Lead Note"
  Note Content: "Follow up after the initial meeting."
  Parent ID: "example_lead_record_id"
  Title: "Follow-up"
  Module: "Leads"
  Result: createdNoteID
In this example, the activity creates a note with the content "Follow up after the initial meeting" associated with the lead record identified by the record ID "example_lead_record_id." The note is titled "Follow-up," and the module is specified as "Leads." The ID of the created note is stored in the variable "createdNoteID" for further reference in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Meeting/Create Meeting/index.html

Create Meeting
AutomatR.Zoho.Activities.CreateMeeting
The "Create Meeting" activity in AutomatR is part of the Zoho Meeting activities package, facilitating the automation of meeting creation within the Zoho platform. This activity streamlines the process of scheduling and setting up meetings, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
All Day
Indicates whether the meeting is an all-day event. Boolean variable specifying the all-day status of the meeting.
Description
Specifies the description or agenda of the meeting. String variables containing the meeting description.
From Date
Specifies the starting date of the meeting in dd/mm/yyyy format. DateTime variable containing the starting date.
From Time
Specifies the starting time of the meeting. DateTime variable containing the starting time.
Host
Specifies the host ID or account owner of the meeting. String variables containing the host ID.
Host Reminder
Specifies the reminder setting for the host. Choose from available options.
Location
Specifies the location of the meeting. String variables containing the meeting location.
Meeting Name
Specifies the name or title of the meeting. String variables containing the meeting name.
Organisation ID
Specifies the ID of the organization associated with the meeting. String variables containing the organization ID.
Participants
Specifies the participants or attendees of the meeting. String variables containing participant information.
Participants Reminder
Specifies the reminder setting for the participants. Choose from available options.
To Date
Specifies the ending date of the meeting in dd/mm/yyyy format. DateTime variable containing the ending date.
To Time
Specifies the ending time of the meeting. DateTime variable containing the ending time.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Meeting" activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Create Meeting" activity onto the workflow.
Configure the properties by specifying the meeting details, including name, location, date, time, and participants.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the scheduled meeting in Zoho.
Example:

Consider an example where the "Create Meeting" activity is used to schedule a team meeting:
Create Meeting:
  Display Name: "Team Meeting"
  Meeting Name: "Weekly Team Sync"
  Organisation ID: "example_organization_id"
  Location: "Conference Room A"
  From Date: 01/05/2023
  From Time: 09:00 AM
  To Date: 01/05/2023
  To Time: 10:00 AM
  Participants Reminder: 15 Minutes
  Host Reminder: 30 Minutes
  Description: "Discuss project updates and action items."
  All Day: False
  Host: "example_host_id"
  Participants: "john.doe@example.com, jane.smith@example.com"
In this example, the activity creates a meeting named "Weekly Team Sync" scheduled for one hour, starting at 9:00 AM and ending at 10:00 AM on January 5, 2023, in Conference Room A. Participants are reminded 15 minutes before the meeting, and the host is reminded 30 minutes before the meeting. The description provides additional context, and the meeting is not an all-day event. The host ID and participant emails are specified for the meeting.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Accounts/Create Account/index.html

Create Account
AutomatR.Zoho.Activities.CreateAccount
The "Create Account" activity in AutomatR is part of the Zoho CRM activities package, facilitating the creation of a new account within the Zoho CRM platform. This activity streamlines the process of populating account details and adding them to the CRM database.
Properties
​
Name
Description
Input
Account Owner
Enter the user ID as the owner of the account. String variables containing the user ID.
Account Name
Enter the name of the account to be created. String variables containing the account name.
Account Site
Enter the site associated with the account. String variables containing the account site.
Parent Account
Enter the ID of the parent account, if applicable. String variables containing the parent account ID.
Account Number
Enter the account number. Integer variables containing the account number.
Annual Revenue
Enter the annual revenue of the account. Integer variables containing the annual revenue.
Description
Enter a description for the account. String variables containing the account description.
Phone
Enter the phone number associated with the account. String variables containing the phone number.
Fax
Enter the fax number associated with the account. String variables containing the fax number.
Website
Enter the website URL associated with the account. String variables containing the website URL.
Ticker Symbol
Enter the ticker symbol associated with the account. String variables containing the ticker symbol.
Employees
Enter the number of employees in the account. String variables containing the number of employees.
SIC Code
Enter the Standard Industrial Classification (SIC) code for the account. String variables containing the SIC code.
Billing Street
Enter the billing street address for the account. String variables containing the billing street address.
Billing City
Enter the billing city for the account. String variables containing the billing city.
Billing State
Enter the billing state for the account. String variables containing the billing state.
Billing Code
Enter the billing code for the account. String variables containing the billing code.
Billing Country
Enter the billing country for the account. String variables containing the billing country.
Shipping Street
Enter the shipping street address for the account. String variables containing the shipping street address.
Shipping City
Enter the shipping city for the account. String variables containing the shipping city.
Shipping State
Enter the shipping state for the account. String variables containing the shipping state.
Shipping Code
Enter the shipping code for the account. String variables containing the shipping code.
Shipping Country
Enter the shipping country for the account. String variables containing the shipping country.
Account Type
Choose the account type from predefined options.
Industry
Choose the industry from predefined options.
Rating
Choose the rating from predefined options.
Ownership
Choose the ownership type from predefined options.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to start the activity. Integer variables containing the delay duration.
Output
Result
Outputs the ID of the newly created account. String variables to store the account ID for future reference.
Note:
 The "Input" properties allow you to provide additional details for the account. The "Result" output provides the ID of the newly created account.
How to use
​
Drag and drop the "Create Account" activity onto the workflow.
Configure the required properties such as "Account Name" and any other relevant details.
Optionally, configure additional properties based on your use case.
Execute the workflow to create a new account in Zoho CRM.
Example
​
Consider an example where the "Create Account" activity is used to add a new account named "ABC Corporation" with the account owner "user123":
Create Account:
  Account Name: "ABC Corporation"
  Account Owner: "user123"
  Parent Account: "parentAccount1"
  Annual Revenue: 1000000
  Result: accountId
In this example, the activity creates a new account named "ABC Corporation" with the specified details, and the account ID is stored in the variable "accountId" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Accounts/Get Account/index.html

Get Account
AutomatR.Zoho.Activities.GetAccount
The "Get Account" activity in AutomatR is part of the Zoho activities package, designed to retrieve specified account information from Zoho CRM. This activity streamlines the process of fetching account details, enhancing automation workflows.
Properties
​
Name
Description
Input
Account ID
Enter the account ID to uniquely identify the Zoho CRM account. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the specified account details retrieved from Zoho CRM. Variables of type 
AccountModels
 to store the account information.
How to Use
​
Drag and drop the "Get Account" activity onto the workflow.
Configure the properties by specifying the Zoho CRM account ID for which you want to retrieve information.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the specified account details from Zoho CRM.
Example
​
Consider an example where the "Get Account" activity is used to retrieve information for a Zoho CRM account with the account ID "ABC123":
Get Account:
  Account ID: "ABC123"
  Delay: 0
  Result: accountDetails
In this example, the activity attempts to retrieve the details for the Zoho CRM account with the specified account ID. The delay is set to 0, indicating that the activity should start immediately. The result, i.e., the account details, is stored in the 
accountDetails
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Accounts/Delete Account/index.html

Delete Account
AutomatR.Zoho.Activities.DeleteAccount
The "Delete Account" activity in AutomatR is part of the Zoho activities package, facilitating the deletion of a Zoho CRM account based on its account ID. This activity streamlines the process of removing specific accounts from the CRM, enhancing automation workflows in Zoho.
Properties
​
Name
Description
Input
Account ID
Enter the account ID of the Zoho CRM account to be deleted. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to Use
​
Drag and drop the "Delete Account" activity onto the workflow.
Configure the properties by specifying the Zoho CRM account ID to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified Zoho CRM account.
Example
​
Consider an example where the "Delete Account" activity is used to remove a Zoho CRM account with the account ID "123456":
Delete Account:
  Account ID: "123456"
  Delay: 0
In this example, the activity deletes the Zoho CRM account with the specified account ID. The delay is set to 0, indicating that the activity should start immediately. There is no output for this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Accounts/Get Accounts/index.html

Get Accounts
AutomatR.Zoho.Activities.GetAccounts
The "Get Accounts" activity in AutomatR is part of the Zoho activities package, designed to retrieve information about multiple accounts from Zoho CRM. This activity streamlines the process of fetching accounts data, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Response
Outputs the list of accounts retrieved from Zoho CRM. Variables of type 
AccountModels
 to store the accounts information.
How to Use
​
Drag and drop the "Get Accounts" activity onto the workflow.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve a list of accounts from Zoho CRM.
Example
​
Consider an example where the "Get Accounts" activity is used to retrieve information for all approved accounts from Zoho CRM:
Get Accounts:
  Delay: 0
  Response: accountsList
In this example, the activity attempts to retrieve the details of all approved accounts from Zoho CRM. The delay is set to 0, indicating that the activity should start immediately. The result, i.e., the list of accounts, is stored in the 
accountsList
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Accounts/Update Account/index.html

Update Account
AutomatR.Zoho.Activities.UpdateAccount
The "Update Account" activity in AutomatR is part of the Zoho CRM activities package, facilitating the automation of updating existing accounts within Zoho CRM. This activity allows you to modify various attributes of an account, enhancing the flexibility of your automation workflows.
Properties
​
Name
Description
Input
Account ID
Specifies the unique identifier of the account to be updated. String variables containing the account ID.
Account Name
Specifies the new name for the account. String variables containing the updated account name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Account Site
Specifies the updated account site information. String variables containing the updated account site details.
Parent Account
Specifies the ID of the parent account, if applicable. String variables containing the updated parent account ID.
Account Number
Specifies the updated account number. Integer variables containing the updated account number.
Annual Revenue
Specifies the updated annual revenue for the account. Integer variables containing the updated annual revenue.
Description
Specifies the updated description for the account. String variables containing the updated account description.
Phone
Specifies the updated phone number for the account. String variables containing the updated phone number.
Fax
Specifies the updated fax number for the account. String variables containing the updated fax number.
Website
Specifies the updated website URL for the account. String variables containing the updated website URL.
Ticker Symbol
Specifies the updated ticker symbol for the account. String variables containing the updated ticker symbol.
Employees
Specifies the updated number of employees for the account. String variables containing the updated number of employees.
SIC Code
Specifies the updated Standard Industrial Classification (SIC) code for the account. String variables containing the updated SIC code.
Billing Street
Specifies the updated billing street address for the account. String variables containing the updated billing street address.
Billing City
Specifies the updated billing city for the account. String variables containing the updated billing city.
Billing State
Specifies the updated billing state for the account. String variables containing the updated billing state.
Billing Code
Specifies the updated billing code for the account. String variables containing the updated billing code.
Billing Country
Specifies the updated billing country for the account. String variables containing the updated billing country.
Shipping Street
Specifies the updated shipping street address for the account. String variables containing the updated shipping street address.
Shipping City
Specifies the updated shipping city for the account. String variables containing the updated shipping city.
Shipping State
Specifies the updated shipping state for the account. String variables containing the updated shipping state.
Shipping Code
Specifies the updated shipping code for the account. String variables containing the updated shipping code.
Shipping Country
Specifies the updated shipping country for the account. String variables containing the updated shipping country.
Account Type
Specifies the updated account type. Choose from available options.
Industry
Specifies the updated industry for the account. Choose from available options.
Rating
Specifies the updated rating for the account. Choose from available options.
Ownership
Specifies the updated ownership type for the account. Choose from available options.
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the updated account ID if the update operation is successful. String variables containing the updated account ID.
How to use:
Drag and drop the "Update Account" activity onto the workflow.
Configure the properties by providing the necessary input, optional, and output details.
Optionally, set a delay to wait before executing the "Update Account" activity.
Execute the workflow to update the specified account in Zoho CRM.
Example:

Consider an example where the "Update Account" activity is used to modify the details of an existing account:
Update Account:
  Account ID: "12345"
  Account Name: "Updated Company XYZ"
  Annual Revenue: 500000
  Phone: "+123456789"
  Result: updatedAccountID
In this example, the activity updates the account with the ID "12345," changing the account name to "Updated Company XYZ," annual revenue to 500,000, and phone number to "+123456789." The updated account ID is stored in the variable "updatedAccountID" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Users/Delete User/index.html

Delete User
AutomatR.Zoho.Activities.DeleteUser
The "Delete User" activity in AutomatR is part of the Zoho activities package, allowing the deletion of a user by their user ID in Zoho CRM. This activity streamlines user management tasks, enhancing automation workflows.
Properties
​
Name
Description
Input
User ID
Provide the user ID of the Zoho CRM user to be deleted. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Returns the status message indicating whether the user was deleted or encountered an error. String variable type.
How to Use
​
Drag and drop the "Delete User" activity onto the workflow.
Configure the properties by specifying the Zoho CRM user ID to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified Zoho CRM user.
Example
​
Consider an example where the "Delete User" activity is used to delete a Zoho CRM user with the user ID "789":
Delete User:
  User ID: "789"
  Delay: 0
In this example, the activity attempts to delete the Zoho CRM user with the specified user ID. The delay is set to 0, indicating that the activity should start immediately. The result of the deletion operation is stored in the string variable "result" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Users/Get List of Users/index.html

Get List Of Users
AutomatR.Zoho.Activities.GetListOfUsers
The "Get List Of Users" activity in AutomatR is part of the Zoho activities package, designed to retrieve information about users from Zoho CRM. This activity streamlines the process of fetching user data, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
Outputs the information about users. Variables of type 
UsersModel
 to store the users information.
How to Use
​
Drag and drop the "Get List Of Users" activity onto the workflow.
Configure the properties by specifying the delay and output variable for the users information.
Execute the workflow to retrieve information about users from Zoho CRM.
Example
​
Consider an example where the "Get List Of Users" activity is used to retrieve information about all users from Zoho CRM:
Get List Of Users:
  Delay: 0
  Result: usersInformation
In this example, the activity attempts to retrieve details of all users from Zoho CRM. The delay is set to 0, indicating that the activity should start immediately. The result, i.e., the users information, is stored in the 
usersInformation
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Users/Create User/index.html

Create User
AutomatR.Zoho.Model.CreateUser
The "Create User" activity in AutomatR is part of the Zoho Users package, facilitating the automation of user creation within Zoho CRM. This activity streamlines the process of adding new users to the CRM system, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
First Name
Specifies the first name of the user to be created. String variables containing the first name.
Last Name
Specifies the last name of the user to be created. String variables containing the last name.
Email
Specifies the email address of the user to be created. String variables containing the email address.
Role
Specifies the role ID for the user in Zoho CRM. String variables containing the role ID.
Profile
Specifies the profile ID for the user in Zoho CRM. String variables containing the profile ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create User" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the created user ID in the form of a string. Variables of relevant types (e.g., String variables) to store the user ID.
How to Use
​
Drag and drop the "Create User" activity onto the workflow.
Configure the properties by specifying the first name, last name, email, role ID, and profile ID for the new user in Zoho CRM.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the specified user within Zoho CRM.
Example
​
Consider an example where the "Create User" activity is used to add a new user to Zoho CRM:
Create User:
  Display Name: "Add New User"
  First Name: "John"
  Last Name: "Doe"
  Email: "john.doe@example.com"
  Role: "123"
  Profile: "456"
  Result: newUserID
In this example, the activity creates a new user with the provided details, and the resulting user ID is stored in the variable "newUserID" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zoho/Users/Update User/index.html

Update User
AutomatR.Zoho.Activities.UpdateUser
The "Update User" activity in AutomatR is part of the Zoho activities package, facilitating the automation of user details updates within Zoho CRM. This activity uses the Zoho CRM API to modify various attributes of a user based on the provided user ID.
Properties
​
Name
Description
Input
City
Specifies the new city for the user. String variables containing the city information.
Street
Specifies the new street for the user. String variables containing the street information.
Alias
Specifies the new alias for the user. String variables containing the alias information.
State
Specifies the new state for the user. String variables containing the state information.
Fax
Specifies the new fax number for the user. String variables containing the fax information.
Zip
Specifies the new zip code for the user. String variables containing the zip code information.
Website
Specifies the new website for the user. String variables containing the website information.
Mobile
Specifies the new mobile number for the user. String variables containing the mobile number.
Phone
Specifies the new phone number for the user. String variables containing the phone number.
First Name
Specifies the new first name for the user. String variables containing the first name.
Last Name
Specifies the new last name for the user. String variables containing the last name.
Role
Specifies the new role ID for the user. String variables containing the role ID.
Profile
Specifies the new profile ID for the user. String variables containing the profile ID.
Date Of Birth
Specifies the new date of birth for the user in the format "DD-MM-YYYY". String variables containing the date of birth.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update User" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the status message indicating whether the user update was successful or encountered errors. String variables containing the operation result.
How to use:
Drag and drop the "Update User" activity onto the workflow.
Configure the properties by specifying the user ID and desired changes to user attributes.
Optionally, configure the delay.
Execute the workflow to update the specified user in Zoho CRM.
Example:

Consider an example where the "Update User" activity is used to modify a user's information:
Update User:
  Delay: 5
  User ID: "1234567890123456"
  Street: "123 Main Street"
  City: "Cityville"
  Alias: "UserAlias"
  State: "StateABC"
  Fax: "1234567890"
  Zip: "12345"
  Website: "https://www.example.com"
  Mobile: "9876543210"
  Phone: "987654321"
  First Name: "John"
  Last Name: "Doe"
  Role: "9876543210"
  Profile: "8765432109"
  Date Of Birth: "15-01-1990"
  Result: UserUpdateStatus
In this example, the activity updates the specified user with the provided information, and the result is stored in the string variable "UserUpdateStatus" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Browse For Folder/index.html

Browse For Folder
AutomatR.DefaultActivities.FileAndFolder.BrowseForFolder
The "Browse For Folder" activity in AutomatR triggers a runtime dialog box that enables the selection of a folder for subsequent utilization within the workflow. This activity is particularly useful when user input is required to dynamically determine the folder path during workflow execution.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Browse For Folder" activity. This can be useful for handling synchronization issues. Integer variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Select Folder
Outputs the full path of the selected folder. String variable or argument to store the selected folder path. If no folder is selected or the dialog is canceled, an empty string is returned.
How to use:
Drag and drop the "Browse For Folder" activity onto the workflow.
Optionally, configure the delay and customize the display name.
Execute the workflow, and during runtime, the dialog will appear for the user to browse and select a folder.
Example:

Consider an example where the "Browse For Folder" activity is used to allow the user to select a destination folder for copying files:
Browse For Folder:
  Display Name: "Select Destination Folder"
  Select Folder: selectedFolderPath
In this example, the activity opens a dialog box, allowing the user to browse and select a destination folder. The selected folder path is stored in the string variable "selectedFolderPath" for further use in the workflow. If the user cancels the dialog, the output variable will contain an empty string.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Move Folder/index.html

Move Folder
AutomatR.DefaultActivities.FileAndFolder.MoveFolder
The "Move Folder" activity in AutomatR provides the capability to move a folder from one location to another on your local system. This activity falls under the Folder category and facilitates efficient folder management within automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the full path on your local system where you intend to move the specific folder. String variables containing the destination folder path.
Overwrite
When selected, the source folder will be merged with any folder in the destination location that shares the same name. Boolean variables to indicate whether merging is enabled.
Source Path
Specifies the full path of the folder that you intend to move. String variables containing the source folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move Folder" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Move Folder" activity onto the workflow.
Configure the properties by specifying the source path, destination path, and optionally enabling overwrite if needed.
Optionally, configure the delay.
Execute the workflow to move the specified folder to the destination location on your local system.
Example:

Consider an example where the "Move Folder" activity is used to move a folder named "Documents" from one directory to another:
Move Folder:
  Source Path: "C:\Files\Documents"
  Destination Path: "D:\Backup"
  Overwrite: true
In this example, the activity moves the "Documents" folder from the "C:\Files\" directory to the "D:\Backup\" directory. If a folder with the same name exists in the destination directory, it is merged due to the Overwrite option being set to true.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Rename Folder/index.html

Rename Folder
AutomatR.DefaultActivities.FileAndFolder.RenameFolder
The "Rename Folder" activity in AutomatR allows you to rename a specified folder. This activity falls under the Folder category and provides a convenient way to rename folders, enhancing folder management capabilities in your automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the full path of the folder that you intend to rename. String variables containing the folder path.
New Folder Name
Specifies the new name that you want to assign to the folder after renaming. String variables containing the new folder name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Rename Folder" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Rename Folder" activity onto the workflow.
Configure the properties by specifying the folder path and the new folder name.
Optionally, configure the delay.
Execute the workflow to rename the specified folder.
Example:

Consider an example where the "Rename Folder" activity is used to rename a folder named "Sample" to "NewVijay" in the "D:\RenameFolder\" directory:
Rename Folder:
  Folder Path: "D:\RenameFolder\Sample"
  New Folder Name: "NewSample"
In this example, the activity renames the "Sample" folder to "NewSample" in the specified path. Adjust the folder path and new folder name based on your requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Copy Folder/index.html

Copy Folder
AutomatR.DefaultActivities.FileAndFolder.CopyFolder
The "Copy Folder" activity in AutomatR enables you to copy a specified folder from one location to another. This activity simplifies the process of duplicating entire folders, enhancing automation workflows that involve folder management.
Properties
​
Name
Description
Input
Destination Path
Specifies the destination path where the folder should be copied to. Enter the full path of the destination folder on your local drive, or use the browse option. Example: 
"D:\CopyFolder\"
. String variables containing the destination folder path.
Include Subfolders
If checked, enables you to copy all the subfolders from the source folder to the destination folder. Boolean variables or arguments to control the inclusion of subfolders.
Overwrite
If checked, enables you to copy a folder with the same name as the one in the destination location, overwriting existing content. Boolean variables or arguments to control the overwrite behavior.
Source Path
Specify the full path of your local system for the folder to be copied. For example, 
"E:\FolderToBeCopied"
. String variables containing the source folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Folder" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Copy Folder" activity onto the workflow.
Configure the properties by specifying the source path, destination path, and optionally, set the inclusion of subfolders and overwrite behavior.
Optionally, configure the delay and customize the display name.
Execute the workflow to copy the specified folder to the destination location.
Example:

Consider an example where the "Copy Folder" activity is used to copy a folder named "FolderToBeCopied" from one location to another:
Copy Folder:
  Display Name: "Copy My Folder"
  Source Path: "E:\FolderToBeCopied"
  Destination Path: "D:\CopyFolder\"
  Include Subfolders: True
  Overwrite: False
In this example, the activity copies the entire contents of the "FolderToBeCopied" folder from the "E" drive to the "CopyFolder" directory on the "D" drive. Subfolders are included in the copy, and existing files are not overwritten, as the overwrite option is set to false.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/For Each Folder/index.html

For Each Folder
AutomatR.DefaultActivities.FileAndFolder.ForEachFolder
The "For Each Folder" activity in AutomatR is designed for iterating through folders within a specified directory, allowing users to perform a series of actions on each folder. This activity is part of the File and Folder activities package, providing flexibility in managing and processing folders within a workflow.
Properties
​
Name
Description
Input
Filter By Name
Provides the option to filter folders based on their names. Specify the folder name to apply the filter. String variables containing the folder name. If not specified, "*" is used as a wildcard for all folders.
In Folder
Specifies the complete path for the folder on which you wish to perform operations. String variables containing the folder path.
Include Subfolders
Indicates whether to expand the search to include all subfolders of the selected location. This field accepts Boolean values. Boolean variables containing the choice to include subfolders or not.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Variables
Represents the index of the current iteration within the "For Each Folder" loop. Integer variables or arguments to store the index value.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "For Each Folder" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "For Each Folder" activity onto the workflow.
Configure the properties by specifying the folder path, optional filter by name, delay, and whether to include subfolders.
Optionally, customize the display name.
Add activities inside the "For Each Folder" activity to define the actions to be performed on each folder.
Execute the workflow to iterate through folders based on the specified criteria.
Example:

Consider an example where the "For Each Folder" activity is used to process folders in a directory:
For Each Folder:
  Display Name: "Process Folders"
  In Folder: "C:\MyFiles"
  Filter By Name: "Project*"
  Include Subfolders: true
  Result: isProcessingSuccessful
In this example, the activity iterates through folders in the "C:\MyFiles" directory, applying the filter to include only folders starting with "Project." The result of the operation (success or failure) is stored in the Boolean variable "isProcessingSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Folder Exist/index.html

Folder Exist
AutomatR.DefaultActivities.FileAndFolder.FolderExist
The "Folder Exist" activity in AutomatR is designed to verify the existence of a specified folder path. This activity aids in automation workflows by allowing users to check whether a particular folder is present before proceeding with subsequent actions.
Properties
​
Name
Description
Input
Folder Path
Provide the full path of the folder for which you want to verify the existence. Example: 
"D:\Folder\FolderExist"
. String variables containing the folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Folder Exist" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Exist
Returns the result as either true or false based on the existence of the specified folder path. Boolean variables or arguments to store the result.
How to use:
Drag and drop the "Folder Exist" activity onto the workflow.
Configure the properties by specifying the full path of the folder to be checked for existence.
Optionally, configure the delay and customize the display name.
Execute the workflow to check if the specified folder exists.
Example:

Consider an example where the "Folder Exist" activity is used to check if a folder named "FolderExist" exists in the "D:\Folder\" directory:
Folder Exist:
  Display Name: "Check Folder Existence"
  Folder Path: "D:\Folder\FolderExist"
  Exist: isFolderExist
In this example, the activity checks whether the "FolderExist" folder exists. The result of the check (true or false) is stored in the Boolean variable "isFolderExist" for further handling in the workflow. Adjust the folder path as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Get Folder Info/index.html

Get Folder Info
AutomatR.DefaultActivities.FileAndFolder.GetFolderInfo
The "Get Folder Info" activity in AutomatR is designed to retrieve detailed properties of a specified folder on the local system. This activity falls under the File and Folder activities category, providing information such as folder size, last modified date, etc.
Properties
​
Name
Description
Input
Folder Path
Specifies the full path of the folder on the local system for which information is needed. String variables containing the folder path or the result of a folder selection.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Folder Info" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Folder Info
Outputs detailed information about the folder as a 
DirectoryInfo
 object. The 
DirectoryInfo
 object contains properties such as size, last modified date, etc. Variables of type 
DirectoryInfo
 to store the folder information.
How to use:
Drag and drop the "Get Folder Info" activity onto the workflow.
Configure the properties by specifying the folder path for which information is needed.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified folder.
Example:

Consider an example where the "Get Folder Info" activity is used to fetch information about a folder named "GetFolderInfo" located in the "D:\Folder\" directory:
Get Folder Info:
  Folder Path: "D:\Folder\GetFolderInfo"
  Folder Info: folderInfoResult
In this example, the activity fetches information about the "GetFolderInfo" folder, and the result, including details like size, last modified date, etc., is stored in the 
folderInfoResult
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Create Folder/index.html

Create Folder
AutomatR.DefaultActivities.FileAndFolder.CreateFolder
The "Create Folder" activity in AutomatR allows you to generate a new folder at a specified location. This activity simplifies the process of creating folders within automation workflows, enhancing file management capabilities.
Properties
​
Name
Description
Input
Folder Name
Provide the name of the folder you wish to create. String variables containing the folder name.
Folder Path
Provide the full path on your local system where the folder needs to be created. Example: 
"D:\CreateFolder"
. String variables containing the folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Folder" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Create Folder" activity onto the workflow.
Configure the properties by specifying the folder name and path for the new folder.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the specified folder.
Example:

Consider an example where the "Create Folder" activity is used to generate a new folder named "NewFolder" in the "D:\CreateFolder\" directory:
Create Folder:
  Display Name: "Create New Folder"
  Folder Name: "NewFolder"
  Folder Path: "D:\CreateFolder\"
In this example, the activity creates a new folder named "NewFolder" in the specified directory. If the folder already exists, an exception is raised. Adjust the folder name and path as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Folder/Delete Folder/index.html

Delete Folder
AutomatR.DefaultActivities.FileAndFolder.DeleteFolder
The "Delete Folder" activity in AutomatR facilitates the deletion of a specified folder from a designated location. This activity streamlines the process of removing folders within automation workflows, providing efficient folder management capabilities.
Properties
​
Name
Description
Input
Folder Path
Provide the full path of the folder on your local system that you would like to delete. Example: 
"D:\Folder\DeleteFolder"
. String variables containing the folder path.
Include Subfolder
If checked, it enables you to delete all the subfolders from the specified folder. Boolean variables or arguments.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Folder" activity. This can be useful for handling synchronization issues. Integer variables or arguments containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Folder" activity onto the workflow.
Configure the properties by specifying the full path of the folder to be deleted and whether to include subfolders.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified folder.
Example:

Consider an example where the "Delete Folder" activity is used to remove a folder named "DeleteFolder" from the "D:\Folder\" directory, including its subfolders:
Delete Folder:
  Display Name: "Delete Main Folder"
  Folder Path: "D:\Folder\DeleteFolder"
  Include Subfolder: True
In this example, the activity deletes the "DeleteFolder" folder and its subfolders from the specified directory. If the folder does not exist, an exception is raised. Adjust the folder path and inclusion of subfolders as needed for your workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Date/index.html

Modify Date
AutomatR.DefaultActivities.Date.ModifyDate
The "Modify Date" activity in AutomatR is designed to modify a date value by adding or subtracting days and determines the first or last day of the week, month, or year. This activity provides flexibility in manipulating date and time values according to your automation requirements.
Properties
​
Name
Description
Input
Date To Modify
Specify the date and time to be modified. It supports only 
DateTime
 variable.
Duration Type
Select the suitable value from the dropdown menu for date and time modification.
Modify By Value
Select the appropriate value to be added or subtracted. 
Double variable
 or 
argument
.
Modification Type
Choose the appropriate value from the dropdown list for the modification type.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Modify Date" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
It saves the result as a DateTime variable, which can be used in other subsequent activities. 
DateTime
 variable or argument.
How to use:
Drag and drop the "Modify Date" activity onto the workflow.
Configure the properties by specifying the date and time to be modified, the type of modification (addition or subtraction), duration type, and the value to be added or subtracted.
Optionally, configure the delay and customize the display name.
Execute the workflow to modify the specified date and time.
Example:

Consider an example where the "Modify Date" activity is used to add 3 days to the current date and time:
Modify Date:
  Display Name: "Add Days"
  Date To Modify: currentDate
  Modification Type: Add
  Duration Type: Days
  Modify By Value: 3
  Result: modifiedDate
In this example, the activity adds 3 days to the current date and time, and the result is stored in the "modifiedDate" DateTime variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar List/Get Calendar List/index.html

Get Calendar List
AutomatR.GoogleCalendar.Activities.GetCalendarList
The "Get Calendar List" activity in AutomatR is part of the Google Calendar activities package, enabling automation processes to retrieve a list of specific calendar details from Google Calendar. This activity streamlines the retrieval of calendar details, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specify the name of the calendar for which you want to retrieve details. String variables containing the calendar name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Calendar List" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result as a CalendarListEntry variable, which can be utilized in other subsequent activities. The variable contains detailed information about the specified calendar from the list. Variables of relevant types (e.g., CalendarListEntry variables) to store the retrieved calendar details.
How to use:
Drag and drop the "Get Calendar List" activity onto the workflow.
Configure the properties by specifying the name of the calendar for which you want to retrieve details.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve a list of specific calendar details from Google Calendar.
Example:

Consider an example where the "Get Calendar List" activity is used to retrieve details about a calendar named "Work Calendar":
Get Calendar List:
  Display Name: "Retrieve Work Calendar List"
  Calendar Name: "Work Calendar"
  Result: workCalendarDetails
In this example, the activity retrieves a list of specific details about the "Work Calendar" and stores it in the CalendarListEntry variable "workCalendarDetails" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar List/Watch Calendar List/index.html

Watch Calendar List
AutomatR.GoogleCalendar.Activities.WatchCalendarList
The "Watch Calendar List" activity in AutomatR is part of the Google Calendar activities package, designed for monitoring the calendar list available for a user. This activity enables the creation of a channel for watching changes in the specified calendar, providing a mechanism to receive notifications when the calendar list is updated.
Properties
​
Name
Description
Input
Address URL
Specifies the valid URL of the calendar from which you want to monitor the calendar list. It is a required input, and the URL must be in HTTPS format. String variables containing the calendar URL.
Calendar Name
Specifies the valid calendar name that is available at the provided URL address. It is a required input. String variables containing the existing calendar name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Watch Calendar List" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result in a channel variable format, which can be utilized in other subsequent activities. The channel contains information such as the ID, type, and address, facilitating communication with the watched calendar list. Variables of type 
Channel
 to store the watch response.
How to use:
Drag and drop the "Watch Calendar List" activity onto the workflow.
Configure the properties by specifying the existing calendar name and the URL of the calendar you want to watch.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a channel for watching changes in the specified calendar.
Example:

Consider an example where the "Watch Calendar List" activity is used to monitor updates in the "Work Calendar" and receives notifications at the specified webhook URL:
Watch Calendar List:
  Display Name: "Watch Work Calendar"
  Calendar Name: "Work Calendar"
  Address URL: "https://webhook.site/7c76f04d-8027-4aed-937f-d67360bcef34/&abc=123"
  Result: watchResponseChannel
In this example, the activity creates a channel to watch the "Work Calendar" for any updates and directs notifications to the specified webhook URL. The watch response, containing the channel information, is stored in the 
watchResponseChannel
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar List/Add Calendar List/index.html

Add Calendar List
AutomatR.GoogleCalendar.Activities.AddCalendarList
The "Add Calendar List" activity in AutomatR is part of the Google Calendar activities package, enabling you to modify the background color for a specified calendar in your Google Calendar account. This activity streamlines the process of changing the background color of a calendar to enhance visibility and organization.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar for which you want to change the background color. String variables containing the calendar name. This is a required field.
Background Color
Selects the desired background color for your calendar from the available options. Enum variable containing the background color. This is a required field and have possible options: 
NoColor
, 
Auburn
, 
Black
, 
Blue
, 
BlueGray
, 
Brown
, 
Charcoal
, 
Gray
, 
Green
, 
Indigo
, 
Lime
, 
Mauve
, 
Olive
, 
Orange
, 
Pink
, 
Purple
, 
Red
, 
Steel
, 
Teal
 and 
Yellow
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Validation
​
The activity validates if the background color is selected. If not, a validation error is raised.
How to use:
​
Drag and drop the "Add Calendar List" activity onto the workflow.
Configure the properties by providing the necessary details such as Calendar Name and Background Color.
Optionally, configure the delay before starting the activity.
Execute the workflow to change the background color of the specified calendar in your Google Calendar account.
Example:
​
Consider an example where the "Add Calendar List" activity is used to change the background color of a calendar named "Project Schedule" to "Blue":
Add Calendar List:
  Calendar Name: "Project Schedule"
  Background Color: Blue
  Delay: 2
In this example, the activity modifies the background color of the "Project Schedule" calendar to "Blue". The delay of 2 seconds provides a pause before starting the activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar List/List Calendar List/index.html

List Calendar List
AutomatR.GoogleCalendar.Activities.ListCalendarList
The "List Calendar List" activity in AutomatR is part of the Google Calendar activities package, allowing automation processes to retrieve a list of detailed information about calendars associated with a Google account. This activity provides valuable insights into available calendars for further automation.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Calendar List" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
The result is stored as a CalendarList variable, which can be utilized in other subsequent activities. Variables of type CalendarList to store the retrieved list of calendars.
How to use:
Drag and drop the "List Calendar List" activity onto the workflow.
Optionally, configure the delay and customize the display name.
Connect subsequent activities within the "List Calendar List" activity to utilize the retrieved list of calendars.
Execute the workflow to retrieve a detailed list of calendars associated with the Google account.
Example:

Consider an example where the "List Calendar List" activity is used to retrieve a list of calendars associated with a Google account:
List Calendar List:
  Display Name: "Retrieve Calendars"
  Delay: 2
  Result: calendarList
In this example, the activity retrieves a detailed list of calendars associated with the Google account, with a 2-second delay. The result, a CalendarList variable named "calendarList," can be utilized in subsequent Google Calendar activities within the same workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Settings/Get Settings/index.html

Get Settings
AutomatR.GoogleCalendar.Activities.GetSettings
The "Get Settings" activity in AutomatR is part of the Google Calendar activities package, enabling automation processes to retrieve detailed information related to a specified settings name within Google Calendar. This activity streamlines the retrieval of settings information, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Setting Name
Provide a valid settings name for which you want to retrieve information. String variables containing the setting name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Settings" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result as a Setting variable, which contains detailed information about the specified settings. The variable can be utilized in other subsequent activities. Variables of relevant types (e.g., Setting variables) to store the retrieved settings information.
How to use:
Drag and drop the "Get Settings" activity onto the workflow.
Configure the properties by specifying the settings name for which you want to retrieve information.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve detailed information about the specified settings from Google Calendar.
Example:

Consider an example where the "Get Settings" activity is used to retrieve information about a setting named "WorkingHours" from a Google Calendar:
Get Settings:
  Display Name: "Retrieve Working Hours Setting"
  Setting Name: "WorkingHours"
  Result: workingHoursSetting
In this example, the activity retrieves detailed information about the "WorkingHours" setting from Google Calendar and stores it in the Setting variable "workingHoursSetting" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Settings/List Settings/index.html

List Settings
AutomatR.GoogleCalendar.Activities.ListSettings
The "List Settings" activity in AutomatR is part of the Google Calendar activities package, designed to retrieve a list of settings information related to the Google Calendar scope. This activity provides insight into various settings configured within a Google Calendar, enhancing the capabilities of automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Settings" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
The result is stored as a Settings variable, which can be utilized in other subsequent activities. Variables of type Settings to store the retrieved settings information.
How to use:
Drag and drop the "List Settings" activity onto the workflow.
Optionally, configure the delay for waiting before executing the activity.
Connect subsequent activities within the "List Settings" activity to utilize the retrieved settings information.
Execute the workflow to retrieve a list of settings related to the Google Calendar scope.
Example:

Consider an example where the "List Settings" activity is used to retrieve settings information related to a Google Calendar:
List Settings:
  Delay: 2
  Result: calendarSettings
In this example, the activity retrieves a list of settings related to the Google Calendar with a 2-second delay. The result, a variable named "calendarSettings" of type Settings, can be utilized in subsequent Google Calendar activities within the same workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar/Clear Calendar/index.html

Clear Calendar
AutomatR.GoogleCalendar.Activities.ClearCalendar
The "Clear Calendar" activity in AutomatR is part of the Google Calendar activities package, allowing you to clear all events from a specified Google Calendar. This activity is useful for scenarios where you need to reset or remove all events from a particular calendar.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar that you want to clear. String variables containing the calendar name. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Validation
​
The activity performs validation checks to ensure that the Calendar Name is provided. It also handles scenarios where the specified calendar does not exist or if there are no events found in the calendar.
How to use:
​
Drag and drop the "Clear Calendar" activity onto the workflow.
Configure the properties by providing the necessary details such as Calendar Name.
Optionally, configure the delay before starting the activity.
Execute the workflow to clear all events from the specified Google Calendar.
Example:
​
Consider an example where the "Clear Calendar" activity is used to remove all events from a calendar named "Team Events":
Clear Calendar:
  Calendar Name: "Team Events"
  Delay: 2
In this example, the activity clears all events from the "Team Events" calendar, and there is a delay of 2 seconds before starting the activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar/Add Calendar/index.html

Add Calendar
AutomatR.GoogleCalendar.Activities.AddCalendar
The "Add Calendar" activity in AutomatR is part of the Google Calendar activities package, enabling you to add a specific calendar to your Google Calendar account. This activity streamlines the process of creating and adding a new calendar with a specified name and description.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar that you want to add. String variables containing the calendar name. This is a required field.
Description
Specifies the description of the calendar that you want to add and display to other users. String variables containing the calendar description. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Add Calendar" activity onto the workflow.
Configure the properties by providing the necessary details such as Calendar Name and Description.
Optionally, configure the delay before starting the activity.
Execute the workflow to add the specified calendar to your Google Calendar account.
Example:
​
Consider an example where the "Add Calendar" activity is used to create and add a new calendar with the name "Project Meetings" and the description "Schedule for project-related meetings":
Add Calendar:
  Calendar Name: "Project Meetings"
  Description: "Schedule for project-related meetings"
  Delay: 2
In this example, the activity creates and adds a new calendar named "Project Meetings" with the specified description. The delay of 2 seconds provides a pause before starting the activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar/Delete Calendar/index.html

Delete Calendar
AutomatR.GoogleCalendar.Activities.DeleteCalendar
The "Delete Calendar" activity in AutomatR is part of the Google Calendar activities package, allowing automation processes to delete specific calendars from a Google Calendar account. This activity simplifies calendar management tasks, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar to be deleted from the Google Calendar account. String variables containing the calendar name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Calendar" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Delete Calendar" activity onto the workflow.
Configure the properties by specifying the name of the calendar to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified calendar from the Google Calendar account.
Example:

Consider an example where the "Delete Calendar" activity is used to delete a calendar named "Team Meetings" from the Google Calendar:
Delete Calendar:
  Display Name: "Delete Team Meetings Calendar"
  Calendar Name: "Team Meetings"
In this example, the activity deletes the calendar named "Team Meetings" from the Google Calendar account.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar/Get Calendar/index.html

Get Calendar
AutomatR.GoogleCalendar.Activities.GetCalendar
The "Get Calendar" activity in AutomatR is part of the Google Calendar activities package, enabling automation processes to retrieve specific calendar information from a Google Calendar. This activity streamlines the retrieval of calendar details, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar for which you want to retrieve details. String variables containing the calendar name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Calendar" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result as a Calendar variable, which can be utilized in other subsequent activities. The variable contains detailed information about the specified calendar. Variables of relevant types (e.g., Calendar variables) to store the retrieved calendar information.
How to use:
Drag and drop the "Get Calendar" activity onto the workflow.
Configure the properties by specifying the name of the calendar for which you want to retrieve details.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve detailed information about the specified calendar.
Example:

Consider an example where the "Get Calendar" activity is used to retrieve details about a calendar named "Work Calendar":
Get Calendar:
  Display Name: "Retrieve Work Calendar"
  Calendar Name: "Work Calendar"
  Result: workCalendarDetails
In this example, the activity retrieves detailed information about the "Work Calendar" and stores it in the Calendar variable "workCalendarDetails" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Calendar/Update Calendar/index.html

Update Calendar
AutomatR.GoogleCalendar.Activities.UpdateCalendar
The "Update Calendar" activity in AutomatR is part of the Google Calendar activities package, allowing you to update specific details of a calendar within Google Calendar. This activity is useful when you need to modify the name and description of an existing calendar.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar you want to update. String variables containing the existing calendar name.
Update Calendar Name
Specifies the updated name for the calendar. String variables containing the new calendar name.
Update Description
Specifies the updated description for the calendar. String variables containing the new description.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Calendar" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Update Calendar" activity onto the workflow.
Configure the properties by specifying the existing calendar name, the updated name, and the updated description.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified calendar in Google Calendar.
Example:

Consider an example where the "Update Calendar" activity is used to change the name and description of a calendar named "Work Calendar" with a 2-second delay:
Update Calendar:
  Display Name: "Update Work Calendar"
  Calendar Name: "Work Calendar"
  Update Calendar Name: "Updated Work Calendar"
  Update Description: "This calendar is for work-related events."
  Delay: 2
In this example, the activity updates the "Work Calendar" with the new name "Updated Work Calendar" and the updated description "This calendar is for work-related events" with a 2-second delay.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Scope/Google Calendar Scope/index.html

Google Calendar Scope
AutomatR.GoogleCalendar.Activities.GoogleCalendarScope
The "Google Calendar Scope" activity in AutomatR is part of the Google Calendar activities package, enabling automation processes to set up Google Calendar with OAuth authentication for a user. This activity facilitates the integration of Google Calendar functionality into your workflows.
Properties
​
Name
Description
Input
Client ID
Enter the client ID for your Google Calendar User's account. String variables containing the client ID.
Client Secret Key
Enter the Client Secret Key for your Google Calendar User's account. String variables containing the client secret key.
Refresh Token
Click to browse for the refresh token and select the mail ID associated with your Google Calendar account. This enables the capture of the API token required to access your Google Calendar account. AuthDetails variable containing the refresh token and associated mail ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Google Calendar Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Google Calendar Scope" activity onto the workflow.
Configure the properties by providing the client ID, client secret key, and refresh token associated with your Google Calendar account.
Optionally, configure the delay and customize the display name.
Connect subsequent activities within the "Google Calendar Scope" activity to perform operations on Google Calendar.
Example:

Consider an example where the "Google Calendar Scope" activity is used to set up Google Calendar authentication for a user:
Google Calendar Scope:
  Display Name: "Setup Google Calendar"
  Client ID: "your_client_id"
  Client Secret Key: "your_client_secret_key"
  Refresh Token: refreshTokenDetails
In this example, the activity sets up Google Calendar authentication for a user using the provided client ID, client secret key, and refresh token details. The result can be utilized in subsequent Google Calendar activities within the same scope.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Channel/Stop Channel/index.html

Stop Channel
AutomatR.GoogleCalendar.Activities.StopChannel
The "Stop Channel" activity in AutomatR is part of the Google Calendar activities package, allowing you to stop a channel associated with a specific Google Calendar. This activity is useful when you no longer wish to receive notifications or updates from a particular calendar through the channel.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar for which you want to stop the channel. String variables containing the calendar name.
Channel ID
Specifies the unique identifier (ID) associated with the channel to be stopped. String variables containing the channel ID.
Resource ID
Specifies the resource ID associated with the channel to be stopped. String variables containing the resource ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Stop Channel" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Stop Channel" activity onto the workflow.
Configure the properties by specifying the calendar name, channel ID, and resource ID associated with the channel you want to stop.
Optionally, configure the delay and customize the display name.
Execute the workflow to stop the specified channel for the given calendar in Google Calendar.
Example:

Consider an example where the "Stop Channel" activity is used to stop a channel associated with the "Work Calendar" with a 2-second delay:
Stop Channel:
  Display Name: "Stop Work Calendar Channel"
  Calendar Name: "Work Calendar"
  Channel ID: "channel123"
  Resource ID: "resource123"
  Delay: 2
In this example, the activity stops the channel with the specified channel ID and resource ID associated with the "Work Calendar," with a 2-second delay.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/Quick Add Event/index.html

Quick Add Event
AutomatR.GoogleCalendar.Activities.QuickAddEvent
The "Quick Add Event" activity in AutomatR is part of the Google Calendar activities package, allowing for the quick addition of an event to a specified Google Calendar. This activity streamlines the process of adding events with a brief description, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar in which you want to add an event. String variables containing the calendar name.
Text
Specifies the text that you want to reflect as an event in the calendar. This text represents a concise description of the event. String variables containing the event text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Quick Add Event" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Quick Add Event" activity onto the workflow.
Configure the properties by specifying the calendar name and the text to be added as an event within Google Calendar.
Optionally, configure the delay and customize the display name.
Execute the workflow to quickly add the specified event to the Google Calendar.
Example:

Consider an example where the "Quick Add Event" activity is used to quickly add a daily standup meeting event with the text "Discuss project updates" to the "Work Calendar" with a 2-second delay:
Quick Add Event:
  Display Name: "Add Daily Standup"
  Calendar Name: "Work Calendar"
  Text: "Discuss project updates"
  Delay: 2
In this example, the activity quickly adds a new event to the "Work Calendar" with the specified text, "Discuss project updates," and a 2-second delay.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/Get Event/index.html

Get Event
AutomatR.GoogleCalendar.Activities.GetEvent
The "Get Event" activity in AutomatR is part of the Google Calendar activities package, enabling automation processes to retrieve event details from a specified event within Google Calendar. This activity streamlines the retrieval of event details, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specify the name of the calendar from which you want to retrieve event details. String variables containing the calendar name.
Event Name
Specify the name of the event for which you want to retrieve details. String variables containing the event name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Event" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result as an Event variable, which contains detailed information about the specified event. The variable can be utilized in other subsequent activities. Variables of relevant types (e.g., Event variables) to store the retrieved event details.
How to use:
Drag and drop the "Get Event" activity onto the workflow.
Configure the properties by specifying the calendar name and the name of the event for which you want to retrieve details.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve detailed information about the specified event from Google Calendar.
Example:

Consider an example where the "Get Event" activity is used to retrieve details about an event named "Team Meeting" from a calendar named "Work Calendar":
Get Event:
  Display Name: "Retrieve Team Meeting Event"
  Calendar Name: "Work Calendar"
  Event Name: "Team Meeting"
  Result: teamMeetingDetails
In this example, the activity retrieves detailed information about the "Team Meeting" event from the "Work Calendar" and stores it in the Event variable "teamMeetingDetails" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/Move Event/index.html

Move Event
AutomatR.GoogleCalendar.Activities.MoveEvent
The "Move Event" activity in AutomatR is part of the Google Calendar activities package, providing the capability to move an event from one calendar to another within Google Calendar. This activity streamlines event management tasks, facilitating efficient automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar from which you want to move the event. String variables containing the calendar name.
Destination Calendar Name
Specifies the name of the calendar in which you want to move the event. String variables containing the destination calendar name.
Event Name
Specifies the name of the event that you want to move. String variables containing the event name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move Event" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Move Event" activity onto the workflow.
Configure the properties by specifying the calendar name, destination calendar name, and event name within Google Calendar.
Optionally, configure the delay and customize the display name.
Execute the workflow to move the specified event from one calendar to another.
Example:

Consider an example where the "Move Event" activity is used to move an event named "Meeting" from the "Work Calendar" to the "Personal Calendar" with a 2-second delay:
Move Event:
  Display Name: "Move Meeting"
  Calendar Name: "Work Calendar"
  Destination Calendar Name: "Personal Calendar"
  Event Name: "Meeting"
  Delay: 2
In this example, the activity moves the "Meeting" event from the "Work Calendar" to the "Personal Calendar" with a 2-second delay. The event is identified by its name, "Meeting," in the specified source calendar ("Work Calendar").

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/Update Event/index.html

Update Event
AutomatR.GoogleCalendar.Activities.UpdateEvent
The "Update Event" activity in AutomatR is part of the Google Calendar activities package, allowing you to update specific details of an event within Google Calendar. This activity is useful when you need to modify the name, description, start time, end time, and attendees of an existing calendar event.
Properties
​
Name
Description
Input
Attendee List
Specifies a list of email IDs that you want to add as attendees in the updated event. Provide a comma-separated list of email addresses.
Calendar Name
Specifies the name of the calendar in which you want to update an event. String variables containing the existing calendar name.
Event Name
Specifies the name of the event you want to update. String variables containing the existing event name.
Time Zone
Selects a timezone from the dropdown according to your requirements. The timezone will be applied to the event's start and end times.
Update Description
Specifies the updated description for the event. String variables containing the new description.
Update End Time
Specifies the updated end time for the event. DateTime variables containing the new end time.
Update Event Name
Specifies the updated event name for the event. String variables containing the new event name.
Update Start Time
Specifies the updated start time for the event. DateTime variables containing the new start time.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Event" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Update Event" activity onto the workflow.
Configure the properties by specifying the existing calendar name, the existing event name, and the updated details such as event name, description, start time, end time, and attendee list.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified event in Google Calendar.
Example:

Consider an example where the "Update Event" activity is used to change the name and description of an event named "Team Meeting" in the "Work Calendar" with updated details:
Update Event:
  Display Name: "Update Team Meeting Event"
  Calendar Name: "Work Calendar"
  Event Name: "Team Meeting"
  Update Event Name: "Updated Team Meeting"
  Update Description: "Updated description for the team meeting."
  Time Zone: "UTC"
  Update Start Time: "2023-01-01 08:00:00"
  Update End Time: "2023-01-01 09:00:00"
  Attendee List: "user1@example.com,user2@example.com"
In this example, the activity updates the "Team Meeting" event in the "Work Calendar" with the new name "Updated Team Meeting," an updated description, and modified start and end times. It also adds 
user1@example.com
 and 
user2@example.com
 as attendees to the event.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/List Events/index.html

List Events
AutomatR.GoogleCalendar.Activities.ListEvents
The "List Events" activity in AutomatR is part of the Google Calendar activities package, designed for retrieving a list of events present in a specified Google Calendar. This activity streamlines the process of accessing calendar events, facilitating efficient automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar from which you want to retrieve the list of events. String variables containing the calendar name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "List Events" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
The result is stored as an 
IList<Event>
 variable, which can be utilized in other subsequent activities. Variables of type 
IList<Event>
 to store the retrieved list of events.
How to use:
Drag and drop the "List Events" activity onto the workflow.
Configure the properties by specifying the calendar name from which you want to retrieve events.
Optionally, configure the delay and customize the display name.
Connect subsequent activities within the "List Events" activity to utilize the retrieved list of events.
Execute the workflow to retrieve a list of events from the specified Google Calendar.
Example:

Consider an example where the "List Events" activity is used to retrieve a list of events from a Google Calendar named "Team Meetings":
List Events:
  Display Name: "Retrieve Team Meetings"
  Calendar Name: "Team Meetings"
  Delay: 2
  Result: eventList
In this example, the activity retrieves a list of events from the "Team Meetings" calendar with a 2-second delay. The result, an 
IList<Event>
 variable named "eventList," can be utilized in subsequent Google Calendar activities within the same workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/Add Event/index.html

Add Event
AutomatR.GoogleCalendar.Activities.AddEvent
The "Add Event" activity in AutomatR is part of the Google Calendar activities package, providing the capability to add an event to a specified Google Calendar. This activity streamlines the process of scheduling events, allowing you to define details such as event name, description, attendees, start time, end time, and time zone.
Properties
​
Name
Description
Input
Attendee List
Specifies a list of email IDs for attendees to be added to the event. Comma-separated string variables containing email addresses.
Calendar Name
Specifies the name of the calendar in which you want to add an event. String variables containing the calendar name. This is a required field.
Description
Provides a description for the event that you want to display to the user. String variables containing the event description. This is a required field.
End Time
Specifies the end time for the event. DateTime variables containing the end time. This is a required field.
Event Name
Specifies the name of the event that you want to assign and display to the user. String variables containing the event name. This is a required field.
Start Time
Specifies the start time for the event. DateTime variables containing the start time. This is a required field.
Time Zone
Selects a timezone from the dropdown according to your requirements. Enum variable containing the time zone. This is a required field and support the following Time Zone options: 
UTC
, 
PacificStandardTime
, 
EasternStandardTime
, 
CentralStandardTime
, 
MountainStandardTime
, 
IndiaStandardTime
, 
JapanStandardTime
, 
ChinaStandardTime
 and 
AustraliaEasternStandardTime
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Validation
​
The activity performs validation checks on inputs, ensuring that essential fields such as Calendar Name, Description, Start Time, End Time, and Time Zone are provided.
How to use:
​
Drag and drop the "Add Event" activity onto the workflow.
Configure the properties by providing the necessary details such as Calendar Name, Event Name, Description, Attendee List, Start Time, End Time, and Time Zone.
Optionally, configure the delay before starting the activity.
Execute the workflow to add the specified event to the Google Calendar.
Example:
​
Consider an example where the "Add Event" activity is used to schedule a meeting named "Team Sync" with the following details:
Add Event:
  Calendar Name: "Team Calendar"
  Event Name: "Team Sync"
  Description: "Monthly team synchronization meeting"
  Attendee List: "john@example.com, jane@example.com"
  Start Time: "2023-01-10 14:00:00"
  End Time: "2023-01-10 15:30:00"
  Time Zone: EasternStandardTime
  Delay: 2
In this example, the activity schedules a meeting named "Team Sync" in the "Team Calendar" with a description, specified attendees, start time, and end time. The time zone is set to Eastern Standard Time, and there is a delay of 2 seconds before starting the activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Calendar/Event/Delete Event/index.html

Delete Event
AutomatR.GoogleCalendar.Activities.DeleteEvent
The "Delete Event" activity in AutomatR is part of the Google Calendar activities package, enabling automation processes to delete specified events from a Google Calendar. This activity streamlines event management tasks, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Calendar Name
Specifies the name of the calendar from which the event should be deleted. String variables containing the calendar name.
Event Name
Specifies the name of the event to be deleted from the calendar. String variables containing the event name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Event" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Delete Event" activity onto the workflow.
Configure the properties by specifying the name of the calendar and the name of the event to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified event from the Google Calendar.
Example:

Consider an example where the "Delete Event" activity is used to delete an event named "Team Meeting" from the Google Calendar:
Delete Event:
  Display Name: "Delete Team Meeting Event"
  Calendar Name: "Work Calendar"
  Event Name: "Team Meeting"
In this example, the activity deletes the "Team Meeting" event from the "Work Calendar" in the Google Calendar.

URL: https://docs.automatr.tech/docs/Products/Activities/Other/For Each Of/index.html

For Each Of
AutomatR.DefaultActivities.Loop.ForEachOf<T>
The "For Each Of" activity in AutomatR is designed to iterate over a collection of items, performing a set of actions for each item in the collection. This activity simplifies the process of iterating through a list, array, or any enumerable type, making it easier to handle repetitive tasks in your workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Values
Specifies the collection of items to iterate over. It represents the enumerable type containing the items for iteration. Variables or expressions of type 
IEnumerable<T>
.
How to use:
Drag and drop the "For Each Of" activity onto the workflow.
Configure the properties by specifying the collection of items (Values) and defining the actions to perform for each item (Body).
Execute the workflow, and the specified actions will be performed for each item in the collection.
Example:

Consider an example where the "For Each Of" activity is used to iterate through a list of strings and print each string to the console:
For Each Of:
  Values: myList
  Body:
    WriteLine:
      Text: currentItem
In this example, the activity iterates through the list named "myList," and for each string item, it executes the "WriteLine" activity to print the item to the console.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Rename Sheet/index.html

Rename Sheet
AutomatR.Excel.Activities.RenameSheet
The "Rename Sheet" activity in AutomatR is part of the Excel activities package, designed to rename an Excel sheet to a specified name. This activity is useful for organizing and customizing the sheet names within an Excel workbook.
Properties
​
Name
Description
Input
New Sheet Name
Enter the name of the new sheet. String variables containing the desired name for the sheet.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Rename Sheet" activity onto the workflow.
Configure the properties by specifying the new name for the sheet.
Optionally, configure the delay.
Execute the workflow to rename the Excel sheet to the specified name.
Example:

Consider an example where the "Rename Sheet" activity is used to rename the current sheet to "SalesData":
Rename Sheet:
  New Sheet Name: "SalesData"
In this example, the activity renames the current Excel sheet to "SalesData."
Important:
Ensure that the specified sheet name is unique within the workbook.
Be cautious while using this activity, as it permanently changes the name of the sheet.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Read Cell/index.html

Read Cell
AutomatR.Excel.ReadCell
The "Read Cell" activity in AutomatR is part of the Excel activities package, designed to read the value of a specified Excel cell. This activity enhances automation capabilities by extracting cell information, facilitating data retrieval from Excel worksheets.
Properties
​
Name
Description
Input
Cell Number
Enter the cell number for which you need to fetch information. String variables containing the cell number (e.g., "A1").
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
Output
Value
Returns the value of the cell in string format. String variables containing the cell value.
How to use:
Drag and drop the "Read Cell" activity onto the workflow.
Configure the properties by specifying the cell number for which you want to fetch information.
Optionally, configure the delay.
Execute the workflow to read the value of the specified Excel cell.
Example:

Consider an example where the "Read Cell" activity is used to read the value of cell "B3":
Read Cell:
  Cell Number: "B3"
  Delay: 2
In this example, the activity reads the value of cell "B3" with a delay of 2 seconds. The result, representing the cell value, is stored in the string variable specified in the "Value" property.
Note:
 Ensure that the "Read Cell" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Append Range/index.html

Append Range
AutomatR.Excel.Activities.AppendRange
The "Append Range" activity in AutomatR is part of the Excel activities package, designed to add information stored in a DataTable variable to the end of a specified Excel spreadsheet. This activity enhances automation capabilities in Excel by allowing the dynamic appending of data from DataTables.
NOTE:
 This activity can copy data in a table, range, or sheet and pastes it after existing data in another specified table, range, or sheet. This activity can only be used in Excel Root activity.
You can copy values, formulas, number and cell formats, and transpose (rotate) data. The data is copied to the destination as follows:
If appending to a table, the existing table is expanded to include the copied data.
If appending to a range, the existing range is expanded to include the copied data.
If appending to a sheet, the copied rows are added starting with the first empty row below the rows with data in the sheet.
The following table lists supported copy-append combinations:
Copy from
Append to
Sheet
Sheet
Range
Sheet
Range
Range
Range
Cell
Cell
Cell
Cell
Range
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable containing the information to be appended to the Excel spreadsheet.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Append Range" activity onto the workflow.
Configure the properties by specifying the DataTable variable containing the information to be appended.
Optionally, configure the delay.
Execute the workflow to append the specified data to the Excel spreadsheet.
Example:

Consider an example where the "Append Range" activity is used to append data from a DataTable variable to an existing Excel spreadsheet:
Append Range:
  Data Table: dataTableVariable
  Delay: 2
In this example, the activity appends the information stored in the DataTable variable "dataTableVariable" to the end of the specified Excel spreadsheet. The optional delay is set to 2 seconds, providing time for any necessary synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Read Cell Formula/index.html

Read Cell Formula
AutomatR.Excel.Activities.ReadCellFormula
The "Read Cell Formula" activity in AutomatR is part of the Excel activities package, designed to extract the formula used in a specified Excel cell. This activity enhances automation capabilities by providing access to the formulas within Excel worksheets.
Properties
​
Name
Description
Input
Cell
Enter the cell number having the cell values with Excel formulas. String variables containing the cell number (e.g., "A1").
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
Output
Formula
Returns the formula string extracted from the specified Excel cell. String variables containing the cell formula.
How to use:
Drag and drop the "Read Cell Formula" activity onto the workflow.
Configure the properties by specifying the cell number for which you want to extract the formula.
Optionally, configure the delay.
Execute the workflow to extract the formula from the specified Excel cell.
Example:

Consider an example where the "Read Cell Formula" activity is used to extract the formula from cell "B3":
Read Cell Formula:
  Cell: "B3"
  Delay: 2
In this example, the activity extracts the formula from cell "B3" with a delay of 2 seconds. The result, representing the cell formula, is stored in the string variable specified in the "Formula" property.
Note:
 Ensure that the "Read Cell Formula" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Get Cell Colour/index.html

Get Cell Colour
AutomatR.Excel.Activities.GetCellColour
The "Get Cell Colour" activity in AutomatR is part of the Excel activities package, designed to extract the background color of a specific cell and save it as a color variable. This activity facilitates color-related operations within Excel, enhancing the capabilities of automation workflows.
Properties
​
Name
Description
Input
Cell Number
Enter the cell number for which the color hex code is required. String variables containing the cell number (e.g., "A1", "B2").
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Cell Colour" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Color
Outputs the result of the color fetched from the specified cell. String variables containing the color value in hex format (e.g., "#RRGGBB").
How to use:
Drag and drop the "Get Cell Colour" activity onto the workflow.
Configure the properties by specifying the cell number for which the color is to be extracted.
Optionally, configure the delay.
Execute the workflow to retrieve the color of the specified cell within Excel.
Example:

Consider an example where the "Get Cell Colour" activity is used to retrieve the color of cell "A1":
Get Cell Colour:
  Cell Number: "A1"
  Delay: 2
  Color: cellColor
In this example, the activity retrieves the color of cell "A1," and the color value is stored in the string variable "cellColor" for further processing in the workflow.
Note:
 Ensure that the "Get Cell Colour" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Write Range/index.html

Write Range
AutomatR.Excel.Activities.WriteRange
The "Write Range" activity in AutomatR is part of the Excel activities package, facilitating the automation of writing data from a DataTable variable into a specified cell range within Microsoft Excel. This activity streamlines the process of populating Excel spreadsheets with data extracted from other inbound activities.
NOTE:
 This activity can only be used in Excel Root activity.
Properties
​
Name
Description
Input
Data Table
Enter the DataTable variable containing the data to be written into the Excel spreadsheet. DataTable variables storing extracted data from other activities.
Header
When enabled, considers column headers as the first row in the mentioned cell range. Boolean variables to enable or disable considering headers.
Starting Cell
Enter the cell value to start writing the data. String variables containing the cell value, e.g., "A1" or "B2".
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Write Range" activity onto the workflow.
Configure the properties by specifying the DataTable variable, starting cell, and whether to include headers.
Optionally, configure the delay.
Execute the workflow to write the specified data from the DataTable into the designated cell range in Excel.
Important:
Ensure that the Excel workbook is open and accessible.
Provide a valid starting cell and DataTable variable containing the data to be written.
Consider enabling the "Include Headers" option if the DataTable has column headers.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Read Row/index.html

Read Row
AutomatR.Excel.Activities.ReadRow
The "Read Row" activity in AutomatR is part of the Excel activities package, designed to read the values of an Excel row beginning from the cell specified in the Row Index field. This activity facilitates the extraction of row values from Excel, enhancing automation workflows involving Excel data manipulation.
Properties
​
Name
Description
Input
Row Index
Enter the index for the row for which values need to be retrieved. String variables containing the row index.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
Output
Result
Returns the list of strings representing the values of the selected row. List variables to store the row values.
How to use:
Drag and drop the "Read Row" activity onto the workflow.
Configure the properties by specifying the row index for which values should be retrieved.
Optionally, configure the delay.
Execute the workflow to read values from the specified row in Excel and store them in a list variable.
Example:

Consider an example where the "Read Row" activity is used to read values from the row at index "2" in an Excel worksheet:
Read Row:
  Row Index: "2"
  Result: ExcelRowData
In this example, the activity reads values from the specified row and stores them in the List variable "ExcelRowData" for further handling in the workflow.
Note:
 Ensure that the "Read Row" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Read Range/index.html

Read Range
AutomatR.Excel.Activities.ReadRange
The "Read Range" activity in AutomatR is part of the Excel activities package, designed to read the values of an Excel range and store them in a DataTable variable. This activity facilitates data extraction from specified Excel ranges, enhancing automation workflows that involve Excel data manipulation.
Properties
​
Name
Description
Input
Header
When enabled, considers the first row as a header in the mentioned range of cells. Boolean variables indicating whether the first row should be treated as a header.
Range
Enter the range to read and use it for further operations. String variables containing the range in Excel format (e.g., "A1:B10").
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
Output
Result
Stores the data extracted from the specified range in a DataTable variable. DataTable variables to store the extracted data.
How to use:
Drag and drop the "Read Range" activity onto the workflow.
Configure the properties by specifying the range to read and whether the first row should be treated as a header.
Optionally, configure the delay.
Execute the workflow to read values from the specified Excel range and store them in a DataTable variable.
Example:

Consider an example where the "Read Range" activity is used to read values from the range "A1:B10" in an Excel worksheet:
Read Range:
  Range: "A1:B10"
  Header: true
  Result: ExcelData
In this example, the activity reads values from the specified range, considering the first row as headers. The result, representing the data from the range, is stored in the DataTable variable "ExcelData" for further handling in the workflow.
Note:
 Ensure that the "Read Range" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Select Range/index.html

Select Range
AutomatR.Excel.Activities.SelectRange
The "Select Range" activity in AutomatR is part of the Excel activities package, designed to facilitate the selection of a specified range within an Excel spreadsheet. This activity is crucial for isolating specific data or cells for further actions in the automation process.
NOTE:
 This activity can only be used in Excel Root activity.
Properties
​
Name
Description
Input
Range
Enter the range to be selected. This should be in the format of Excel range, such as "A1:B5". String variables containing the desired range.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Select Range" activity onto the workflow.
Configure the properties by specifying the range to be selected.
Optionally, configure the delay.
Execute the workflow to select the specified range within the Excel spreadsheet.
Important:
Ensure that the Excel workbook and sheet are open and accessible.
The specified range should be in a valid Excel range format (e.g., "A1:B5").
Incorrect range formats may result in an "Invalid given Range" error.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Switch Sheet/index.html

Switch Sheet
AutomatR.Excel.Activities.SwitchSheet
The "Switch Sheet" activity in AutomatR is part of the Excel activities package, allowing users to switch to another sheet within the same Excel workbook. This activity is useful for navigating between different sheets when working on complex Excel automation workflows.
Properties
​
Name
Description
Input
Switch To Sheet
Enter the name of the sheet to switch to in the current Excel workbook. String variables containing the desired sheet name, e.g., "Sheet3".
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Switch Sheet" activity onto the workflow.
Configure the properties by specifying the sheet name to switch to within the current Excel workbook.
Optionally, configure the delay.
Execute the workflow to switch to the specified sheet.
Important:
Ensure that the Excel workbook is open and accessible.
The specified sheet name should be valid; otherwise, the activity will not switch to the desired sheet.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Execute Macro/index.html

Execute Macro
AutomatR.Excel.Activities.ExecuteMacro
The "Execute Macro" activity in AutomatR is part of the Excel activities package, designed to execute a specified macro within an Excel workbook. This activity is particularly useful for automating complex tasks in Excel that are defined by macros.
Properties
​
Name
Description
Input
Enter Method Parameters
Enter the parameters/arguments in the macro code as an Enumerable object list.
Macro name
Enter the macro name to be executed for an Excel workbook. String variables containing the macro name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute Macro" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Execute Macro" activity onto the workflow.
Configure the properties by specifying the macro name and, optionally, providing method parameters.
Optionally, configure the delay.
Execute the workflow to run the specified macro within the Excel workbook.
Example:

Consider an example where the "Execute Macro" activity is used to execute a macro named "MyMacro" with parameters:
Execute Macro:
  Macroname: "MyMacro"
  Enter Method Parameters: {param1, param2, param3}
  Delay: 2
In this example, the activity executes the "MyMacro" macro within the Excel workbook. The parameters "param1," "param2," and "param3" are provided to the macro. The execution is delayed by 2 seconds as specified in the delay property.
Note:
 Ensure that the "Execute Macro" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Remove Duplicate Range/index.html

Remove Duplicate Range
AutomatR.Excel.Activities.RemoveDuplicateRange
The "Remove Duplicate Range" activity in AutomatR is part of the Excel activities package, designed to delete all rows that are duplicates within a specified range. This activity aids in data cleansing by removing redundant information based on the defined criteria within the given Excel range.
Properties
​
Name
Description
Input
Range
Enter the range from which duplicate rows need to be removed. String variables containing the range specification (e.g., "A1:C10").
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Remove Duplicate Range" activity onto the workflow.
Configure the properties by specifying the range from which duplicate rows should be removed.
Optionally, configure the delay.
Execute the workflow to delete duplicate rows within the specified Excel range.
Example:

Consider an example where the "Remove Duplicate Range" activity is used to remove duplicate rows within the range "A2:C20" in an Excel workbook:
Remove Duplicate Range:
  Range: "A2:C20"
In this example, the activity deletes all rows within the specified range that are duplicates based on the entire row's content.
Note:
 Ensure that the specified range is valid; otherwise, the activity will raise an exception indicating an invalid range.
Important:
The activity considers entire row content for identifying duplicates within the specified range.
Be cautious while using this activity, as it permanently removes rows from the Excel sheet.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Copy Paste Range/index.html

Copy Paste Range
AutomatR.Excel.Activities.CopyPasteRange
The "Copy Paste Range" activity in AutomatR is part of the Excel activities package, facilitating the copying of an entire range, including values, formulas, table format, and cell format. The copied range can then be pasted to a specified sheet in an Excel workbook. This activity streamlines the process of transferring data and formatting within Excel, enhancing automation workflows.
Properties
​
Name
Description
Input
Destination Cell
Specifies the start cell for the range to be pasted. Enter the cell reference (e.g., "A1") where the top-left corner of the copied range should be pasted in the destination sheet. String variables containing the destination cell reference.
Source Range
Specifies the range to copy. Enter the range reference (e.g., "A1:B10") from the source sheet that should be copied. String variables containing the source range reference.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Paste Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Copy Paste Range" activity onto the workflow.
Configure the properties by specifying the source range and destination cell within the Excel workbook.
Optionally, configure the delay.
Execute the workflow to copy the specified range and paste it to the designated cell in the destination sheet.
Example:

Consider an example where the "Copy Paste Range" activity is used to copy a range from "A1:B10" and paste it starting from cell "C1" in the same sheet:
Copy Paste Range:
  Source Range: "A1:B10"
  Destination Cell: "C1"
  Delay: 2
In this example, the activity copies the range "A1:B10" and pastes it starting from cell "C1" with a 2-second delay, allowing time for any necessary cleanup or synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Look Up Range/index.html

Look Up Range
AutomatR.Excel.Activities.LookUpRange
The "Look Up Range" activity in AutomatR is part of the Excel activities package, designed to search for a specified value within a given range in Microsoft Excel. This activity returns the coordinates of the cell containing the searched value as string variables, enhancing automation capabilities in Excel workflows.
Properties
​
Name
Description
Input
Range
Enter the range to be searched. String variables containing the range in Excel format (e.g., "A1:B10").
Value
Enter the value to search within the specified range. String variables containing the value to be searched.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
Output
Result
Return the cell number containing the searched value. String variables representing the cell coordinates (e.g., "B3").
How to use:
Drag and drop the "Look Up Range" activity onto the workflow.
Configure the properties by specifying the range to be searched and the value to look up within that range.
Optionally, configure the delay.
Execute the workflow to search for the specified value within the given range in Excel.
Example:

Consider an example where the "Look Up Range" activity is used to find the cell containing the value "John" within the range "A1:B10":
Look Up Range:
  Range: "A1:B10"
  Value: "John"
  Delay: 2
In this example, the activity searches for the value "John" within the range "A1:B10" with a delay of 2 seconds. The result, representing the cell coordinates containing the searched value, is stored in the string variable specified in the "Result" property.
Note:
 Ensure that the "Look Up Range" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Insert Or Delete Rows/index.html

Insert Or Delete Rows
AutomatR.Excel.Activities.InsertOrDeleteRows
The "Insert or Delete Rows" activity in AutomatR is part of the Excel activities package, designed to dynamically add or remove rows in Microsoft Excel based on the specified index or position. This activity provides flexibility in adjusting the structure of Excel worksheets, enhancing automation capabilities.
Properties
​
Name
Description
Input
Action Type
Select the operation to either insert or delete rows. Options: 
Insert
, 
Delete
.
Index
Enter the index or position where the row addition or deletion occurs. Integer variables containing the index value.
No. Of Rows
Enter the number of rows you wish to add or remove. Integer variables containing the number of rows.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Insert or Delete Rows" activity onto the workflow.
Configure the properties by specifying the action type (insert or delete), index, and the number of rows.
Optionally, configure the delay.
Execute the workflow to dynamically insert or delete rows based on the specified parameters.
Example:

Consider an example where the "Insert or Delete Rows" activity is used to insert three rows starting from the third row index:
Insert or Delete Rows:
  ActionType: Insert
  Index: 2
  NoOfRows: 3
  Delay: 2
In this example, the activity inserts three rows starting from the third row index. The delay is set to 2 seconds, allowing time for any required synchronization.
Note:
 Ensure that the "Insert or Delete Rows" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Auto Fill Range/index.html

Auto Fill Range
AutomatR.Excel.Activities.AutoFillRange
The "Auto Fill Range" activity in AutomatR is part of the Excel activities package, providing functionality to mimic the Autofill functionality in Excel. This activity is useful for automatically adapting formulas from a source range to a destination range based on the specified rule.
Properties
​
Name
Description
Input
Destination Range
Specifies the range that gets autofilled based on the specified rule from the source range.
Source Range
Specifies the range containing the autofill rule. Formulas defined in this range will be adapted to the destination range.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Auto Fill Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Auto Fill Range" activity onto the workflow.
Configure the properties by specifying the source range containing the autofill rule and the destination range to be autofilled.
Optionally, configure the delay.
Execute the workflow to apply the autofill rule to the destination range based on the specified source range.
Example:

Consider an example where the "Auto Fill Range" activity is used to autofill formulas from the range "A1:A5" to the destination range "B1:B5":
Auto Fill Range:
  Source Range: "A1:A5"
  Destination Range: "B1:B5"
  Delay: 2
In this example, the activity adapts the formulas defined in the source range "A1:A5" to the destination range "B1:B5." The optional delay is set to 2 seconds, providing time for any necessary synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Insert Or Delete Columns/index.html

Insert Or Delete Columns
AutomatR.Excel.Activities.InsertOrDeleteColumns
The "Insert or Delete Columns" activity in AutomatR is part of the Excel activities package, designed to dynamically add or remove columns in Microsoft Excel based on the specified index or position. This activity provides flexibility in adjusting the structure of Excel worksheets, enhancing automation capabilities.
Properties
​
Name
Description
Input
Action Type
Select the operation to either insert or delete columns. Options: 
Insert
, 
Delete
.
Index
Enter the index or position where the column addition or deletion occurs. Integer variables containing the index value.
No. Of Columns
Enter the number of columns you wish to add or remove. Integer variables containing the number of columns.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Insert or Delete Columns" activity onto the workflow.
Configure the properties by specifying the action type (insert or delete), index, and the number of columns.
Optionally, configure the delay.
Execute the workflow to dynamically insert or delete columns based on the specified parameters.
Example:

Consider an example where the "Insert or Delete Columns" activity is used to insert three columns starting from the third column index:
Insert or Delete Columns:
  ActionType: Insert
  Index: 2
  NoOfColumns: 3
  Delay: 2
In this example, the activity inserts three columns starting from the third column index. The delay is set to 2 seconds, allowing time for any required synchronization.
Note:
 Ensure that the "Insert or Delete Columns" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Processing/Execute VBAScript/index.html

Execute VBAScript
AutomatR.Excel.Activities.ExecuteVBAScript
The "Execute VBA Script" activity in AutomatR is part of the Excel activities package, designed to invoke a macro from an external file containing VBA code and execute it against an Excel file. This activity is useful for running custom VBA scripts within Excel as part of an automated workflow.
NOTE:
 To work with Execute VBAScript activity, enable the Trust Access to the VBA project object model from Excel by navigating to (File >> Options >> Trust Center >> Trust Center Settings >> Macro Settings >> Select the Trust Access to the VBA project object model check box).

Properties
​
Name
Description
Input
Code File Path
Enter the VBA script file path located locally with code to be executed on an Excel file. String variables containing the file path.
Enter Method Name
Enter the method name in the code file. String variables containing the method name. If not provided, the default method "Main" is used.
Enter Method Params
Enter the parameters/arguments in the code file as an Enumerable object list.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Execute VBA Script" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Output
Returns the results as an object based on the method output in the code file. Variables of relevant types to store the method output.
How to use:
Drag and drop the "Execute VBA Script" activity onto the workflow.
Configure the properties by specifying the VBA script file path and, optionally, providing the method name and parameters.
Optionally, configure the delay.
Execute the workflow to run the specified VBA script within the Excel workbook.
Example:

Consider an example where the "Execute VBA Script" activity is used to execute a VBA script named "MyScript" with parameters:
Execute VBA Script:
  Code File Path: "C:\Scripts\MyScript.vba"
  Enter Method Name: "RunScript"
  Enter Method Params: {param1, param2, param3}
  Delay: 2
In this example, the activity executes the "RunScript" method within the "MyScript.vba" file located at "C:\Scripts\". The parameters "param1," "param2," and "param3" are provided to the script. The execution is delayed by 2 seconds as specified in the delay property.
Note:
 Ensure that the "Execute VBA Script" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Save Workbook/index.html

Save Workbook
AutomatR.Excel.Activities.SaveWorkbook
The "Save Workbook" activity in AutomatR is part of the Excel activities package, allowing you to save changes made to the Excel workbook. This activity is essential for persisting modifications and updates made during the automation process.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Save Workbook" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to save changes made to the Excel workbook.
Important:
Ensure that the Excel workbook has been previously opened and modified.
It is recommended to use this activity judiciously to avoid overwriting the original workbook unintentionally.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Close Workbook/index.html

Close Workbook
AutomatR.Excel.Activities.CloseWorkbook
The "Close Workbook" activity in AutomatR is part of the Excel activities package, allowing you to close an opened Excel workbook. This activity is useful for managing resources efficiently and ensuring proper cleanup after working with Excel data.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Close Workbook" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Workbook
Specifies the workbook variable representing the currently active workbook that needs to be closed. If no workbook is provided, it will close the currently active workbook.
How to use:
Drag and drop the "Close Workbook" activity onto the workflow.
Optionally, configure the properties by specifying the workbook variable representing the workbook to be closed. If no workbook is provided, it will close the currently active workbook.
Optionally, configure the delay.
Execute the workflow to close the specified workbook or the currently active workbook.
Example:

Consider an example where the "Close Workbook" activity is used to close the currently active workbook:
Close Workbook:
  Delay: 2
In this example, the activity closes the currently active workbook with a 2-second delay, allowing time for any necessary cleanup or synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Get Workbook Sheets/index.html

Get Workbook Sheets
AutomatR.Excel.Activities.GetWorkbookSheets
The "Get Workbook Sheets" activity in AutomatR is part of the Excel activities package, designed to return a list of all the sheet names in a workbook as string variables. This activity provides valuable information about the sheets present in an Excel workbook, allowing for dynamic handling of multiple sheets within automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Workbook Sheets" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Sheets
Outputs a list of all the sheet names in a workbook as string variables. List variables containing sheet names, ordered by their index.
How to use:
Drag and drop the "Get Workbook Sheets" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve the list of sheet names in the workbook.
Example:

Consider an example where the "Get Workbook Sheets" activity is used to retrieve the names of all sheets in the workbook:
Get Workbook Sheets:
  Delay: 2
  Sheets: sheetNames
In this example, the activity retrieves the names of all sheets in the workbook, and the sheet names are stored in the list variable "sheetNames" for further processing in the workflow.
Note:
 Ensure that the "Get Workbook Sheets" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Copy Sheet/index.html

Copy Sheet
AutomatR.Excel.Activities.CopySheet
The "Copy Sheet" activity in AutomatR is part of the Excel activities package, designed to facilitate the copying of a sheet from one workbook to another or within the same workbook. This activity streamlines sheet management tasks in Excel, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination File
Enter the workbook file path where the sheet in scope needs to be copied. If left empty, the sheet is copied within the current workbook. String variables containing the destination file path.
Destination File Password
Enter the password for the destination workbook file if it is password-protected. String variables containing the destination file password.
Destination Sheet Name
Enter the sheet name in the destination file or the current workbook where the sheet needs to be copied. String variables containing the destination sheet name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Copy Sheet" activity onto the workflow.
Configure the properties by specifying the destination file, destination sheet name, and optionally the destination file password.
Optionally, configure the delay.
Execute the workflow to copy the specified sheet to the destination workbook or within the current workbook.
Example:

Consider an example where the "Copy Sheet" activity is used to copy a sheet named "Sheet1" to a workbook located at "C:\DestinationWorkbook.xlsx" with a 2-second delay:
Copy Sheet:
  Destination File: "C:\DestinationWorkbook.xlsx"
  Destination Sheet Name: "Sheet2"
  Destination File Password: "password123"
  Delay: 2
In this example, the activity copies the "Sheet1" to "Sheet2" in the destination workbook located at "C:\DestinationWorkbook.xlsx" with a 2-second delay, allowing time for any necessary cleanup or synchronization. If the destination workbook is password-protected, the password "password123" is provided for authentication.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Set Range Colour/index.html

Set Range Colour
AutomatR.Excel.Activities.SetRangeColor
The "Set Range Color" activity in AutomatR is part of the Excel activities package, allowing users to change the background color of a specified cell or cell range within an Excel spreadsheet. This activity enhances the visual representation of data and facilitates the customization of Excel sheets in automation workflows.
NOTE:
 This activity can only be used in Excel Root activity.
Properties
​
Name
Description
Input
Color
Enter the color to fill the background for the specified range in the sheet. This can be a known color name (e.g., "Red"). String variables containing the color name.
Hex Color
Enter the hex color to fill the background for the specified range in the sheet. String variables containing the hex color code (e.g., "#FF0000" for red).
Range
Enter the range which needs to be filled with color. This should be in the format of Excel range, such as "A1:B5". String variables containing the desired range.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Set Range Color" activity onto the workflow.
Configure the properties by specifying the range and color (either Hex Color or Color).
Optionally, configure the delay.
Execute the workflow to change the background color of the specified range within the Excel spreadsheet.
Important:
Ensure that the Excel workbook and sheet are open and accessible.
The specified range should be in a valid Excel range format (e.g., "A1:B5").
The color can be specified either in hex format (Hex Color) or by using a known color name (Color).
Incorrect range formats may result in an "Invalid given range" error.
Incorrect color specifications may result in an "Invalid color name" or "Incorrect hexadecimal code" error.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Create Table/index.html

Create Table
AutomatR.Excel.Activities.CreateTable
The "Create Table" activity in AutomatR is part of the Excel activities package, designed to simplify the process of creating a table from a specified range within an Excel workbook. This activity enhances the efficiency of automation workflows involving data organization and analysis in Excel.
Properties
​
Name
Description
Input
Range
Enter the range specifying on which the table will be created. String variables containing the range.
Table Name
Enter the new table name. String variables containing the table name.
Table Style
Enter the table style (e.g., "TableStyleDark5"). String variables containing the table style. If not provided, the default style is "TableStyleMedium15".
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Table" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Create Table" activity onto the workflow.
Configure the properties by specifying the range, table name, and optionally the table style.
Optionally, configure the delay.
Execute the workflow to create the specified table within the Excel workbook.
Example:

Consider an example where the "Create Table" activity is used to create a new table named "SalesTable" from the range "A1:D100" with the "TableStyleLight9" style and a 2-second delay:
Create Table:
  Table Name: "SalesTable"
  Range: "A1:D100"
  Table Style: "TableStyleLight9"
  Delay: 2
In this example, the activity creates a new table named "SalesTable" from the range "A1:D100" with the "TableStyleLight9" style and a 2-second delay, allowing time for any necessary cleanup or synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Filter Table/index.html

Filter Table
AutomatR.Excel.Activities.FilterTable
The "Filter Table" activity in AutomatR is part of the Excel activities package, designed to filter a table from a spreadsheet based on existing values from a specified column. This activity simplifies the process of filtering data within Excel tables, contributing to efficient data manipulation in automated workflows.
Properties
​
Name
Description
Input
Column Index
Enter the index for the column to apply the filter. Integer variables containing the column index. The indexing starts from 1.
Filter
Enter an array of string values based on which the column filter will be applied. Use the format { "value1", "value2", ... }. String array variables containing the filter values.
Table Name
Enter the name of the table to be filtered. String variables containing the table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Filter Table" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Filter Table" activity onto the workflow.
Configure the properties by specifying the table name, column index, and the array of values for filtering.
Optionally, configure the delay.
Execute the workflow to apply the specified filter to the table within Excel.
Example:

Consider an example where the "Filter Table" activity is used to filter a table named "SalesTable" based on values in column 3:
Filter Table:
  Table Name: "SalesTable"
  Column Index: 3
  Filter: {"Value1", "Value2", "Value3"}
  Delay: 2
In this example, the activity filters the "SalesTable" by applying a filter to column 3 with values "Value1," "Value2," and "Value3." The execution is delayed by 2 seconds as specified in the delay property.
Note:
 Ensure that the "Filter Table" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Create Pivot Table/index.html

Create Pivot Table
AutomatR.Excel.Activities.CreatePivotTable
The "Create Pivot Table" activity in AutomatR is part of the Excel activities package, designed to simplify the process of creating a pivot table from a specified range within an Excel workbook. This activity enhances the efficiency of automation workflows involving Excel data analysis.
Properties
​
Name
Description
Destination
Pivot Table Name
Enter the name of the new pivot table to be created. String variables containing the pivot table name.
Range
Enter the range specifying on which the pivot table will be created. String variables containing the range.
Input
Sheet Name
Enter the name of the sheet from which the data for the pivot table will be sourced. String variables containing the sheet name.
Source Table Name
Enter the name of the source table for the pivot. String variables containing the source table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Pivot Table" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Create Pivot Table" activity onto the workflow.
Configure the properties by specifying the sheet name, source table name, range, and the name of the new pivot table.
Optionally, configure the delay.
Execute the workflow to create the specified pivot table within the Excel workbook.
Example:

Consider an example where the "Create Pivot Table" activity is used to create a new pivot table named "SalesPivotTable" from the source table "SalesData" in the sheet "DataSheet" within the range "A1:D100" with a 2-second delay:
Create Pivot Table:
  Sheet Name: "DataSheet"
  Source Table Name: "SalesData"
  Range: "A1:D100"
  Pivot Table Name: "SalesPivotTable"
  Delay: 2
In this example, the activity creates a new pivot table named "SalesPivotTable" from the source table "SalesData" in the sheet "DataSheet" within the range "A1:D100" with a 2-second delay, allowing time for any necessary cleanup or synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Sort Table/index.html

Sort Table
AutomatR.Excel.Activities.SortTable
The "Sort Table" activity in AutomatR is part of the Excel activities package, allowing users to sort data within a table in a Microsoft Excel spreadsheet. This activity provides the flexibility to specify the table, the column to sort, and the sorting order (ascending or descending). 
NOTE:
 This activity can only be used in Excel Root activity.
Properties
​
Name
Description
Input
Column Index
Enter the index for the column to apply the sort on. Integer variables containing the column index.
Table Name
Enter the name of the table to be sorted. String variables containing the desired table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Sort Type
Select the type of sort to be applied, either Ascending or Descending. Enumeration variable (SortOrder) containing the desired sort order.
Ascending
 - order from smallest to biggest (numbers) or from A to Z (alphabetic characters).
Descending
 - order from biggest to smallest (numbers) or from Z to A (alphabetic characters).
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Sort Table" activity onto the workflow.
Configure the properties by specifying the table name, column index, and sort type (Ascending or Descending).
Optionally, configure the delay.
Execute the workflow to sort the specified table within the Excel spreadsheet.
Important:
Ensure that the Excel workbook and sheet are open and accessible.
The specified table name should be valid; otherwise, an "Invalid Table name" error will occur.
The column index should be the index of the column to sort, and the sort type should be selected based on the desired sorting order.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Insert Column/index.html

Insert Column
AutomatR.Excel.Activities.InsertColumn
The "Insert Column" activity in AutomatR is part of the Excel activities package, designed to insert a new column into a table within Microsoft Excel. This activity enhances automation workflows by allowing dynamic adjustments to table structures, improving flexibility in Excel data processing.
Properties
​
Name
Description
Input
ColumnName
Enter the name for the new column to be inserted in the table. String variables containing the column name.
Position
Specify the position for inserting the new column or leave it blank to take the next available column in the table design. Integer variables containing the position index.
TableName
Enter the name of the table where the new column will be inserted. String variables containing the table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Insert Column" activity onto the workflow.
Configure the properties by specifying the table name, new column name, and optional position.
Optionally, configure the delay.
Execute the workflow to insert the new column into the specified table.
Example:

Consider an example where the "Insert Column" activity is used to insert a new column named "Sales" into a table named "SalesData" at the third position:
Insert Column:
  TableName: "SalesData"
  ColumnName: "Sales"
  Position: 3
  Delay: 2
In this example, the activity inserts a new column named "Sales" into the "SalesData" table at the specified position. The delay is set to 2 seconds, allowing time for any required synchronization.
Note:
 Ensure that the "Insert Column" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Get Table Range/index.html

Get Table Range
AutomatR.Excel.Activities.GetTableRange
The "Get Table Range" activity in AutomatR is part of the Excel Table activities package, designed to extract the range of an Excel table from a specified spreadsheet. This activity is useful for dynamically working with the data within a named Excel table, enhancing automation workflows.
Properties
​
Name
Description
Input
Table Name
Specifies the name of the Excel table from which to extract the range. String variables containing the table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Table Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the string representing the range of the Excel table (e.g., "A1:B5"). String variables containing the range value.
How to use:
Drag and drop the "Get Table Range" activity onto the workflow.
Configure the properties by specifying the table name.
Optionally, configure the delay.
Execute the workflow to retrieve the range of the specified Excel table.
Example:

Consider an example where the "Get Table Range" activity is used to extract the range of an Excel table named "EmployeeData":
Get Table Range:
  Delay: 2
  Table Name: "EmployeeData"
  Result: tableRange
In this example, the activity retrieves the range of the "EmployeeData" Excel table, and the range value is stored in the string variable "tableRange" for further processing in the workflow.
Note:
 Ensure that the "Get Table Range" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Refersh Pivot Table/index.html

Refresh Pivot Table
AutomatR.Excel.Activities.RefreshPivotTable
The "Refresh Pivot Table" activity in AutomatR is part of the Excel activities package, designed to refresh a specified pivot table within a workbook. This activity ensures that the pivot table reflects the most up-to-date data, facilitating automation workflows involving dynamic Excel reports.
Properties
​
Name
Description
Input
Sheet Name
Enter the sheet name of the workbook where you want to refresh the pivot table. String variables containing the sheet name.
Table Name
Enter the name of the pivot table that you want to refresh. String variables containing the pivot table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Refresh Pivot Table" activity onto the workflow.
Configure the properties by specifying the sheet name and the name of the pivot table to be refreshed.
Optionally, configure the delay.
Execute the workflow to refresh the specified pivot table within the Excel workbook.
Example:

Consider an example where the "Refresh Pivot Table" activity is used to refresh a pivot table named "SalesPivotTable" on the sheet named "SalesData" in an Excel workbook:
Refresh Pivot Table:
  Sheet Name: "SalesData"
  Table Name: "SalesPivotTable"
In this example, the activity refreshes the "SalesPivotTable" on the "SalesData" sheet, ensuring that the pivot table reflects the most recent data.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Table/Delete Column/index.html

Delete Column
AutomatR.Excel.Activities.DeleteColumn
The "Delete Column" activity in AutomatR is part of the Excel activities package, specifically designed for deleting a table column from a spreadsheet based on its name. This activity streamlines data manipulation tasks in Excel, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Column Index
Enter the index for the column which needs to be deleted. Integer variables containing the column index.
Table Name
Enter the table name. String variables containing the table name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Column" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Column" activity onto the workflow.
Configure the properties by specifying the table name and the index of the column to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified column within the Excel workbook.
Example:

Consider an example where the "Delete Column" activity is used to delete the column at index 3 from a table named "SalesTable" with a 2-second delay:
Delete Column:
  Table Name: "SalesTable"
  Column Index: 3
  Delay: 2
In this example, the activity deletes the column at index 3 from the "SalesTable" within the Excel workbook, allowing time for any necessary cleanup or synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Write Cell/index.html

Write Cell
AutomatR.Excel.Activities.WriteCell
The "Write Cell" activity in AutomatR is part of the Excel activities package, facilitating the automation of spreadsheet data manipulation within Microsoft Excel. This activity writes a specified value or formula into a designated cell, streamlining the process of updating Excel data dynamically.
NOTE:
 This activity can only be used in Excel Root activity.
Properties
​
Name
Description
Input
Cell Number
Enter the cell number where you want to start writing the data. String variables containing the cell number, e.g., "A1" or "B2".
Value
Enter the value you wish to enter as text, a cell formula, or a stored variable. String variables containing the data to be written into the cell.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. Integer variables containing the delay duration.
How to use:
Drag and drop the "Write Cell" activity onto the workflow.
Configure the properties by specifying the cell number and the value to be written into the Excel spreadsheet.
Optionally, configure the delay.
Execute the workflow to write the specified data into the designated cell.
Important:
Ensure that the Excel workbook is open and accessible.
Provide a valid cell number (e.g., "A1") and the value to be written.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Add Sheet/index.html

Add Sheet
AutomatR.Excel.Activities.AddSheet
The "Add Sheet" activity in AutomatR is part of the Excel activities package, designed to add a new sheet to the specified Excel workbook. This activity enhances automation capabilities in Excel by facilitating the dynamic creation of sheets within the workbook.
Properties
​
Name
Description
Input
New Sheet
Specifies the name of the new sheet to be added to the existing workbook. It allows a string variable containing the desired sheet name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Add Sheet" activity onto the workflow.
Configure the properties by specifying the new sheet name.
Optionally, configure the delay.
Execute the workflow to add a new sheet to the Excel workbook.
Example:

Consider an example where the "Add Sheet" activity is used to add a new sheet named "Sheet3" to the existing Excel workbook:
Add Sheet:
  New Sheet: "Sheet3"
  Delay: 2
In this example, the activity adds a new sheet named "Sheet3" to the existing Excel workbook. The optional delay is set to 2 seconds, providing time for any necessary synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Excel Root/index.html

Excel Root
AutomatR.Excel.ExcelRoot
The "Excel Root" activity in AutomatR is a fundamental component of the Excel activities package, serving as a scope for Excel activities. This activity opens an Excel workbook, providing a context for executing various Excel-related operations within the specified workbook and sheet.
Properties
​
Name
Description
Input
Excel Path
Enter the full path of the workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the path.
In Workbook
Enter the workbook variable for storing the information of Excel captured from the Excel path file.
Sheet Name
Enter the name of the spreadsheet to be used and referred to in scope Excel activities. String variables containing the sheet name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Result
Optional
Display Excel
When set to true, the Excel file will be displayed, and operations performed on it will be visible. Boolean variables indicating whether to display Excel.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Excel Root" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Password
Enter the password for the workbook if required. String variables containing the password.
Output
Workbook
Enter the workbook variable for storing the entire information of Excel, which has been captured from the Excel path file and can be used for other Excel activities.
When the execution of this activity ends, the specified workbook and the Excel application are closed. If a 
WorkbookApplication
 variable is provided in the Output > Workbook property field, the spreadsheet is not closed after the activity ends. If the specified file does not exist, a new Excel file is created.
How to use:
Drag and drop the "Excel Root" activity onto the workflow.
Configure the properties by specifying the Excel path, sheet name, and other optional parameters.
Optionally, configure the delay.
Optionally, set the "Display Excel" property to true if visualizing Excel operations is required.
Execute the workflow to open the specified Excel workbook and create a scope for Excel activities.
Example:

Consider an example where the "Excel Root" activity is used to open an Excel workbook located at "C:\Data\workbook.xlsx" with a sheet named "Sheet1":
Excel Root:
  Excel Path: "C:\Data\workbook.xlsx"
  Sheet Name: "Sheet1"
  Password: "password123"
  Delay: 2
  Display Excel: true
  In Workbook: workbookVariable
  Workbook: excelWorkbook
In this example, the activity opens the specified Excel workbook, sets the sheet to "Sheet1," and provides the workbook variable "workbookVariable" for storing information. The entire Excel workbook is also stored in the "excelWorkbook" variable for use in subsequent Excel activities.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Delete Range/index.html

Delete Range
AutomatR.Excel.Activities.DeleteRange
The "Delete Range" activity in AutomatR is part of the Excel activities package, specifically designed for deleting a specified range within an Excel workbook. This activity streamlines data manipulation tasks in Excel, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Range
Enter the range that needs to be deleted in the workbook sheet (e.g., A5:D4). String variables containing the range.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Range" activity onto the workflow.
Configure the properties by specifying the range to be deleted within the workbook sheet.
Optionally, configure the delay.
Execute the workflow to delete the specified range within the Excel workbook.
Example:

Consider an example where the "Delete Range" activity is used to delete the range A1:B2 with a 2-second delay:
Delete Range:
  Range: "A1:B2"
  Delay: 2
In this example, the activity deletes the specified range A1:B2 within the Excel workbook, allowing time for any necessary cleanup or synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Get Selected Range/index.html

Get Selected Range
AutomatR.Excel.Activities.GetSelectedRange
The "Get Selected Range" activity in AutomatR is part of the Excel activities package, designed to retrieve the currently selected range in an Excel workbook and store it as a string variable. This activity facilitates dynamic interactions with selected data in Excel, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Selected Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Range
Returns the range that is currently selected in the workbook sheet. String variables containing the range value (e.g., "A2:D4").
How to use:
Drag and drop the "Get Selected Range" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve the currently selected range in the Excel workbook.
Example:

Consider an example where the "Get Selected Range" activity is used to retrieve the currently selected range in the Excel workbook:
Get Selected Range:
  Delay: 2
  Range: selectedRange
In this example, the activity retrieves the currently selected range in the Excel workbook, and the range value is stored in the string variable "selectedRange" for further processing in the workflow.
Note:
 Ensure that the "Get Selected Range" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Read Column/index.html

Read Column
AutomatR.Excel.Activities.ReadColumn
The "Read Column" activity in AutomatR is part of the Excel activities package, designed to read values from a specified column in an Excel worksheet. This activity facilitates the extraction of columnar data, enhancing automation workflows that involve Excel data manipulation.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Column Index
Enter the index for the column for which values need to be retrieved. String variables containing the column index.
Column Name
Enter the column name for which values need to be retrieved. String variables containing the column name.
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity. Integer variables containing the delay duration.
Output
OutColumn
Returns the list of strings representing the values of the selected column. List of string variables containing the column values.
How to use:
Drag and drop the "Read Column" activity onto the workflow.
Configure the properties by specifying either the column name or column index for which values should be retrieved.
Optionally, configure the delay.
Execute the workflow to read values from the specified column in the Excel worksheet.
Example:

Consider an example where the "Read Column" activity is used to read values from the column named "Amount":
Read Column:
  Column Name: "Amount"
  Delay: 2
  OutColumn: AmountValues
In this example, the activity reads values from the "Amount" column with a delay of 2 seconds. The result, representing the values of the "Amount" column, is stored in the list of strings specified in the "OutColumn" property.
Note:
 Ensure that the "Read Column" activity is placed within an "Excel Root" activity to establish the Excel context for execution. Either the column name or column index must be provided for the activity to function properly.

URL: https://docs.automatr.tech/docs/Products/Activities/Excel/Get Workbook Sheet/index.html

Get Workbook Sheet
AutomatR.Excel.Activities.GetWorkbookSheet
The "Get Workbook Sheet" activity in AutomatR is part of the Excel activities package, designed to look for a sheet based on its index and return its name as a string variable. This activity enhances automation workflows by providing the flexibility to dynamically identify and work with specific sheets within an Excel workbook. 
Properties
​
Name
Description
Input
Index
Specifies the index of the sheet to retrieve. Integer variables containing the sheet index (1-based index).
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Workbook Sheet" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Sheet
Outputs the name of the sheet based on the provided index. String variables containing the sheet name.
How to use:
Drag and drop the "Get Workbook Sheet" activity onto the workflow.
Configure the properties by specifying the sheet index.
Optionally, configure the delay.
Execute the workflow to retrieve the name of the specified sheet.
Example:

Consider an example where the "Get Workbook Sheet" activity is used to retrieve the name of the sheet at index 2:
Get Workbook Sheet:
  Delay: 2
  Index: 2
  Sheet: sheetName
In this example, the activity retrieves the name of the sheet at index 2, and the sheet name is stored in the string variable "sheetName" for further processing in the workflow.
Note:
 Ensure that the "Get Workbook Sheet" activity is placed within an "Excel Root" activity to establish the Excel context for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/For Each/index.html

For Each
System.Activities.Statements.ForEach
The "For Each" activity in AutomatR is a control flow activity that enables the iteration over elements in a collection, such as a list or an array. This activity is crucial for automating tasks that involve processing each item within a collection, allowing you to perform actions on each element sequentially.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Type Argument
Specifies the data type of the elements in the collection. This property ensures that you correctly handle and process each element based on its data type. 
Boolean
, 
Int32
, 
String
, 
Object
, 
Array of [T]
, or any other 
.NET type
. You can use the "Browse for Types" option to select a specific .NET type.
Values
Specifies the collection or array of elements that the "For Each" activity will iterate over. You can either directly input the collection or use the "Browse for Types" option to select a .NET type and define the values dynamically. Variables containing the collection or array to be iterated over. This can be a list, an array, or any other data structure that implements the IEnumerable interface.
How to use:
Drag and drop the "For Each" activity onto the workflow.
In the "Type Argument" property, specify the data type of the elements in the collection.
In the "Values" property, input the collection or array to be iterated over.
Example:

Consider an example where the "For Each" activity is used to iterate through a list of strings and log each item:
For Each:
  Display Name: "Log Items"
  Type Argument: String
  Values: {"Apple", "Banana", "Orange", "Grapes"}
  // The loop iterates through each string in the list
  Sequence:
    Log Message: "Processing item: " + item
In this example, the "For Each" loop processes each string in the list, and the "Log Message" activity logs a message for each item.
The "For Each" activity is a powerful tool for automating repetitive tasks involving collections, providing a convenient and efficient way to iterate over and process each element.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Retry/index.html

Retry
AutomatR.DefaultActivities.Retry
The "Retry" activity in AutomatR is a specialized control flow activity that allows you to automatically retry a sequence of activities until a specified condition is met or a maximum number of attempts is reached. This activity is useful for handling transient errors or situations where you want to retry an operation until it succeeds.
Properties
​
Name
Description
Misc
Condition
Specifies the condition that, when true, indicates that the activities have succeeded, and the retry loop should exit. The activities inside the "Retry Scope" will be re-executed until this condition is met or the maximum number of attempts is reached. 
Boolean
 variables or expressions that result in a boolean value. The condition determines whether the retry loop continues or exits.
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Max Attempts
Specifies the maximum number of attempts to execute the activities inside the "Retry Scope." If the condition is not met within the specified number of attempts, the retry loop exits. 
Integer
 variables representing the maximum number of attempts.
Retry Interval
Specifies the time interval (in milliseconds) between consecutive attempts. This property allows you to control the timing between retries to avoid overwhelming the system or API being accessed. 
Integer
 variables representing the retry interval in milliseconds.
How to use:
Drag and drop the "Retry" activity onto the workflow.
In the "Condition" property, define the condition that, when true, indicates that the activities have succeeded.
In the "Max Attempts" property, specify the maximum number of attempts for the retry loop.
In the "Retry Interval" property, define the time interval between consecutive attempts.
Place the activities to be retried inside the "Retry Scope" container.
Example:

Consider an example where the "Retry" activity is used to retry reading a file until it succeeds or reaches a maximum number of attempts:
Retry:
  Display Name: "Retry Read File"
  Condition: File.Exists("example.txt")
  Max Attempts: 3
  Retry Interval: 1000 // 1 second
  Retry Scope:
    Read Text File: "example.txt"
In this example, the "Retry" activity retries reading the file "example.txt" until the condition (File.Exists("example.txt")) is true or until the maximum number of attempts (3) is reached. The "Retry Interval" is set to 1 second between attempts.
The "Retry" activity is a powerful tool for handling transient errors and automating scenarios where you want to give an operation multiple chances to succeed. It provides robust error-handling capabilities in automation workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/If/index.html

If
System.Activities.Statements.If
The "If" activity in AutomatR is a conditional control flow activity that allows you to implement decision-making logic within your automation workflows. It evaluates a specified condition and executes a set of activities based on whether the condition is true or false. The "If" activity is fundamental for creating workflows with branching paths, enabling different actions to be taken depending on the outcome of a condition.
Properties
​
Name
Description
Misc
Condition
Specifies the condition to be evaluated. The activities inside the "Then" or "Else" block are executed based on whether this condition is true or false. 
Boolean
 variables or expressions that result in a boolean value. The condition determines which branch of the "If" activity will be executed.
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
How to use:
Drag and drop the "If" activity onto the workflow.
In the "Condition" property, define the condition that determines which branch of the "If" activity should be executed.
Place the activities to be executed when the condition is true inside the "Then" block.
Optionally, place the activities to be executed when the condition is false inside the "Else" block.
Example:

Consider an example where the "If" activity is used to check whether a given number is even or odd:
If:
  Display Name: "Check Even or Odd"
  Condition: number % 2 = 0
  // The condition checks whether the number is divisible by 2 (even)
  Then:
    Log Message: "The number is even."
  Else:
    Log Message: "The number is odd."
In this example, the "If" activity checks whether the number is divisible by 2 (even). If the condition is true, the "Then" block is executed, logging a message that the number is even. If the condition is false, the "Else" block is executed, logging a message that the number is odd.
The "If" activity is crucial for introducing decision-making capabilities into workflows, allowing automation developers to create dynamic and flexible processes based on specific conditions.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Activity Comment/index.html

Activity Comment
AutomatR.DefaultActivities.Commented
The "Activity Comment" in AutomatR is a non-functional activity primarily used for documentation and commenting within workflows. It does not perform any executable actions but serves as a way for developers to include comments or notes directly within the workflow diagram. This can be helpful for explaining complex logic, providing context, or leaving notes for collaborators who review the workflow.
Properties
​
Name
Description
Misc
Body
This property allows you to input the content of the comment or note. You can enter text, explanations, or any information that aids in understanding the workflow. It supports plain text and may include line breaks for better formatting. 
String
 variables containing the comment or note text. This allows you to dynamically generate or update comments based on variables or expressions.
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
How to use:
Drag and drop the "Activity Comment" onto the workflow where you want to include a comment.
In the "Body" property, enter the text of the comment, providing relevant information or explanations.
Optionally, in the "Display Name" property, enter a name that will be displayed as the label for the comment in the workflow diagram.
Example:

Consider the following example where an "Activity Comment" is used to explain a specific section of a workflow:
Activity Comment:
  Body: "Retrieve customer information from the database and check eligibility."
  Display Name: "Customer Information Retrieval"
In this example, the comment provides context for the activities related to retrieving customer information. The "Display Name" is set to "Customer Information Retrieval" to label the comment in the workflow diagram.
By using "Activity Comment" strategically, developers can enhance the readability and understanding of workflows, making it easier for team members to collaborate, troubleshoot, and maintain the automation projects.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Do While/index.html

Do While
System.Activities.Statements.DoWhile
The "Do While" activity in AutomatR is a control flow activity that allows you to repeatedly execute a sequence of activities while a specified condition is true. This structure is fundamental for implementing loops in workflows, enabling automation developers to iteratively perform actions until a certain condition is no longer met.
Properties
​
Name
Description
Misc
Condition
Specifies the condition that determines whether the loop should continue executing. As long as the condition evaluates to true, the activities within the "Do While" loop will be executed repeatedly. 
Boolean
 variables or expressions that result in a boolean value. The loop continues as long as the condition evaluates to true.
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
To
Specifies the variable or property to which the value will be assigned. You can select an existing variable or create a new one directly from the "To" property. Variables of various types (int, string, bool, etc.) or properties of specific activities. You can also create new variables by clicking the ellipsis (...) and defining the variable in the Variable Manager.
Value
Specifies the value to be assigned to the variable or property defined in the "To" property. This value can be a constant, a result of an expression, or a value stored in another variable. Variables of various types, constants, or expressions. You can use existing variables, literal values (e.g., "Hello, World!"), or expressions that evaluate to the desired value.
How to use:
Drag and drop the "Do While" activity onto the workflow.
In the "Condition" property, define the condition that needs to be true for the loop to continue executing.
Place the activities that you want to repeat inside the "Do While" activity.
Example:

Consider an example where the "Do While" activity is used to iterate through a list of items and perform an action for each item:
Do While:
  Display Name: "Process Items"
  Condition: index < itemList.Count
  // The loop continues as long as the index is less than the number of items in the list
  Sequence:
    Assign: item = itemList(index)
    // Perform actions with the current item
    Log Message: "Processing item: " + item
    Assign: index = index + 1
    // Increment the index for the next iteration
In this example, the "Do While" loop continues to execute as long as the condition (index < itemList.Count) is true. The sequence of activities inside the loop processes each item in the "itemList" by logging a message and incrementing the index for the next iteration.
The "Do While" activity is valuable for scenarios where you need to repeat a set of actions based on a condition, providing a flexible and efficient way to implement looping logic in your AutomatR workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Assign/index.html

Assign
System.Activities.Statements.Assign
The "Assign" activity in AutomatR is a fundamental and versatile activity used for assigning values to variables or properties. It enables the dynamic manipulation of data within workflows, allowing users to set or update the value of a variable or property based on specific conditions or calculations.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
To
Specifies the variable or property to which the value will be assigned. You can select an existing variable or create a new one directly from the "To" property. Variables of various types (int, string, bool, etc.) or properties of specific activities. You can also create new variables by clicking the ellipsis (...) and defining the variable in the Variable Manager.
Value
Specifies the value to be assigned to the variable or property defined in the "To" property. This value can be a constant, a result of an expression, or a value stored in another variable. Variables of various types, constants, or expressions. You can use existing variables, literal values (e.g., "Hello, World!"), or expressions that evaluate to the desired value.
How to use:
Drag and drop the "Assign" activity onto the workflow.
In the "To" property, select an existing variable or create a new one using the ellipsis (...) and define it in the Variable Manager.
In the "Value" property, specify the value to be assigned to the variable. This can be a constant, an expression, or the value of another variable.
Example:

Consider a simple example where the "Assign" activity is used to concatenate two strings and assign the result to a variable:
Assign:
  Display Name: "Concatenate Strings"
  To: resultString (String variable)
  Value: "Hello, " + name (String variable)
In this example, the "Assign" activity concatenates the string "Hello, " with the value stored in the variable "name" and assigns the result to the variable "resultString."
The "Assign" activity is a powerful tool for manipulating data within AutomatR workflows, enabling dynamic assignments and updates to variables and properties. It is widely used for tasks such as data processing, calculations, and value transformations in automation projects.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Switch/index.html

Switch
System.Activities.Statements.Switch
The "Switch" activity in AutomatR is a control flow activity that allows you to define multiple cases based on the value of an expression and execute specific actions for each case. It is a powerful tool for creating structured workflows with different outcomes based on the value of a variable or expression.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Expression
Specifies the expression whose value will be evaluated to determine which case to execute. The cases are defined based on the possible values of this expression. Variables containing the expression to be evaluated. The expression can be of various types, such as integers, strings, or enums.
How to use:
Drag and drop the "Switch" activity onto the workflow.
In the "Expression" property, specify the variable or expression whose value will be used to determine the case to execute.
Inside the "Switch" activity, define different cases based on possible values of the expression.
Place the activities to be executed for each case inside the corresponding case container.
Example:

Consider an example where the "Switch" activity is used to handle different payment methods:
Switch:
  Display Name: "Payment Method Switch"
  Expression: paymentMethod
  // The expression is the variable representing the payment method
  Case "Credit Card":
    // Activities for processing credit card payment
    Log Message: "Processing credit card payment."
  Case "PayPal":
    // Activities for processing PayPal payment
    Log Message: "Processing PayPal payment."
  Case "Bank Transfer":
    // Activities for processing bank transfer
    Log Message: "Processing bank transfer."
  Default:
    // Activities for handling other payment methods
    Log Message: "Unknown payment method."
In this example, the "Switch" activity evaluates the value of the "paymentMethod" variable and executes the corresponding case based on the payment method. The "Default" case handles scenarios where the payment method is not explicitly defined in the cases.
The "Switch" activity provides a clean and organized way to handle multiple scenarios within a workflow, making it easier to read and maintain automation projects.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Write Line/index.html

Write Line
System.Activities.Statements.Write Line
The "Write Line" activity in AutomatR is a simple yet powerful activity used to write text or information to the output console or a specified text file. This activity is commonly used for debugging purposes or to display information during the execution of a workflow.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Text
Specifies the text or information that will be written to the output console or a text file. This can be a literal string, a variable, or an expression. 
String
 variables, expressions, or constants containing the text to be written.
Text Writer
Specifies the text file to which the text will be written. By default, it writes to the output console, but you can choose a specific text file by providing the file path. 
String
 variables containing the file path. You can use variables to dynamically set the file path during runtime.
How to use:
Drag and drop the "Write Line" activity onto the workflow.
In the "Text" property, specify the text or information you want to write.
Optionally, in the "Text Writer" property, provide the file path if you want to write the text to a specific file.
Example:

Consider an example where the "Write Line" activity is used to log information during the execution of a workflow:
Write Line:
  Display Name: "Log Message"
  Text: "Processing item: " + currentItem
In this example, the "Write Line" activity logs a message to the output console, indicating the processing of a specific item. The "Text" property is set to a string concatenation, allowing for dynamic messages based on the value of the "currentItem" variable.
Note:
 If you want to write to a text file, you can provide the file path in the "Text Writer" property. For example:
Write Line:
  Display Name: "Log to File"
  Text: "This message will be written to a file."
  Text Writer: "C:\Logs\logfile.txt"
In this case, the "Write Line" activity writes the specified text to the file located at "C:\Logs\logfile.txt."

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Exception/Throw/index.html

Throw
System.Activities.Statements.Throw
The "Exception - Throw" activity in AutomatR is used to explicitly throw an exception within a workflow. This activity allows you to create and throw custom exceptions at specific points in your automation process. Throwing exceptions is a way to indicate that something unexpected or erroneous has occurred during the execution of the workflow.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Exception
Specifies the exception that will be thrown. You can create a custom exception object or use predefined exceptions from the .NET Framework, such as System.Exception. Variables containing the exception object or type.
The "Exception - Throw" activity is instrumental in controlled exception handling scenarios. By explicitly throwing exceptions, you can communicate specific error conditions to higher-level catch blocks or to the overall error-handling mechanism in your automation workflow.
Here's an example of how you might use the "Exception - Throw" activity:
Try
    // Some workflow activities
    If (condition) Then
        Throw New BusinessRuleException("A business rule was violated.")
    End If
    // Continue with other activities
Catch BusinessRuleException
    // Handle the specific business rule exception
Catch System.Exception
    // Handle other types of exceptions
    LogMessage("An unexpected error occurred.")
    Throw // Rethrow the exception for higher-level handling
End Try
In this example, the "Throw" activity is used to throw a custom BusinessRuleException when a specific condition is met. This exception is then caught and handled within the same workflow or propagated to higher-level catch blocks for further handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Exception/Rethrow/index.html

Rethrow
System.Activities.Statements.Rethrow
The "Exception - Rethrow" activity in AutomatR is used to rethrow an exception within a workflow. When an exception occurs, the "Rethrow" activity allows you to propagate the exception to the calling workflow or higher-level catch blocks. This can be useful when you want to handle exceptions at a higher level in the workflow hierarchy or provide additional context before rethrowing.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
The "Exception - Rethrow" activity doesn't have additional properties beyond the display name. It serves a specific purpose in exception handling workflows, allowing for the controlled rethrowing of an exception to handle it at a higher level or to provide additional context.
By strategically placing the "Rethrow" activity within your workflow, you can manage how exceptions are handled at different levels, providing flexibility in designing robust and error-tolerant automation processes.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/Exception/Try Catch/index.html

Try Catch
System.Activities.Statements.TryCatch
The "Exception - Try Catch" activity in AutomatR is a fundamental component of exception handling, allowing users to create structured blocks for handling exceptions in a controlled manner. This activity helps manage errors gracefully, providing a way to execute specific actions when exceptions occur within a designated "Try" block.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
The "Try Catch" activity doesn't have additional properties beyond the display name. However, it is crucial in establishing a structured framework for handling exceptions in AutomatR workflows.
How it works:

The "Exception - Try Catch" activity consists of two main components:
Try Block:
 This is the area where you place the activities that might raise exceptions. If an exception occurs within the "Try" block, the workflow transitions to the associated "Catch" block(s).
Catch Block(s):
 These are one or more blocks where you define the actions to be taken when specific exceptions occur. Each "Catch" block is associated with a specific type of exception. If an exception of the specified type occurs in the "Try" block, the workflow transitions to the corresponding "Catch" block for handling.
Here's a basic example of how the "Exception - Try Catch" activity is structured:
Try
    // Activities that might raise exceptions
    ReadFileContent("file.txt")
Catch System.IO.FileNotFoundException
    // Handle the file not found exception
    LogMessage("The specified file was not found.")
Catch System.IO.IOException
    // Handle other IO-related exceptions
    LogMessage("An IO error occurred.")
Catch System.Exception
    // Handle any other unexpected exceptions
    LogMessage("An unexpected error occurred.")
End Try
In this example, the "Try" block contains activities that might read the content of a file, and specific "Catch" blocks handle different types of exceptions that might occur during file reading. The last "Catch" block, with 
System.Exception
, serves as a catch-all for unexpected exceptions.
By utilizing the "Exception - Try Catch" activity, users can create resilient and robust workflows that gracefully handle errors, providing a mechanism to recover, log, or notify users about unexpected conditions.

URL: https://docs.automatr.tech/docs/Products/Activities/Logic/While/index.html

While
System.Activities.Statements.While
The "While" activity in AutomatR is a control flow activity that allows you to repeatedly execute a sequence of activities while a specified condition is true. It is similar to the "Do While" activity, providing a looping structure within workflows where the activities inside the loop are executed as long as the specified condition remains true.
Properties
​
Name
Description
Misc
Condition
Specifies the condition that is evaluated before each iteration of the loop. As long as the condition evaluates to true, the activities inside the "While" loop will be executed. The loop continues until the condition becomes false. 
Boolean
 variables or expressions that result in a boolean value. The condition determines whether the loop continues or exits.
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
How to use:
Drag and drop the "While" activity onto the workflow.
In the "Condition" property, define the condition that needs to be true for the loop to continue executing.
Place the activities that you want to repeat inside the "While" activity.
Example:

Consider an example where the "While" activity is used to simulate a countdown:
While:
  Display Name: "Countdown Loop"
  Condition: count > 0
  // The loop continues as long as the count is greater than 0
  Sequence:
    Log Message: "Countdown: " + count
    Assign: count = count - 1
    // Decrement the count for the next iteration
In this example, the "While" loop continues to execute as long as the condition (count > 0) is true. The sequence of activities inside the loop logs the current countdown value, decrements the count, and repeats until the count reaches 0.
The "While" activity is valuable for scenarios where you need to repeat a set of actions based on a condition, providing a flexible and efficient way to implement looping logic in your AutomatR workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/SFTP Session/index.html

SFTP Session
AutomatR.SFTP.SFTPSession
The "SFTP Session" activity in AutomatR is part of the SFTP activities package, facilitating the establishment of a connection to an SFTP server for performing various SFTP activities. This activity serves as the initial step for interacting with an SFTP server in an automation workflow.
Properties
​
Name
Description
Input
Host
Specifies the address of the SFTP server to which you wish to connect. String variables containing the server address.
Password
Specifies the password to use when connecting to the SFTP server. String variables containing the password.
Port
Specifies the port number of the SFTP server to which you want to connect. Integer variables containing the port number.
User Name
Specifies the username to use when connecting to the SFTP server. String variables containing the username.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues.
Output
Result
Provides a connected 
SftpClient
 object that can be used for additional SFTP activities. Variables of type 
SftpClient
 to store the connected client object.
How to use:
​
Drag and drop the "SFTP Session" activity onto the workflow.
Configure the properties by specifying the SFTP server details, including host, port, username, and password.
Optionally, configure the delay and customize the display name.
Execute the workflow to establish a connection to the SFTP server.
The connected 
SftpClient
 object is available as an output, which can be used in subsequent SFTP activities.
Example:
​
Consider an example where the "SFTP Session" activity is used to establish a connection to an SFTP server:
SFTP Session:
  Display Name: "Connect to SFTP Server"
  Host: "sftp.example.com"
  Port: 22
  User Name: "username"
  Password: "password"
  Result: sftpClientObject
In this example, the activity establishes a connection to the SFTP server with the specified details. The connected 
SftpClient
 object (
sftpClientObject
) can be used in subsequent SFTP activities within the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/Directory Exists/index.html

Directory Exists
AutomatR.SFTP.DirectoryExists
The "Directory Exists" activity in AutomatR is part of the SFTP activities package, allowing users to check whether a specific directory exists on an SFTP server. This activity helps in verifying the presence of a directory, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Client
Specifies the SFTP client object to connect to the SFTP server.
Server Path
Specifies the path of the directory on the SFTP server to check for existence.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
Output
Result
Outputs a boolean value indicating whether the specified directory exists on the SFTP server. Variables of type boolean to store the existence result.
How to use:
​
Drag and drop the "Directory Exists" activity onto the workflow.
Configure the properties by specifying the SFTP client, server path, and optionally set a delay.
Execute the workflow to check the existence of the specified directory on the SFTP server.
The result (true or false) will be stored in the boolean variable specified in the Result property.
Example:
​
Consider an example where the "Directory Exists" activity is used to check whether the "/Documents/" directory exists on the SFTP server:
Directory Exists:
  Display Name: "Check Directory Existence"
  Client: sftpClientObject
  Server Path: "/Documents/"
  Result: doesDirectoryExist
In this example, the activity checks the existence of the "/Documents/" directory on the SFTP server using the provided SFTP client object. The result of the existence check is stored in the boolean variable "doesDirectoryExist" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/Delete File/index.html

Delete File
AutomatR.SFTP.DeleteFile
The "Delete File" activity in AutomatR is part of the SFTP activities package, allowing users to delete files from an SFTP server. This activity streamlines file management tasks on an SFTP server, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Client
Specifies the SFTP client object to connect to the SFTP server.
Server Path
Specifies the path on the SFTP server where the file exists.
Server Files
Specifies a list of file names to be deleted from the SFTP server.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
How to use:
​
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the SFTP client, server path, and the list of file names to be deleted.
Optionally, configure the delay if needed.
Execute the workflow to delete the specified files from the SFTP server.
Example:
​
Consider an example where the "Delete File" activity is used to delete files named "file1.txt" and "file2.txt" from the "/Documents/" directory on the SFTP server:
Delete File:
  Display Name: "Delete Files from SFTP"
  Client: sftpClientObject
  Server Path: "/Documents/"
  Server Files: ["file1.txt", "file2.txt"]
In this example, the activity deletes the specified files from the "/Documents/" directory on the SFTP server using the provided SFTP client object.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/File Exist/index.html

File Exist
AutomatR.SFTP.FileExist
The "File Exist" activity in AutomatR is part of the SFTP activities package, providing the capability to check whether a specific file exists in the specified SFTP directory. This activity is useful for validating the presence of a file before performing subsequent actions in the automation workflow.
Properties
​
Name
Description
Input
Client
Specifies the SFTP client object to connect to the SFTP server.
Server File Path
Specifies the SFTP directory path to check whether the specified file exists.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
Output
Result
Outputs a boolean variable indicating whether the specified file was located (true) or not (false).
How to use:
​
Drag and drop the "File Exist" activity onto the workflow.
Configure the properties by specifying the SFTP client, server file path, and optionally set a delay.
Execute the workflow to check whether the specified file exists in the SFTP directory.
Utilize the boolean output variable "Result" for conditional branching or further actions based on the file's existence.
Example:
​
Consider an example where the "File Exist" activity is used to check whether a file named "document.txt" exists in the "/Documents/" directory on the SFTP server:
File Exist:
  Display Name: "Check Document Existence"
  Client: sftpClientObject
  Server File Path: "/Documents/document.txt"
  Result: isFileExists
In this example, the activity checks whether the file "document.txt" exists in the "/Documents/" directory on the SFTP server. The boolean result is stored in the variable "isFileExists" for further workflow decision-making.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/Upload Files/index.html

Upload Files
AutomatR.SFTP.UploadFiles
The "Upload Files" activity in AutomatR is part of the SFTP activities package, facilitating the uploading of files to an SFTP server. This activity simplifies the process of transferring files to an SFTP server, providing automation capabilities for efficient file management.
Properties
​
Name
Description
Input
Client
Provides the connection for the SFTP session. It requires an 
SftpClient
 object.
Overwrite
If checked, the files will be overwritten on the server if they already exist. Boolean variables containing the overwrite preference.
Server Path
Specifies the server folder path on the SFTP server where the files will be uploaded. String variables containing the server path.
Source Files
Specifies a list of files to be uploaded to the SFTP server. List variables containing the file paths.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues.
How to use:
​
Drag and drop the "Upload Files" activity onto the workflow.
Configure the properties by specifying the SFTP client, source files, server path, and overwrite preference.
Optionally, configure the delay and customize the display name.
Execute the workflow to upload the specified files to the SFTP server.
Example:
​
Consider an example where the "Upload Files" activity is used to upload multiple files to an SFTP server:
Upload Files:
  Display Name: "Upload Documents"
  Client: sftpClientObject
  Source Files:
    - "C:\Documents\File1.txt"
    - "C:\Documents\File2.txt"
  Server Path: "/Documents/"
  Overwrite: true
In this example, the activity uploads "File1.txt" and "File2.txt" from the local machine to the "/Documents/" folder on the SFTP server. The 
sftpClientObject
 represents the connected SFTP client, and the overwrite option is set to 
true
 to replace existing files.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/Download Files/index.html

Download Files
AutomatR.SFTP.DownloadFiles
The "Download Files" activity in AutomatR is part of the SFTP activities package, allowing users to download specified files from an SFTP server to a local destination folder. This activity facilitates efficient file transfer from the SFTP server to the local environment.
Properties
​
Name
Description
Input
Client
Specifies the SFTP client object to connect to the SFTP server.
Server Path
Specifies the path of the files to be downloaded from the SFTP server.
Destination Path
Specifies the local location where the files will be downloaded.
Overwrite
If checked, the files will be overwritten locally if they already exist.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
How to use:
​
Drag and drop the "Download Files" activity onto the workflow.
Configure the properties by specifying the SFTP client, server path, local destination path, and optionally set a delay and overwrite preference.
Execute the workflow to download the specified files from the SFTP server to the local destination folder.
Optionally, handle any errors or utilize the downloaded files in subsequent activities.
Example:
​
Consider an example where the "Download Files" activity is used to download files from the "/Documents/" directory on the SFTP server to the local folder "C:/DownloadedFiles/":
Download Files:
  Display Name: "Download SFTP Documents"
  Client: sftpClientObject
  Server Path: "/Documents/"
  Destination Path: "C:/DownloadedFiles/"
  Overwrite: true
In this example, the activity downloads files from the "/Documents/" directory on the SFTP server to the "C:/DownloadedFiles/" local folder. The overwrite option is set to true, allowing the activity to replace existing files if they already exist.

URL: https://docs.automatr.tech/docs/Products/Activities/SFTP/Move Item/index.html

Move Item
AutomatR.SFTP.MoveItem
The "Move Item" activity in AutomatR is part of the SFTP activities package, facilitating the transfer of items (files or directories) from one remote path to another on an SFTP server. This activity streamlines the process of managing and organizing files within the SFTP server.
Properties
​
Name
Description
Input
Client
Specifies the SFTP client object to connect to the SFTP server.
Server Source Path
Specifies the SFTP server's remote source path where the item (file or directory) is currently located.
Server Destination Path
Specifies the remote SFTP server destination path to which the item will be moved.
Overwrite
If checked, files in the server destination path will be overwritten if they already exist.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
How to use:
​
Drag and drop the "Move Item" activity onto the workflow.
Configure the properties by specifying the SFTP client, server source path, server destination path, and optionally set a delay or choose to overwrite existing files.
Execute the workflow to transfer the item (file or directory) from the source path to the destination path on the SFTP server.
Example:
​
Consider an example where the "Move Item" activity is used to move a file named "document.txt" from the "/Source/" directory to the "/Destination/" directory on the SFTP server:
Move Item:
  Display Name: "Move Document"
  Client: sftpClientObject
  Server Source Path: "/Source/document.txt"
  Server Destination Path: "/Destination/"
  Overwrite: true
In this example, the activity transfers the "document.txt" file from the "/Source/" directory to the "/Destination/" directory on the SFTP server. If the file already exists in the destination path, it will be overwritten based on the specified configuration.

URL: https://docs.automatr.tech/docs/Products/Activities/PDF/Get PDF Page Count/index.html

Get PDF Page Count
AutomatR.DefaultActivities.PDF.GetPDFPageCount
The "Get PDF Page Count" activity in AutomatR is designed to retrieve the number of pages in a PDF document. This activity is valuable for scenarios where users need to determine the length of a PDF file as part of their automation workflows.
Properties
​
Name
Description
Input
File Path
Specifies the path of the PDF from which to retrieve the page count. String variables containing the file path.
Password
Specifies the password of the PDF file if applicable. Object variables containing the password.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get PDF Page Count" activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the page count of the PDF file. Integer variables to store the result.
How to use:
Drag and drop the "Get PDF Page Count" activity onto the workflow.
Configure the properties by specifying the input file path and, if applicable, the password for the PDF file.
Optionally, configure the delay.
Execute the workflow to obtain the page count of the specified PDF document.
Example:

Consider an example where the "Get PDF Page Count" activity is used to retrieve the page count of a PDF file:
Get PDF Page Count:
  File Path: "C:\Documents\Sample.pdf"
  Password: "mypassword"
  Result: pageCount
In this example, the activity retrieves the page count of the PDF file located at "C:\Documents\Sample.pdf" using the provided password, if applicable. The result, representing the number of pages, is stored in the integer variable "pageCount" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/PDF/Read PDF Text/index.html

Read PDF Text
AutomatR.DefaultActivities.PDF.ReadPDFText
The "Read PDF Text" activity in AutomatR is designed to extract text content from a specified PDF file. This activity utilizes the iText library to parse PDF files and retrieve text information, enhancing automation workflows that involve processing PDF documents.
Properties
​
Name
Description
Input
File Path
Specifies the path of the PDF file from which text content should be extracted. String variables containing the full path to the PDF file.
Pages
Specifies the pages from which to extract text. You can specify individual page numbers separated by commas or use "all" to extract text from all pages. String variables containing page information. Example: "1,3,5" or "all".
Password
Specifies the password for the PDF file if applicable. This is required if the PDF is password-protected. Object variables containing the password.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read PDF Text" activity. This delay can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Outputs the text content read from the specified pages of the PDF file. String variables containing the extracted text.
How to use:
​
Drag and drop the "Read PDF Text" activity onto the workflow.
Configure the properties by specifying the file path, password (if applicable), pages, and optional delay.
Customize the display name for clarity in the workflow.
Execute the workflow to read text content from the specified PDF file.
Example:
​
Consider an example where the "Read PDF Text" activity is used to extract text from pages 1, 3, and 5 of a PDF file named "document.pdf":
Read PDF Text:
  Display Name: "Extract PDF Text"
  File Path: "C:\Documents\document.pdf"
  Password: "mypassword"
  Pages: "1,3,5"
  Result: pdfTextContent
In this example, the activity reads text content from pages 1, 3, and 5 of the specified PDF file, and the extracted text is stored in the variable "pdfTextContent" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/PDF/Extract PDF Page Range/index.html

Extract PDF Page Range
AutomatR.DefaultActivities.PDF.ExtractPDFPageRange
The "Extract PDF Page Range" activity in AutomatR is designed to extract a specified range of pages from a PDF document. This activity enhances automation processes by allowing users to manipulate PDF files, extracting specific pages based on the defined range. It is particularly useful for scenarios where only a subset of pages is required from a larger PDF document.
Properties
​
Name
Description
Input
Input File Name
Specifies the path of the PDF from which to extract a specific range of pages. String variables containing the file path.
Output File Name
Specifies the name along with the path for the file generated from the extracted range of pages. String variables containing the output file path.
Overwrite
When selected, overwrites the file with the extracted content if the output file already exists. Boolean variables to control overwrite behavior.
Password
Specifies the password of the PDF file if applicable. Object variables containing the password.
Range
Specifies the range of pages to extract. It can be a single page ("7"), a range of pages ("7-12"), or a complex range ("2-5, 7, 15-End" or "All"). String variables containing the page range.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Extract PDF Page Range" activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Extract PDF Page Range" activity onto the workflow.
Configure the properties by specifying the input file name, output file name, password (if applicable), page range, and other optional settings.
Optionally, configure the delay.
Execute the workflow to extract the specified range of pages from the PDF document.
Example:

Consider an example where the "Extract PDF Page Range" activity is used to extract pages 5 to 10 from a PDF file:
Extract PDF Page Range:
  Input File Name: "C:\Documents\Sample.pdf"
  Output File Name: "C:\Documents\ExtractedPages.pdf"
  Overwrite: true
  Password: "mypassword"
  Range: "5-10"
In this example, the activity extracts pages 5 to 10 from the input PDF file, saves the result as "ExtractedPages.pdf," and overwrites the file if it already exists.

URL: https://docs.automatr.tech/docs/Products/Activities/PDF/Join PDF Files/index.html

Join PDF Files
AutomatR.DefaultActivities.PDF.JoinPDFFiles
The "Join PDF Files" activity in AutomatR facilitates the merging of multiple PDF files into a single PDF document. This activity proves useful when consolidating information from various PDF sources into one unified file, streamlining document management in automation workflows.
Properties
​
Name
Description
Input
File List
An array of strings containing the full path of all the PDF files to join into one. String array variables specifying the PDF file paths.
Output File Name
The name along with the path for the resulting PDF file after joining the input files. String variables containing the output PDF file name.
Overwrite
When selected, overwrites the file that is merged if it already exists. Boolean variables to determine whether to overwrite existing files.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Join PDF Files" activity. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Join PDF Files" activity onto the workflow.
Configure the properties by providing an array of PDF file paths to be joined, specifying the output file name, and indicating whether to overwrite existing files.
Optionally, configure the delay.
Execute the workflow to merge the specified PDF files into a single PDF document.
Example:

Consider an example where the "Join PDF Files" activity is used to merge three PDF files into a single document:
Join PDF Files:
  File List: ["C:\Documents\File1.pdf", "C:\Documents\File2.pdf", "C:\Documents\File3.pdf"]
  Output File Name: "C:\MergedDocuments\MergedFile.pdf"
  Overwrite: True
In this example, the activity merges three PDF files ("File1.pdf," "File2.pdf," and "File3.pdf") into a single PDF document named "MergedFile.pdf" at the specified output path. The "Overwrite" property is set to true, allowing the activity to overwrite the output file if it already exists.

URL: https://docs.automatr.tech/docs/Products/Activities/PDF/Read PDF Table/index.html

Read PDF Table
AutomatR.DefaultActivities.PDF.ReadPDFTable
The "Read PDF Table" activity in AutomatR is part of the PDF activities package, allowing you to extract tables from PDF documents. This activity simplifies the process of reading and processing tabular data from PDF files in automation workflows.
Properties
​
Name
Description
Input
Each Page Has Headers
When selected, each page containing the table has headers. Boolean variables to indicate whether each page has headers.
File Path
The path of the PDF from which you want to extract the table. String variables containing the file path.
Has Headers
When selected, the first row of the table is treated as a header and will not be copied. When not selected, the first row is copied. This option is selected by default. Boolean variables to determine whether the table has headers.
Header Filter
Header of the table you want to read. Use commas to separate multiple headers. String variables containing the header(s).
Header Orientation
Select the direction of headers in the table. Choose 'Horizontal' if columns are present in a row, and 'Vertical' if present in a column.
Index
Specify the index of the table you want to read. Integer variables containing the table index.
Table in Multiple Pages
When selected, the table is spread across multiple pages in the PDF. Boolean variables to indicate whether the table spans multiple pages.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the wait time (in seconds) before starting the activity. This is useful for handling synchronization issues. Integer variables containing the delay duration (e.g., 5 for 5 seconds).
Output
Result
Returns the DataTable with specified Header Filter/Orientation, Index, Has Headers criteria in the given File Path. DataTable variables to store the extracted table.
How to use:
​
Drag and drop the "Read PDF Table" activity onto the workflow.
Configure the properties by specifying the file path, table index, header filter, and other relevant details.
Optionally, customize the delay duration.
Execute the workflow to extract the specified table from the PDF.
Example:
​
Consider an example where the "Read PDF Table" activity is used to extract a table from a PDF file:
Read PDF Table:
  Delay: 2
  File Path: "C:\Documents\Sample.pdf"
  Index: 1
  Header Filter: "Name, Age, Address"
  Has Headers: true
  Header Orientation: Horizontal
  Table in Multiple Pages: false
  Each Page Has Headers: false
  Result: extractedTable
In this example, the activity reads the table with the specified headers ("Name, Age, Address") from the PDF file located at "C:\Documents\Sample.pdf". The extracted table is stored in the DataTable variable "extractedTable" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Contact/Update Contact/index.html

Update Contact
AutomatR.TFMailchimp.Activities.UpdateContact
The "Update Contact" activity in AutomatR is part of the Mailchimp activities package, allowing users to update a contact within their Mailchimp account. This activity provides the capability to modify contact details such as email address, first name, last name, and phone number.
Properties
​
Name
Description
Input
Audience Name
Specifies the audience name under which the contact needs an update.
Email
Specifies the updated email address for the contact.
First Name
Specifies the updated first name for the contact.
Last Name
Specifies the updated last name for the contact.
Phone Number
Specifies the updated phone number for the contact.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
How to use:
​
Drag and drop the "Update Contact" activity onto the workflow.
Configure the properties by specifying the audience name, email address, and other details you want to update for the contact.
Optionally, configure the delay if needed.
Execute the workflow to update the specified contact within Mailchimp.
Example:
​
Consider an example where the "Update Contact" activity is used to modify the contact information. The audience name is set to "NewsletterSubscribers," the email address is updated to "
new.email@example.com
," the first name is set to "John," the last name is set to "Doe," and the phone number is updated to "1234567890":
Update Contact:
  Audience Name: "NewsletterSubscribers"
  Email: "new.email@example.com"
  First Name: "John"
  Last Name: "Doe"
  Phone Number: "1234567890"
In this example, the activity updates the specified contact within the specified audience in Mailchimp with the new details.
This documentation provides comprehensive information about the "Update Contact" activity, including its properties, usage instructions, and an example scenario.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Contact/Get Contacts/index.html

Get Contacts
AutomatR.TFMailchimp.Activities.GetContacts
The "Get Contacts" activity in AutomatR is part of the Mailchimp Contact activities package, allowing users to retrieve a list of contacts associated with a specified audience in their Mailchimp account.
Properties
​
Name
Description
Input
Audience Name
Specifies the name of the audience for which contacts need to be listed. String variables containing the audience name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Contacts" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Get Contact Response
Outputs a list of email addresses for all contacts in the specified audience of the Mailchimp account. Variables of type 
List<string>
 to store the list of email addresses.
How to use:
Drag and drop the "Get Contacts" activity onto the workflow.
Configure the properties by specifying the audience name for which contacts need to be listed.
Optionally, configure the delay.
Execute the workflow to retrieve the list of contacts associated with the specified audience in the Mailchimp account.
The list of email addresses is stored in the variable specified for "Get Contact Response."
Example:

Consider an example where the "Get Contacts" activity is used to retrieve the list of contacts for an audience named "NewsletterSubscribers":
Get Contacts:
  Delay: 2
  Audience Name: "NewsletterSubscribers"
  Get Contact Response: contactList
In this example, the activity retrieves the list of email addresses for all contacts in the "NewsletterSubscribers" audience. The list of email addresses is stored in the variable "contactList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Contact/Delete Contact/index.html

Delete Contact
AutomatR.TFMailchimp.Activities.DeleteContact
The "Delete Contact" activity in AutomatR is part of the Mailchimp Contact activities package, allowing users to delete a contact from their Mailchimp audience.
Properties
​
Name
Description
Input
Audience Name
Specifies the name or ID of the audience from which the contact should be deleted. String variables containing the audience name or ID.
Contact Email
Specifies the email address of the contact to be deleted. String variables containing the contact's email address.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Contact" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Delete Contact" operation, indicating whether the contact deletion was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Contact" activity onto the workflow.
Configure the properties by specifying the audience name or ID and the contact's email address to be deleted.
Optionally, configure the delay property.
Execute the workflow to delete the specified contact from the Mailchimp audience.
Example:

Consider an example where the "Delete Contact" activity is used to delete a contact with the email address "
john.doe@example.com
" from the audience named "Subscribers":
Delete Contact:
  Audience Name: "Subscribers"
  Contact Email: "john.doe@example.com"
  Delay: 2
In this example, the activity deletes the contact with the specified email address from the "Subscribers" audience in the Mailchimp account. The result of the operation (success or failure) is stored in the Boolean variable "Result" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Contact/Create Contact/index.html

Create Contact
AutomatR.TFMailchimp.Activities.CreateContact
The "Create Contact" activity in AutomatR is part of the Mailchimp Contact activities package, allowing users to add a new contact to a specified audience list within their Mailchimp account.
Properties
​
Name
Description
Input
Audience Name
Specifies the name or ID of the audience list to which the contact will be added. String variables containing the audience name or ID.
Email
Specifies the email address for the new contact. String variables containing the email address.
First Name
Specifies the first name for the new contact. String variables containing the first name.
Last Name
Specifies the last name for the new contact. String variables containing the last name.
Phone Number
Specifies the phone number for the new contact. String variables containing the phone number.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Contact" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Create Contact Response
Outputs the email address of the newly created contact. String variables containing the email address for the new contact.
How to use:
Drag and drop the "Create Contact" activity onto the workflow.
Configure the properties by specifying the audience name, email, first name, last name, and phone number for the new contact.
Optionally, configure the delay property.
Execute the workflow to add the specified contact to the Mailchimp audience list.
Example:

Consider an example where the "Create Contact" activity is used to add a new contact with the email "
john.doe@example.com
" to the audience list named "Subscribers":
Create Contact:
  Audience Name: "Subscribers"
  Email: "john.doe@example.com"
  First Name: "John"
  Last Name: "Doe"
  Phone Number: "+1234567890"
  Delay: 2
  Create Contact Response: NewContactEmail
In this example, the activity adds a new contact with the specified properties to the "Subscribers" audience list. The email address of the newly created contact is stored in the string variable "NewContactEmail" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Scope/Mail Chimp Scope/index.html

MailChimp Scope
AutomatR.TFMailchimp.Helper.MailChimpScope
The "MailChimp Scope" activity in AutomatR is designed to manage a connection to Mailchimp and provides a scope for all subsequent Mailchimp-related activities. This activity initializes the Mailchimp connection and ensures a valid scope for activities within its body.
Properties
​
Name
Description
Input
API Key
Specifies the Mailchimp API Key for the user's account. String variables containing the API Key.
URL
Specifies the URL for the Mailchimp account. String variables containing the Mailchimp account URL.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "MailChimp Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "MailChimp Scope" activity onto the workflow.
Configure the properties by specifying the API Key and URL for the Mailchimp account.
Optionally, configure the delay.
Place other Mailchimp-related activities within the body of the "MailChimp Scope" activity.
Execute the workflow to perform Mailchimp-related actions within the established scope.
Example:

Consider an example where the "MailChimp Scope" activity is used to set up a scope for Mailchimp-related activities:
MailChimp Scope:
  Delay: 2
  API Key: "your_mailchimp_api_key"
  URL: "your_mailchimp_account_url"
  // Other Mailchimp-related activities placed here...
In this example, the "MailChimp Scope" activity sets up a connection scope for Mailchimp-related activities, such as getting contacts or sending emails. The API Key and URL are specified in the properties, and additional Mailchimp activities are placed within the scope for execution.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Run Campaign/index.html

Run Campaign
AutomatR.TFMailchimp.Activities.RunCampaign
The "Run Campaign" activity in AutomatR is part of the Mailchimp activities package, allowing automation processes to trigger the execution of a specified campaign in a Mailchimp account. This activity facilitates the automation of email campaign management within the Mailchimp platform.
Properties
​
Name
Description
Input
Campaign Name
Specifies the name of the campaign to be run in the Mailchimp account. String variables containing the campaign name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Run Campaign" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Run Campaign" activity onto the workflow.
Configure the properties by specifying the campaign name to be executed in the Mailchimp account.
Optionally, configure the delay and customize the display name.
Execute the workflow to trigger the specified Mailchimp campaign.
Example:

Consider an example where the "Run Campaign" activity is used to execute a Mailchimp campaign named "Newsletter_Campaign":
Run Campaign:
  Display Name: "Run Newsletter Campaign"
  Campaign Name: "Newsletter_Campaign"
  Delay: 2
In this example, the activity triggers the execution of the Mailchimp campaign named "Newsletter_Campaign" with a delay of 2 seconds. The specified campaign is executed in the Mailchimp account as part of the automation workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Bounced Emails/index.html

Bounced Emails
AutomatR.TFMailchimp.Activities.BouncedEmails
The "Bounced Emails" activity in AutomatR is part of the Mailchimp Campaign activities package, providing a list of email addresses that have bounced during the execution of a specific campaign.
Properties
​
Name
Description
Input
Campaign Name
Specifies the name of the campaign for which to fetch bounced emails. String variables containing the campaign name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Bounced Emails" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Get Contact Response
Outputs the list of email addresses that have bounced during the specified campaign. Variables of type 
List<string>
 to store the bounced email addresses.
How to use:
Drag and drop the "Bounced Emails" activity onto the workflow.
Specify the campaign name for which you want to retrieve bounced emails.
Optionally, configure the delay property.
Execute the workflow to fetch the list of email addresses that bounced during the specified campaign.
Example:

Consider an example where the "Bounced Emails" activity is used to get a list of email addresses that bounced during a campaign named "SummerPromoCampaign":
Bounced Emails:
  Campaign Name: "SummerPromoCampaign"
  Delay: 2
  Get Contact Response: BouncedEmailList
In this example, the activity fetches the list of email addresses that bounced during the "SummerPromoCampaign" and stores the result in the 
List<string>
 variable "BouncedEmailList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Get Campaigns/index.html

Get Campaigns
AutomatR.TFMailchimp.Activities.GetCampaigns
The "Get Campaigns" activity in AutomatR is part of the Mailchimp Campaign activities package, allowing users to retrieve a list of campaigns associated with their Mailchimp account.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Campaigns" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Campaign Response
Outputs a list of campaign details, including names and statuses, associated with the Mailchimp account. Variables of type 
List<MailChimp.Net.Models.Campaign>
 to store the list of campaigns.
How to use:
Drag and drop the "Get Campaigns" activity onto the workflow.
Optionally, configure the delay property.
Execute the workflow to retrieve the list of campaigns associated with the Mailchimp account.
The result, a list of campaign details, will be stored in the variable specified for "Campaign Response."
Example:

Consider an example where the "Get Campaigns" activity is used to retrieve the list of campaigns associated with the Mailchimp account:
Get Campaigns:
  Delay: 2
  Campaign Response: campaignList
In this example, the activity retrieves the list of campaign details associated with the Mailchimp account. The list of campaign details is stored in the variable "campaignList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Create Campaign/index.html

Create Campaign
AutomatR.TFMailchimp.Activities.CreateCampaign
The "Create Campaign" activity in AutomatR is part of the Mailchimp Campaign activities package, allowing users to create and configure a new campaign within their Mailchimp account.
Properties
​
Name
Description
Input
Audience Name
Specifies the targeted audience name for the campaign. String variables containing the audience name.
Template Name
Specifies the name of the template to be used for the campaign. String variables containing the template name.
Campaign Name
Specifies the name of the campaign. String variables containing the campaign name.
Subject
Specifies the subject line of the campaign. String variables containing the subject.
From Name
Specifies the "From" name to be displayed on the campaign. String variables containing the "From" name.
Reply To
Specifies the reply-to email address for the campaign, required for sending. String variables containing the reply-to email address.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Campaign" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Campaign Response
Outputs the response from the campaign creation process. String variables containing the response with an encrypted response code.
How to use:
Drag and drop the "Create Campaign" activity onto the workflow.
Configure the properties by specifying the audience name, template name, campaign name, subject, from name, and reply-to email address.
Optionally, configure the delay property.
Execute the workflow to create a new campaign in Mailchimp.
Example:

Consider an example where the "Create Campaign" activity is used to create a new campaign named "NewsletterCampaign" targeting the audience "Subscribers," using the template "StandardTemplate":
Create Campaign:
  Audience Name: "Subscribers"
  Template Name: "StandardTemplate"
  Campaign Name: "NewsletterCampaign"
  Subject: "Latest Updates and Offers"
  From Name: "ABC Company"
  Reply To: "info@abccompany.com"
  Delay: 2
  Campaign Response: CampaignCreationResponse
In this example, the activity creates a new campaign with the specified properties. The response with an encrypted response code is stored in the string variable "CampaignCreationResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Delete Campaign/index.html

Delete Campaign
AutomatR.TFMailchimp.Activities.DeleteCampaign
The "Delete Campaign" activity in AutomatR is part of the Mailchimp Campaign activities package, allowing users to delete a specified campaign from their Mailchimp account.
Properties
​
Name
Description
Input
Audience Name
Specifies the name of the audience to which the campaign belongs. String variables containing the audience name.
Campaign Name
Specifies the name or ID of the campaign to be deleted. String variables containing the campaign name or ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Campaign" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Campaign" activity onto the workflow.
Configure the properties by specifying the audience name and campaign name or ID to be deleted.
Optionally, configure the delay property.
Execute the workflow to delete the specified campaign from the Mailchimp account.
Example:

Consider an example where the "Delete Campaign" activity is used to delete a campaign named "SummerSale" from the audience named "Subscribers":
Delete Campaign:
  Audience Name: "Subscribers"
  Campaign Name: "SummerSale"
  Delay: 2
In this example, the activity deletes the "SummerSale" campaign from the "Subscribers" audience in the Mailchimp account. No output variable is generated for this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Campaign Report/index.html

Campaign Report
AutomatR.TFMailchimp.Activities.CampaignReport
The "Campaign Report" activity in AutomatR is part of the Mailchimp Campaign activities package, providing detailed reports for a specific sent campaign.
Properties
​
Name
Description
Input
Campaign Name
Specifies the name of the campaign for which to generate a report. String variables containing the campaign name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Campaign Report" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Campaign Report Response
Outputs the detailed report for the specified campaign. Variables of type CampaignResponse to store the campaign report details, including Title, EmailSent, CampaignOpens, and CampaignClicks.
How to use:
Drag and drop the "Campaign Report" activity onto the workflow.
Specify the campaign name for which you want to generate a report.
Optionally, configure the delay property.
Execute the workflow to retrieve the detailed report for the specified campaign.
Example:

Consider an example where the "Campaign Report" activity is used to get a report for a campaign named "HolidayPromoCampaign":
Campaign Report:
  Campaign Name: "HolidayPromoCampaign"
  Delay: 2
  Campaign Report Response: CampaignReportDetails
In this example, the activity generates a detailed report for the "HolidayPromoCampaign" and stores the result in the CampaignResponse variable "CampaignReportDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Campaign/Update Campaign/index.html

Update Campaign
AutomatR.TFMailchimp.Activities.UpdateCampaign
The "Update Campaign" activity in AutomatR is part of the Mailchimp activities package, allowing users to update an existing campaign in Mailchimp. This activity enhances automation workflows by providing the capability to modify various campaign details.
Properties
​
Name
Description
Input
Audience Name
Specifies the updated audience name for the campaign.
Campaign Name
Specifies the existing campaign name or ID to be updated.
From Name
Specifies the updated "from" name on the campaign.
New Campaign Name
Specifies the updated campaign name.
Reply To
Specifies the reply-to email address for the campaign, required for sending.
Subject
Specifies the subject line of the campaign.
Template Name
Specifies the template name to be used for the campaign.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the activity. Useful for handling synchronization issues.
Output
Campaign Response
Outputs the response as a string with an encrypted response code.
How to use:
​
Drag and drop the "Update Campaign" activity onto the workflow.
Configure the properties by specifying the audience name, existing campaign name, and other details you want to update.
Optionally, configure the delay if needed.
Execute the workflow to update the specified campaign in Mailchimp.
Example:
​
Consider an example where the "Update Campaign" activity is used to modify an existing campaign named "SummerSale2022." The audience name is set to "NewsletterSubscribers," and the new campaign name is set to "SummerSale2023." The subject line, from name, reply-to email address, and template name are also updated:
Update Campaign:
  Campaign Name: "SummerSale2022"
  Audience Name: "NewsletterSubscribers"
  New Campaign Name: "SummerSale2023"
  Subject: "Exclusive Summer Deals!"
  From Name: "Company Marketing"
  Reply To: "marketing@example.com"
  Template Name: "SummerTemplate"
  Campaign Response: updatedCampaignId
In this example, the activity updates the specified campaign with the new details, and the response, containing the updated campaign ID, is stored in the "updatedCampaignId" variable for further workflow handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Audience/Update Audience/index.html

Update Audience
AutomatR.TFMailchimp.Activities.UpdateAudience
The "Update Audience" activity in AutomatR is part of the Mailchimp activities package, allowing automation processes to update audience details within a Mailchimp account. This activity streamlines the management of audience information, providing the flexibility to modify various audience attributes.
Properties
​
Name
Description
Input
Old Audience Name
Specifies the name of the audience to be updated. String variables containing the current audience name.
New Audience Name
Specifies the new name for the audience. String variables containing the updated audience name.
Company Name
Specifies the updated company name for the audience. String variables containing the company name.
Permission Reminder
Specifies the updated permission reminder text for the audience. String variables containing the permission reminder text.
Default From Name
Specifies the updated "From" name for the audience. String variables containing the updated "From" name.
Default From Email Address
Specifies the updated email address for the audience. String variables containing the updated email address.
Campaign Subject
Specifies the updated subject line of the campaign for the audience. String variables containing the campaign subject.
Campaign Language
Specifies the language for the campaign. String variables containing the campaign language.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Audience" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Updated Audience Response
Outputs the response as a string with an encrypted response code. String variables to store the response from the audience update operation.
How to use:
Drag and drop the "Update Audience" activity onto the workflow.
Configure the properties by specifying the old audience name and providing values for the audience attributes you want to update.
Optionally, configure the delay.
Execute the workflow to update the specified audience in the Mailchimp account.
Example:

Consider an example where the "Update Audience" activity is used to modify audience details:
Update Audience:
  Old Audience Name: "Newsletter_Subscribers"
  New Audience Name: "Updated_Newsletter_Subscribers"
  Company Name: "ABC Corporation"
  Permission Reminder: "This is an updated permission reminder."
  Default From Name: "John Doe"
  Default From Email Address: "john.doe@example.com"
  Campaign Subject: "Updated Newsletter Subject"
  Campaign Language: "en_US"
  Delay: 2
In this example, the activity updates the audience named "Newsletter_Subscribers" with the provided values for various audience attributes. The update operation includes a delay of 2 seconds for synchronization.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Audience/Get Audience/index.html

Get Audience
AutomatR.TFMailchimp.Activities.GetAudience
The "Get Audience" activity in AutomatR is part of the Mailchimp Audience activities package, allowing users to retrieve a list of audiences associated with their Mailchimp account.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Audience" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Get Audience Response
Outputs a list of audience names associated with the Mailchimp account. Variables of type 
List<string>
 to store the list of audience names.
How to use:
Drag and drop the "Get Audience" activity onto the workflow.
Optionally, configure the delay property.
Execute the workflow to retrieve the list of audiences associated with the Mailchimp account.
The result, a list of audience names, will be stored in the variable specified for "Get Audience Response."
Example:

Consider an example where the "Get Audience" activity is used to retrieve the list of audiences associated with the Mailchimp account:
Get Audience:
  Delay: 2
  Get Audience Response: audienceList
In this example, the activity retrieves the list of audience names associated with the Mailchimp account. The list of audience names is stored in the variable "audienceList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Audience/Delete Audience/index.html

Delete Audience
AutomatR.TFMailchimp.Activities.DeleteAudience
The "Delete Audience" activity in AutomatR is part of the Mailchimp Audience activities package, allowing users to delete a specified audience from their Mailchimp account.
Properties
​
Name
Description
Input
Audience Name
Specifies the name or ID of the audience to be deleted. String variables containing the audience name or ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Audience" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Delete Audience" operation, indicating whether the audience deletion was successful or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Audience" activity onto the workflow.
Configure the properties by specifying the audience name or ID to be deleted.
Optionally, configure the delay property.
Execute the workflow to delete the specified audience from the Mailchimp account.
Example:

Consider an example where the "Delete Audience" activity is used to delete an audience named "Subscribers":
Delete Audience:
  Audience Name: "Subscribers"
  Delay: 2
  Result: isDeleteSuccessful
In this example, the activity deletes the "Subscribers" audience from the Mailchimp account. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Mailchimp/Audience/Create Audience/index.html

Create Audience
AutomatR.TFMailchimp.Activities.CreateAudience
The "Create Audience" activity in AutomatR is part of the Mailchimp Audience activities package, allowing users to create a new audience (mailing list) within their Mailchimp account.
Properties
​
Name
Description
Input
Audience Name
Specifies the name of the audience to be created. String variables containing the audience name.
Company Name
Specifies the company name associated with the audience. String variables containing the company name.
Permission Reminder
Specifies the permission reminder text for the audience. String variables containing the permission reminder text.
Default From Name
Specifies the default "From" name for emails sent to the audience. String variables containing the default "From" name.
Default From Email Address
Specifies the default email address for emails sent to the audience. String variables containing the default email address.
Campaign Subject
Specifies the subject line of campaigns associated with the audience. String variables containing the campaign subject.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Audience" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Audience Response
Outputs the response from the audience creation process. String variables containing the response with an encrypted response code.
How to use:
Drag and drop the "Create Audience" activity onto the workflow.
Configure the properties by specifying the audience name, company name, permission reminder, default "From" name, default email address, and campaign subject.
Optionally, configure the delay property.
Execute the workflow to create a new audience in Mailchimp.
Example:

Consider an example where the "Create Audience" activity is used to create a new audience named "NewsletterAudience":
Create Audience:
  Audience Name: "NewsletterAudience"
  Company Name: "ABC Company"
  Permission Reminder: "You are receiving this email because you subscribed to our newsletter."
  Default From Name: "ABC Company"
  Default From Email Address: "info@abccompany.com"
  Campaign Subject: "Latest Updates and Offers"
  Delay: 2
  Audience Response: AudienceCreationResponse
In this example, the activity creates a new audience named "NewsletterAudience" with the specified properties. The response with an encrypted response code is stored in the string variable "AudienceCreationResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Get Mail By Id/index.html

Get Mail By Id
AutomatR.Office365.Activities.GetMailById
The "Get Mail By Id" activity in AutomatR is part of the Office 365 activities package, allowing automation processes to retrieve detailed information about an email message using its unique identifier (Message-ID). This activity provides the flexibility to obtain specific details, such as the sender, recipients, subject, body, attachments, and more.
Properties
​
Name
Description
Input
Message ID
Specifies the unique identifier (Message-ID) of the email message you want to retrieve details for. Ensure that the provided Message-ID is valid and corresponds to an existing email. String variables containing the Message-ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Entry Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Mail By Id" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Message
Outputs the detailed information of the email message identified by the provided Message-ID. The information includes sender, recipients, subject, body, attachments, etc. Use a 
MailMessage
 variable to store the retrieved email details for further processing in the workflow.
How to use:
Drag and drop the "Get Mail By Id" activity onto the workflow.
Configure the properties by specifying the entry delay duration and the Message-ID of the email you want to retrieve details for.
Execute the workflow to obtain the detailed information of the specified email.
Example:

Consider an example where the "Get Mail By Id" activity is used to retrieve details of an email with a specific Message-ID:
Get Mail By Id:
  Display Name: "Retrieve Invoice Email"
  Entry Delay: 5
  Message ID: "1234567890abcdef"
  Result: retrievedMailDetails
In this example, the activity waits for 5 seconds before retrieving the detailed information of the email with the Message-ID "1234567890abcdef." The retrieved email details are stored in the 
retrievedMailDetails
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Office 365 Scope/index.html

Office 365 Scope
AutomatR.Office365.Activities.Office365Scope
The "Office 365 Scope" activity in AutomatR is a foundational activity designed for Office 365 integration, enabling automation workflows to interact with Microsoft Office services. This activity establishes a scope for executing activities that require access to Office 365 resources, such as fetching tokens for specified mail IDs.
Properties
​
Name
Description
Input
Refresh Token
Specifies the authentication details, including the refresh token and associated mail ID, required to obtain the API token for accessing the Office 365 account. Use the provided editor to browse and select the refresh token and associated mail ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Office 365 Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Nested Activity (Body)
This activity contains a nested sequence of activities that are executed within the Office 365 scope. It provides a structured environment for performing actions within the Office 365 integration.
Note:
 The "Office 365 Scope" activity requires a valid refresh token for authentication. Ensure that the refresh token is provided to establish a valid connection with Office 365.
How to use:
Drag and drop the "Office 365 Scope" activity onto the workflow.
Configure the properties by specifying the delay duration and providing the refresh token for authentication.
Inside the activity, configure the nested sequence of activities to perform actions within the Office 365 scope.
Execute the workflow to establish the Office 365 scope and execute the specified activities.
Example:

Consider an example where the "Office 365 Scope" activity is used to fetch tokens for accessing emails within Office 365:
Office 365 Scope:
  Display Name: "Office 365 Email Access Scope"
  Delay: 5
  Refresh Token: (browse for refresh token)
  (Nested Activities):
    - Get Mail By Id
    - Copy File
    - ... (other Office 365 activities)
In this example, the activity waits for 5 seconds before establishing the Office 365 scope. The refresh token is used to fetch tokens for accessing emails within the specified nested activities.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Delete Mail/index.html

Delete Mail
AutomatR.Office365.Activities.DeleteMail
The "Delete Mail" activity in AutomatR is part of the Office 365 activities package, allowing automation processes to utilize the Microsoft Office message API for deleting email messages. This activity streamlines the deletion of specific email messages within an Office 365 mailbox.
Properties
​
Name
Description
Input
Mail Message
Specifies the mail message variable representing the email message to be deleted. This field only supports a mail message variable. Ensure that the variable contains the necessary information for identification.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Mail" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Mail" activity onto the workflow.
Configure the properties by specifying the delay duration, mail message variable representing the email to be deleted, and customize the display name if needed.
Execute the workflow to delete the specified email message within Office 365.
Example:

Consider an example where the "Delete Mail" activity is used to delete an email message:
Delete Mail:
  Display Name: "Delete Important Email"
  Mail Message: mailMessageVariable
In this example, the activity deletes the email message specified by the "mailMessageVariable." Adjust the properties according to your specific use case and workflow requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Send Mail/index.html

Send Mail
AutomatR.Office365.Activities.SendMail
The "Send Mail" activity in AutomatR is part of the Office 365 activities package, allowing automation processes to send emails using the Microsoft Office message API. This activity simplifies the task of sending emails within Office 365, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
To Address
Specifies the email addresses of the recipients in the "To" field when sending the email. It supports multiple recipients separated by commas. String variables containing the email addresses.
Subject
Specifies the subject line for the email. String variables containing the subject.
Body
Specifies the content of the email body. String variables containing the content.
CC
Specifies the email addresses to mark as CC (Carbon Copy) when sending the email. It supports multiple recipients separated by commas. String variables containing the CC email addresses.
BCC
Specifies the email addresses to mark as BCC (Blind Carbon Copy) when sending the email. It supports multiple recipients separated by commas. String variables containing the BCC email addresses.
Attachments
Specifies the files to be attached to the email. The user can attach one or more files to the email. List variables containing the file paths.
Body Types
Selects the desired format (text or HTML) for the email body. The available options are provided in a dropdown menu. Enumeration variables representing the body type.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Mail" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
How to use:
Drag and drop the "Send Mail" activity onto the workflow.
Configure the properties by specifying the recipients, subject, body, body type, and other optional parameters.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to send the specified email using Office 365.
Example:

Consider an example where the "Send Mail" activity is used to send an email with attachments:
Send Mail:
  To Address: "user@example.com,anotheruser@example.com"
  Subject: "Automation Report"
  Body: "Please find the attached report for your review."
  Body Types: HTML
  CC: "ccuser@example.com"
  BCC: "bccuser@example.com"
  Attachments: ["C:\Reports\Report.pdf", "C:\Images\Image.png"]
In this example, the activity sends an email to "
user@example.com
" and "
anotheruser@example.com
" with the subject "Automation Report." The email body is in HTML format, and "
ccuser@example.com
" and "
bccuser@example.com
" are marked as CC and BCC recipients, respectively. Two attachments, "Report.pdf" and "Image.png," are attached to the email.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Forward Mail/index.html

Forward Mail
AutomatR.Office365.Activities.ForwardMail
The "Forward Mail" activity in AutomatR is part of the Office 365 activities package, allowing automation processes to utilize the Microsoft Office message API to forward an email. This activity streamlines the process of forwarding emails with additional options, such as specifying recipients, body type, comments, and attachments.
Properties
​
Name
Description
Input
Attachments
Specifies the full file path of the file(s) you wish to attach from your local drive. Use a 
List<String>
 variable for inclusion in the email. Ensure that the file paths are correct and valid.
Body Type
Select a content type from the dropdown menu to specify the desired format (text or HTML) for the body of the forwarded email.
Comment
Provide the desired message body that you would like to include while forwarding the email. String variables containing the comment.
Mail Message
Specifies the mail message variable representing the email to be forwarded. This field only supports a mail message variable. Ensure the variable contains the necessary information for identification.
To
Provide the additional email address that you would like to include when forwarding the email. String variables containing the email addresses.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Forward Mail" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Forward Mail" operation, indicating whether the forwarding was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Forward Mail" activity onto the workflow.
Configure the properties by specifying the delay duration, mail message variable representing the email, recipients, body type, comment, and attachments.
Execute the workflow to forward the specified email with additional options.
Example:

Consider an example where the "Forward Mail" activity is used to forward an email with additional options:
Forward Mail:
  Display Name: "Forward Invoice Email"
  Mail Message: emailMessageVariable
  To: "john.doe@example.com"
  Body Type: Text
  Comment: "Please review the attached invoice."
  Attachments: attachmentPathsList
  Result: isForwardSuccessful
In this example, the activity forwards the email specified by the "emailMessageVariable" to the email address "
john.doe@example.com
" with a text body type and a comment. Additionally, attachments from the list specified in the "attachmentPathsList" variable are included. The result of the operation (success or failure) is stored in the Boolean variable "isForwardSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Read Mail/index.html

Read Mail
AutomatR.Office365.Activities.ReadMail
The "Read Mail" activity in AutomatR is part of the Office 365 activities package, enabling automation workflows to fetch and process emails from a specified Office 365 account. This activity utilizes the Microsoft Office message API to retrieve email messages based on specified criteria.
Properties
​
Name
Description
Input
Body
Specifies the body of the email you want to read. String variables containing the body content of the email.
From
Specifies the email ID of the sender for the email you want to read. String variables containing the email ID.
Has Attachments
Specifies whether the email should have attachments. Boolean variables indicating whether the email should have attachments.
Subject
Specifies the subject line of the email you want to read. String variables containing the subject of the email.
Top
Specifies the number of top emails to retrieve. Integer variables containing the number of top emails.
UnRead Only
Specifies whether to retrieve only unread emails. Boolean variables indicating whether to retrieve only unread emails.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Mail" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Messages
Outputs the result as a List of Mail Messages, enabling you to use it for further activities. Variables of type 
List<MailMessage>
 to store the retrieved email messages.
How to use:
Drag and drop the "Read Mail" activity onto the workflow.
Configure the properties by specifying the criteria such as subject, body, sender email, etc., for filtering the emails.
Optionally, configure the delay and customize the display name.
Execute the workflow to fetch the specified emails based on the criteria.
Example:

Consider an example where the "Read Mail" activity is used to retrieve the top 5 unread emails with attachments:
Read Mail:
  Display Name: "Read Unread Emails with Attachments"
  Top: 5
  UnRead Only: True
  Has Attachments: True
  (Other Criteria as needed)
  Messages: retrievedEmails
In this example, the activity fetches the top 5 unread emails with attachments based on the specified criteria. The retrieved emails are stored in the 
retrievedEmails
 variable of type 
List<MailMessage>
 for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Download Attachment/index.html

Download Attachment
AutomatR.Office365.Activities.DownloadAttachment
The "Download Attachment" activity in AutomatR is part of the Office 365 activities package, allowing automation processes to utilize the Microsoft Office message API for downloading email attachments. This activity streamlines the process of saving email attachments to a specified local drive.
Properties
​
Name
Description
Input
Download To
Specifies the full path of the local drive where you want to download the mail attachments. Ensure the path is correct and the drive exists. String variables containing the download path.
Mail Message
Specifies the mail message variable representing the email from which to download attachments. This field only supports a mail message variable. Ensure the variable contains the necessary information for identification.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download Attachment" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Download Attachment" operation, indicating whether the download was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Download Attachment" activity onto the workflow.
Configure the properties by specifying the delay duration, mail message variable representing the email, and the local drive path where attachments will be downloaded.
Execute the workflow to download attachments from the specified email to the local drive.
Example:

Consider an example where the "Download Attachment" activity is used to download attachments from a specific email:
Download Attachment:
  Display Name: "Download Invoice Attachments"
  Mail Message: mailMessageVariable
  Download To: "C:\Attachments\"
  Result: isDownloadSuccessful
In this example, the activity downloads attachments from the email specified by the "mailMessageVariable" to the local drive path "C:\Attachments\". The result of the operation (success or failure) is stored in the Boolean variable "isDownloadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Office365/Reply Mail/index.html

Reply Mail
AutomatR.Office365.Activities.ReplyMail
The "Reply Mail" activity in AutomatR is part of the Office 365 activities package, enabling automation processes to reply to an email using the Microsoft Office message API. This activity streamlines email response tasks in Office 365, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Attachments
The user can attach files to the reply email. Specify a list of file paths to be attached to the email.
BCC
Blind Carbon Copy (BCC) feature when sending an email message. Provide the email addresses that you would like to mark as BCC (invisible to the recipients).
Body Type
Select a content type from the dropdown menu to specify the desired format (text or HTML) for the body of the reply email.
CC
Provide the email addresses that you would like to mark as CC (Carbon Copy) when sending the reply email.
Comment
Provide the desired message body that you would like to include when sending the reply email.
Mail Message
Specify the original mail message to which you want to reply.
Reply Type
Select a reply type from the dropdown menu to specify the appropriate format for the reply email to be sent.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
How to use:
Drag and drop the "Reply Mail" activity onto the workflow.
Configure the properties by specifying the mail message, reply type, body type, and additional options such as CC, BCC, attachments, and comment.
Optionally, configure the delay.
Execute the workflow to send a reply email based on the specified parameters.
Example:

Consider an example where the "Reply Mail" activity is used to reply to an email:
Reply Mail:
  Delay: 0
  CC: "cc@example.com"
  BCC: "bcc@example.com"
  Body Type: Html
  Mail Message: mailMessageVariable
  Comment: "Thank you for your email. Best regards, John"
  Reply Type: Reply
  Attachments: ["C:\\Files\\attachment1.txt", "C:\\Files\\attachment2.pdf"]
In this example, the activity replies to the specified email, including a CC recipient, a BCC recipient, an HTML-formatted body, a comment, and two attachments.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Add Video/index.html

Add Video
AutomatR.GoogleForms.Activities.AddVideo
The "Add Video" activity in AutomatR is part of the Google Forms activities package, allowing automation processes to add a video question to a Google Form. This activity enhances the form creation process by providing the ability to embed a video from YouTube along with additional customization options.
Properties
​
Name
Description
Input
FormID
Enter the Form ID to which the video question should be added. String variables containing the Form ID. This field is required.
Title
Provide the title for the video question. String variables containing the title of the video question. This field is required.
Location
Specify the location or position where the video question should be added in the form. Integer variables containing the location index.
YoutubeURI
Enter the YouTube URI of the video to be embedded in the question. String variables containing the YouTube URI. This field is required.
Video Alignment
Select the alignment type for the video question. Choose from options like "Left," "Right," "Center," etc.
Caption
Enter a caption for the video question. String variables containing the caption for the video question.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Video Width
Specify the width of the video. Integer variables containing the width value.
Output
Result
Returns the response as Form Details. Variables of relevant types (e.g., BatchUpdateFormResponse) to store the response details.
How to use:
​
Drag and drop the "Add Video" activity onto the workflow.
Configure the properties by specifying the Form ID, video question title, YouTube URI, and other optional settings.
Optionally, configure the delay before starting the activity.
Execute the workflow to add a video question to the specified Google Form.
Example:
​
Consider an example where the "Add Video" activity is used to add a video question titled "Introduction Video" with a YouTube URI of "
https://www.youtube.com/watch?v=example"
 to a Google Form with a Form ID of "xyz789":
Add Video:
  FormID: "xyz789"
  Title: "Introduction Video"
  Location: 2
  YoutubeURI: "https://www.youtube.com/watch?v=example"
  Video Alignment: Center
  Caption: "Watch the introduction video for more details."
In this example, the activity adds a video question to the Google Form with the specified Form ID, title, YouTube URI, location, alignment, and caption. This enriches the form with multimedia content and additional context for form respondents.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Google Forms Scope/index.html

Google Forms Scope
AutomatR.GoogleForms.Activities.GoogleFormsScope
The "Google Forms Scope" activity in AutomatR is part of the Google Forms activities package, providing a scope for executing activities related to the Google Forms service. This activity is essential for authenticating and authorizing access to Google Forms APIs before performing specific actions within the scope.
Properties
​
Name
Description
Input
Refresh Token
Provides authentication details required for accessing Google Forms services. It includes the refresh token obtained during the OAuth authorization process. Clicking on this property enables OAuth authentication with options to approve or reject.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Google Forms Scope" activity onto the workflow.
Configure the properties by providing the required authentication details, such as the refresh token obtained during the OAuth authorization process.
Optionally, configure the delay before starting the activity.
Inside the scope, place other Google Forms activities that require access to the Google Forms service.
Execute the workflow to perform actions within the Google Forms service.
Example:
​
Consider an example where the "Google Forms Scope" activity is used to authenticate and authorize access to Google Forms APIs. Other activities within the scope can then perform actions such as creating forms, getting responses, etc.
Google Forms Scope:
  Refresh Token: authDetails
  Delay: 2
  - Other Google Forms activities go here
In this example, the activity uses the provided authentication details (
authDetails
) to authenticate and authorize access to Google Forms APIs. Other Google Forms activities placed inside the scope can perform actions within the Google Forms service.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Date Question/index.html

Date Question
AutomatR.GoogleForms.Activities.DateQuestion
The "Date Question" activity in AutomatR is part of the Google Forms activities package, allowing the automation process to create a new date-related question within a Google Form. This activity simplifies the process of adding date-based queries to forms and provides various configuration options.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the form where the date question should be added. String variables containing the Form ID. This field is required.
Title
The title of the date question. String variables containing the title of the question. This field is required.
Description
The description or additional information related to the date question. String variables containing the description.
Required
Indicates whether the date question is required or not. Boolean variables containing the requirement status.
Location
The location or position where the question should be created within the form. Integer variables containing the location index.
Include Year
Specifies whether the date question includes the year value. Boolean variables indicating whether to include the year.
Include Time
Specifies whether the date question includes the time value. Boolean variables indicating whether to include the time.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details in a 
BatchUpdateFormResponse
 format. Variables of type 
BatchUpdateFormResponse
 to store the response.
How to use:
​
Drag and drop the "Date Question" activity onto the workflow.
Configure the properties by specifying the form ID, title, and optional settings such as description, requirement status, location, year inclusion, and time inclusion.
Optionally, configure the delay before starting the activity.
Execute the workflow to add a date question to the specified Google Form.
Example:
​
Consider an example where the "Date Question" activity is used to add a required date question titled "Event Date" with a description, located at index 3, including the year and time to a Google Form:
Date Question:
  Form ID: "formId"
  Title: "Event Date"
  Description: "Select the date of the event"
  Required: true
  Location: 3
  Include Year: true
  Include Time: true
  Delay: 2
  Result: formResponse
In this example, the activity adds a date question to the specified Google Form with the provided configuration. The response is stored in the variable "formResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Time Question/index.html

Time Question
AutomatR.GoogleForms.Activities.TimeQuestion
The "Time Question" activity in AutomatR is part of the Google Forms activities package, allowing you to create a new question in a Google Form that captures time-related information. This activity streamlines the process of adding time-based questions to enhance the versatility of form creation workflows.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the Google Form to which the time question should be added. Only supports strings or string variables. This is a required field.
Title
The title of the time question. String variables containing the question title. This is a required field.
Description
The description or additional information for the time question. String variables containing the question description.
Required
Specifies whether the question is required or not. It is a boolean value.
Location
The location or position where the question should be created within the form. It is an integer value.
Duration
Specifies whether the question needs a duration value. It is a boolean value.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of type 
BatchUpdateFormResponse
 to store the result.
How to use:
​
Drag and drop the "Time Question" activity onto the workflow.
Configure the properties by providing the necessary details such as Form ID, Title, Description, Required, Location, and Duration.
Optionally, configure the delay before starting the activity.
Execute the workflow to add the time question to the specified Google Form.
Example:
​
Consider an example where the "Time Question" activity is used to add a time-based question to a Google Form:
Time Question:
  Form ID: formIdVariable
  Title: "Select Meeting Time"
  Description: "Choose the preferred time for the meeting."
  Required: true
  Location: 3
  Duration: true
  Result: formResponseVariable
In this example, the activity adds a time-based question titled "Select Meeting Time" with an optional duration. The question is marked as required and is positioned at index 3 within the form. The response is stored in the variable 
formResponseVariable
 for further handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Get Response/index.html

Get Response
AutomatR.GoogleForms.Activities.GetResponse
The "Get Response" activity in AutomatR is part of the Google Forms activities package, allowing users to retrieve details about a specific response within a Google Form. This activity uses the Google Forms API to access response data associated with a particular form.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the form for which the response details are to be retrieved. String variables containing the Form ID. This field is required.
Response ID
The unique identifier of the response within the specified form. String variables containing the Response ID. This field is required.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details in a 
FormResponse
 object format. Variables of type 
FormResponse
 to store the response details.
How to use:
​
Drag and drop the "Get Response" activity onto the workflow.
Configure the properties by specifying the Form ID and Response ID for which details are to be retrieved.
Optionally, configure the delay before starting the activity.
Execute the workflow to obtain details about the specified response within the Google Form.
Example:
​
Consider an example where the "Get Response" activity is used to retrieve details about a response in a Google Form with the Form ID "formId" and Response ID "responseId":
Get Response:
  Form ID: "formId"
  Response ID: "responseId"
  Delay: 2
  Result: formResponseDetails
In this example, the activity retrieves details about the specified response within the Google Form with the Form ID "formId" and Response ID "responseId." The response is stored in the variable "formResponseDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Add Image/index.html

Add Image
AutomatR.GoogleForms.Activities.AddImage
The "Add Image" activity in AutomatR is part of the Google Forms activities package, allowing automation processes to add an image question to a Google Form. This activity facilitates the creation of visually enriched forms by adding image-based questions with customizable properties.
Properties
​
Name
Description
Input
Caption
Enter the caption for the image. String variables containing the caption text for the image.
FormID
Enter the Form ID to which the image question should be added. String variables containing the Form ID. This field is required.
SourceURI
Enter the source URI for the image. This URI is used to insert the image into the form. String variables containing the image source URI. This field is required.
Title
Provide the title for the image question. String variables containing the title of the image question. This field is required.
ImageAlignment
Select the alignment type for the image within the form. Choose from predefined alignment types 
Left
, 
Center
 or 
Right
.
Location
Specify the location or position where the image question should be created in the form. Integer variables containing the location index.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as Form Details. Variables of type 
Google.Apis.Forms.v1.Data.BatchUpdateFormResponse
 to store the response details.
How to use:
​
Drag and drop the "Add Image" activity onto the workflow.
Configure the properties by specifying the Form ID, image title, source URI, and other optional settings.
Optionally, configure the delay before starting the activity.
Execute the workflow to add an image question to the specified Google Form.
Example:
​
Consider an example where the "Add Image" activity is used to add an image question titled "Company Logo" with the source URI "
https://example.com/logo.png"
 to a Google Form with a Form ID of "abc123":
Add Image:
  FormID: "abc123"
  Title: "Company Logo"
  SourceURI: "https://example.com/logo.png"
  Caption: "Upload the company logo"
  ImageAlignment: Center
  Location: 2
  Result: formUpdateResponse
In this example, the activity adds an image question to the Google Form with the specified Form ID, title, source URI, caption, alignment, and location. The response details are stored in the variable "formUpdateResponse" for further analysis or use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Get Form/index.html

Get Form
AutomatR.GoogleForms.Activities.GetForm
The "Get Form" activity in AutomatR is part of the Google Forms activities package, utilizing the Google Forms API to retrieve details about a specific form. This activity enables users to obtain information about the structure and properties of a Google Form.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the form for which details are to be retrieved. String variables containing the Form ID. This field is required.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details in a 
Form
 object format. Variables of type 
Form
 to store the form details response.
How to use:
​
Drag and drop the "Get Form" activity onto the workflow.
Configure the properties by specifying the Form ID for which details are to be retrieved.
Optionally, configure the delay before starting the activity.
Execute the workflow to obtain details about the specified Google Form.
Example:
​
Consider an example where the "Get Form" activity is used to retrieve details about a Google Form with the Form ID "formId":
Get Form:
  Form ID: "formId"
  Delay: 2
  Result: formDetails
In this example, the activity retrieves details about the specified Google Form with the Form ID "formId." The response is stored in the variable "formDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Linear Scale Question/index.html

Linear Scale Question
AutomatR.GoogleForms.Activities.LinearScaleQuestion
The "Linear Scale Question" activity in AutomatR is part of the Google Forms activities package, allowing you to create a linear scale question within a Google Form. This activity streamlines the process of adding scale-based questions, enhancing the efficiency of form creation workflows.
Properties
​
Name
Description
Input
Form ID
The ID of the Google Form to which the linear scale question should be added. Only supports strings or string variables. This is a required field.
Title
The title of the linear scale question. Provide a descriptive title for the question. String variables containing the title. This is a required field.
Description
The description of the linear scale question. Provide additional information or context for the question. String variables containing the description.
Required
Specifies whether the question is required or not. It is a boolean value.
Location
The position where the question will be created in the form. It is an integer value.
High
Enter the scalar high value between 2 to 10 for the linear scale. This is a required field.
High Label
Enter the label for the high end of the linear scale. String variables containing the high label.
Low Label
Enter the label for the low end of the linear scale. String variables containing the low label.
Low
Enter the scalar low value (0 or 1) for the linear scale. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of type 
BatchUpdateFormResponse
 to store the response.
How to use:
​
Drag and drop the "Linear Scale Question" activity onto the workflow.
Configure the properties by providing the necessary details such as Form ID, Title, Description, etc.
Optionally, configure the delay before starting the activity.
Execute the workflow to add a linear scale question to the specified Google Form.
Example:
​
Consider an example where the "Linear Scale Question" activity is used to add a linear scale question to a Google Form:
Linear Scale Question:
  Form ID: formIdVariable
  Title: "Rate Your Experience"
  Description: "On a scale of 1 to 10, how would you rate your experience?"
  Required: true
  Location: 1
  High: 10
  High Label: "Excellent"
  Low Label: "Poor"
  Low: 1
  Result: formDetailsVariable
In this example, the activity adds a linear scale question titled "Rate Your Experience" to the specified Google Form. The question requires a response, and the scale ranges from 1 (Poor) to 10 (Excellent). The response details are stored in the variable 
formDetailsVariable
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Text Question/index.html

Text Question
AutomatR.GoogleForms.Activities.TextQuestion
The "Text Question" activity in AutomatR is part of the Google Forms activities package, allowing you to create a new text-based question within a Google Form. This activity streamlines the process of adding questions that require textual input, providing flexibility in form creation workflows.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the Google Form to which the text question should be added. Only supports strings or string variables. This is a required field.
Title
The title of the text question. String variables containing the question title. This is a required field.
Description
The description or additional information for the text question. String variables containing the question description.
Text Question Type
Select the type of text question (paragraph/short answer).
Required
Specifies whether the question is required or not. It is a boolean value.
Location
The location or position where the question should be created within the form. It is an integer value.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of type 
BatchUpdateFormResponse
 to store the result.
How to use:
​
Drag and drop the "Text Question" activity onto the workflow.
Configure the properties by providing the necessary details such as Form ID, Title, Description, Text Question Type, Required, and Location.
Optionally, configure the delay before starting the activity.
Execute the workflow to add the text question to the specified Google Form.
Example:
​
Consider an example where the "Text Question" activity is used to add a text-based question to a Google Form:
Text Question:
  Form ID: formIdVariable
  Title: "Enter your feedback"
  Description: "Provide your thoughts on the product/service."
  Text Question Type: Paragraph
  Required: true
  Location: 4
  Result: formResponseVariable
In this example, the activity adds a text-based question titled "Enter your feedback" with a paragraph response type. The question is marked as required and is positioned at index 4 within the form. The response is stored in the variable 
formResponseVariable
 for further handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Choice Question/index.html

Choice Question
AutomatR.GoogleForms.Activities.ChoiceQuestion
The "Choice Question" activity in AutomatR is part of the Google Forms activities package, facilitating the creation of a question with multiple-choice options within a Google Form. This activity enhances the form creation process by providing various customization options for the choice question.
Properties
​
Name
Description
Input
FormID
Enter the Form ID to which the choice question should be added. String variables containing the Form ID. This field is required.
Title
Provide the title for the choice question. String variables containing the title of the choice question. This field is required.
Description
Provide a description for the choice question. String variables containing the description of the choice question.
Required
Specify whether the question is required or not. Boolean variables indicating whether the question is required.
Location
Specify the location or position where the choice question should be added in the form. Integer variables containing the location index.
Choice Question Type
Select the type of choice question. Options include "Dropdown," "Checkbox," and "Radio."
Options
Provide options for the choice question. Enter options separated by commas (Example: 'Option1,Option2,Option3'). String variables containing the options. This field is required.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Source URI
The source URI used to insert an image related to the choice question. It can be empty when fetched. String variables containing the source URI.
Optional
Image Alignment
Select the alignment type for the image associated with the choice question. Choose from options like "Left," "Right," "Center," etc.
Width
Enter the width of the image associated with the choice question. Integer variables containing the width value.
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of relevant types (e.g., BatchUpdateFormResponse) to store the response details.
How to use:
​
Drag and drop the "Choice Question" activity onto the workflow.
Configure the properties by specifying the Form ID, choice question title, type, options, and other optional settings.
Optionally, configure the delay before starting the activity.
Execute the workflow to add a choice question to the specified Google Form.
Example:
​
Consider an example where the "Choice Question" activity is used to add a dropdown question titled "Select Country" with options "India," "USA," and "Canada" to a Google Form with a Form ID of "xyz789":
Choice Question:
  FormID: "xyz789"
  Title: "Select Country"
  Choice Question Type: Dropdown
  Options: "India,USA,Canada"
  Location: 3
  Image Alignment: Left
  Width: 100
  Source URI: "https://example.com/country-image.jpg"
  Result: formDetails
In this example, the activity adds a dropdown choice question to the Google Form with the specified Form ID, title, type, options, location, image alignment, width, and source URI. The response details are stored in the variable "formDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Form Updates/index.html

Form Updates
AutomatR.GoogleForms.Activities.FormUpdates
The "Form Updates" activity in AutomatR is part of the Google Forms activities package, utilizing the Google Forms API to update an existing form with multiple operations. This activity facilitates batch updates to a Google Form, enhancing the customization and modification of form properties.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the form to be updated. String variables containing the Form ID. This field is required.
Requests
The batch of update requests in JSON format. String variables containing the JSON representation of the update requests. This field is required.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details in an 
UpdatedFormObjectResult
 format. Variables of type 
UpdatedFormObjectResult
 to store the response.
How to use:
​
Drag and drop the "Form Updates" activity onto the workflow.
Configure the properties by specifying the form ID and providing the batch of update requests in JSON format.
Optionally, configure the delay before starting the activity.
Execute the workflow to apply the specified updates to the Google Form.
Example:
​
Consider an example where the "Form Updates" activity is used to update an existing Google Form with two operations: creating a new item at index 0 and updating the form description:
Form Updates:
  Form ID: "formId"
  Requests: "{
    \"includeFormInResponse\": false,
    \"requests\": [
      {
        \"createItem\": {
          \"item\": {
            \"description\": \"Hello TEST\",
            \"textItem\": {}
          },
          \"location\": {
            \"index\": 0
          }
        }
      },
      {
        \"updateFormProperties\": {
          \"properties\": {
            \"description\": \"Updated Form Description\"
          },
          \"fields\": \"description\"
        }
      }
    ]
  }"
  Delay: 2
  Result: formResponse
In this example, the activity updates the specified Google Form with the provided batch of update requests. The response is stored in the variable "formResponse" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Add Title And Description/index.html

Add Title And Description
AutomatR.GoogleForms.Activities.AddTitleAndDescription
The "Add Title And Description" activity in AutomatR is part of the Google Forms activities package, allowing automation processes to add a title and description to a Google Form. This activity enhances the form creation process by providing a title and an optional description to make the form more informative.
Properties
​
Name
Description
Input
FormID
Enter the Form ID to which the title and description should be added. String variables containing the Form ID. This field is required.
Title
Provide the title for the Google Form. String variables containing the title of the form. This field is required.
Description
Provide an optional description for the Google Form. String variables containing the description of the form.
Location
Specify the location or position where the title and description should be added in the form. Integer variables containing the location index.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Add Title And Description" activity onto the workflow.
Configure the properties by specifying the Form ID, form title, description, and other optional settings.
Optionally, configure the delay before starting the activity.
Execute the workflow to add a title and description to the specified Google Form.
Example:
​
Consider an example where the "Add Title And Description" activity is used to add a title "Employee Feedback Form" and a description "Please provide your feedback on the recent training sessions" to a Google Form with a Form ID of "xyz789":
Add Title And Description:
  FormID: "xyz789"
  Title: "Employee Feedback Form"
  Description: "Please provide your feedback on the recent training sessions"
  Location: 1
In this example, the activity adds a title and an optional description to the Google Form with the specified Form ID, title, description, and location. This enhances the form's clarity and provides additional context for form respondents.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/List Responses/index.html

List Responses
AutomatR.GoogleForms.Activities.ListResponses
The "List Responses" activity in AutomatR is part of the Google Forms activities package, allowing you to retrieve responses for a specific Google Form. This activity streamlines the process of fetching form responses based on various parameters, enhancing the efficiency of response analysis workflows.
Properties
​
Name
Description
Input
Form ID
The unique identifier assigned to the Google Form for which responses should be retrieved. Only supports strings or string variables. This is a required field.
Filter
Returns form responses based on a filter based on timestamp. String variables containing the filter.
Page Size
The maximum number of responses to return. If unspecified or zero, at most 5000 responses are returned. It supports integer variables.
Page Token
The token for fetching the next page of responses. It supports string variables.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Responses
The returned form responses. Note: The formId field is not returned in the FormResponse object for list requests. Variables of type 
ListFormResponsesResponse
 to store the responses.
Next Page Token
If set, there are more responses. To get the next page of responses, provide this as the pageToken in a future request. String variables to store the next page token.
How to use:
​
Drag and drop the "List Responses" activity onto the workflow.
Configure the properties by providing the necessary details such as Form ID, Filter, Page Size, and Page Token.
Optionally, configure the delay before starting the activity.
Execute the workflow to list the responses for the specified Google Form.
Example:
​
Consider an example where the "List Responses" activity is used to retrieve responses for a Google Form:
List Responses:
  Form ID: formIdVariable
  Filter: "timestamp > 2023-08-28T11:10:00.000Z"
  Page Size: 10
  Page Token: nextPageTokenVariable
  Responses: formResponsesVariable
  Next Page Token: nextPageTokenVariable
In this example, the activity lists responses for the specified Google Form using a filter based on the timestamp. The page size is set to 10, and the responses are stored in the variable 
formResponsesVariable
. The next page token, if available, is stored in the variable 
nextPageTokenVariable
 for fetching the next set of responses in subsequent requests.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Row Question/index.html

Row Question
AutomatR.GoogleForms.Activities.RowQuestion
The "Row Question" activity in AutomatR is part of the Google Forms activities package, allowing you to create a new row question within a Google Form. This activity streamlines the process of adding row-based questions with customizable options, enhancing the efficiency of form creation workflows.
Properties
​
Name
Description
Input
Form ID
The unique identifier of the Google Form to which the row question should be added. Only supports strings or string variables. This is a required field.
Title
The title of the row question. String variables containing the question title. This is a required field.
Description
The description or additional information for the row question. String variables containing the question description.
Required
Specifies whether the question is required or not. It is a boolean value.
Location
The location or position where the question should be created within the form. It is an integer value.
Options
The options available for the row question. Provide options in a comma-separated format (e.g., 'option1, option2, option3'). This is a required field.
Question Titles
The titles of individual row questions. Provide titles in a comma-separated format (e.g., 'title1, title2, title3'). This is a required field.
Row Question Type
Select the type of row question.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of type 
BatchUpdateFormResponse
 to store the result.
How to use:
​
Drag and drop the "Row Question" activity onto the workflow.
Configure the properties by providing the necessary details such as Form ID, Title, Description, Required, Location, Options, Question Titles, and Row Question Type.
Optionally, configure the delay before starting the activity.
Execute the workflow to add the row question to the specified Google Form.
Example:
​
Consider an example where the "Row Question" activity is used to add a row-based question to a Google Form:
Row Question:
  Form ID: formIdVariable
  Title: "Rate the following features"
  Description: "Please provide your feedback on the following features."
  Required: true
  Location: 3
  Options: "Excellent, Good, Average, Poor"
  Question Titles: "Feature1, Feature2, Feature3, Feature4"
  Row Question Type: Choice
  Result: formResponseVariable
In this example, the activity adds a row question titled "Rate the following features" with options for rating each feature. The question is marked as required and is positioned at index 3 within the form. The individual row question titles are specified for each feature, and the type of row question is set to "Choice." The response is stored in the variable 
formResponseVariable
 for further handling.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Forms/Create Form/index.html

Create Form
AutomatR.GoogleForms.Activities.CreateForm
The "Create Form" activity in AutomatR is part of the Google Forms activities package, allowing the automation process to generate a new Google Form. This activity simplifies the form creation process and provides information about the created form, such as the Form ID and Responder URL.
Properties
​
Name
Description
Input
Title
The title of the form visible to responders. String variables containing the title of the form. This field is required.
Document Title
The title of the document visible in Drive. If Info.title is empty, the documentTitle may appear in its place in the Google Forms UI and be visible to responders. String variables containing the document title. It is optional and gives "Untitled Form" as a default value.
Miscellaneous
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Form ID
The unique identifier assigned to the created form. This ID can be used to reference and access the form in subsequent API requests or interactions. String variables containing the Form ID.
Responder URL
The URL of the created form. This URL can be shared with respondents to access and fill out the form to submit a response, but not edit the questions. String variables containing the Responder URL.
How to use:
​
Drag and drop the "Create Form" activity onto the workflow.
Configure the properties by specifying the form title and optional document title.
Optionally, configure the delay before starting the activity.
Execute the workflow to create a new Google Form and obtain information such as Form ID and Responder URL.
Example:
​
Consider an example where the "Create Form" activity is used to generate a new Google Form titled "Feedback Form" with the document title "Feedback for Product X":
Create Form:
  Title: "Feedback Form"
  Document Title: "Feedback for Product X"
  Delay: 2
  Form ID: formId
  Responder URL: responderUrl
In this example, the activity creates a new Google Form with the specified title and document title. The Form ID and Responder URL are stored in the variables "formId" and "responderUrl" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/XML/Get XMLNode Attributes/index.html

Get XMLNode Attributes
AutomatR.DeafultActivities.API.GetXMLNodeAttributes
The "Get XML Node Attributes" activity in AutomatR is designed to retrieve attributes from an XML node. This activity is useful for extracting specific attribute values or obtaining a dictionary of all attributes associated with an XML node within automation workflows.
Properties
​
Name
Description
Input
XML Node
Specifies the XML node from which attributes are to be retrieved. This input is required for the activity to function correctly. Provide an 
XmlNode
 variable representing the XML node.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get XML Node Attributes" activity. This optional delay can be used to manage synchronization or pacing issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Attribute
Specifies the name of the attribute within the XML node whose value is to be retrieved. This input is optional, and if provided, the activity will return the value of the specified attribute. Provide a 
string
 variable containing the attribute name.
Output
Nodes
Outputs a dictionary of all attributes associated with the XML node. The dictionary contains attribute names as keys and attribute values as values. Variables of type 
Dictionary<string, string>
 to store the attributes.
Attribute Value
Outputs the value of the specified attribute. If the "Attribute" input is provided, this output will contain the value of that specific attribute. Variables of type 
string
 to store the attribute value.
How to use:
Drag and drop the "Get XML Node Attributes" activity onto the workflow.
Configure the properties by specifying the XML node from which attributes are to be retrieved.
Optionally, configure the delay, attribute name, or both based on your requirements.
Execute the workflow to retrieve attributes from the specified XML node.
Example:

Consider an example where the "Get XML Node Attributes" activity is used to obtain attributes from an XML node representing a book:
Get XML Node Attributes:
  XML Node: bookNode
  Attribute: author
  Delay: 3
  Attribute Value: authorAttributeValue
In this example, the activity retrieves the "author" attribute value from the specified XML node "bookNode" after a delay of 3 seconds. The attribute value is stored in the string variable 
authorAttributeValue
 for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/XML/Deserialize Xml/index.html

Deserialize XML
AutomatR.DeafultActivities.API.DeserializeXML
The "Deserialize XML" activity in AutomatR is designed to deserialize an XML string into an XDocument object. This activity is useful for handling and processing XML data within automation workflows.
Properties
​
Name
Description
Input
XML
Specifies the XML string that needs to be deserialized. This input is required for the activity to function correctly. Provide a 
string
 or string variable containing the XML data to be deserialized.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Deserialize XML" activity. This optional delay can be used to manage synchronization or pacing issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Output
XML Document
Outputs the deserialized XML as an XDocument variable. This variable can be used for further processing of the XML data within the workflow. Variables of type 
XDocument
 to store the deserialized XML.
How to use:
Drag and drop the "Deserialize XML" activity onto the workflow.
Configure the properties by specifying the XML string to be deserialized.
Optionally, configure the delay to control the timing of the activity.
Execute the workflow to deserialize the specified XML string.
Example:

Consider an example where the "Deserialize XML" activity is used to parse an XML string representing configuration data:
Deserialize XML:
  XML: "<configuration><setting name='MaxConnections'>10</setting><setting name='Timeout'>30</setting></configuration>"
  Delay: 3
  XML Document: deserializedXml
In this example, the activity deserializes the provided XML string after a delay of 3 seconds. The deserialized XML document is stored in the variable 
deserializedXml
 for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/XML/Get XMLNodes/index.html

Get XMLNodes
AutomatR.DeafultActivities.API.GetXMLNodes
The "Get XML Nodes" activity in AutomatR is designed to retrieve a list of nodes from a specified XML document. This versatile activity can take XML input as a string or read from a local XML file, allowing users to extract specific nodes based on their requirements.
Properties
​
Name
Description
Input
XML String
Specifies an XML string or string variable containing the XML to be processed. Either provide an 
XML string
 directly or use a 
string
 variable containing XML data.
File Path
Specifies the full path of the XML file available on the local drive. Provide a 
string
 variable containing the file path.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get XML Nodes" activity. This optional delay can be used to manage synchronization or pacing issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Node Name
Specifies the name of the XML node to retrieve. This input is optional. If provided, the activity will return nodes with the specified name; otherwise, all nodes in the XML document will be retrieved. Provide a 
string
 variable containing the node name.
Output
Nodes
Outputs a list of XML nodes based on the XML provided as input. The list contains XmlNode variables representing individual nodes. Variables of type 
List<XmlNode>
 to store the retrieved nodes.
How to use:
Drag and drop the "Get XML Nodes" activity onto the workflow.
Configure the properties by providing either an XML string or the full path of the XML file.
Optionally, configure the delay and specify the node name if you want to retrieve specific nodes.
Execute the workflow to obtain a list of XML nodes.
Example:

Consider an example where the "Get XML Nodes" activity is used to retrieve all book nodes from an XML file:
Get XML Nodes:
  File Path: "C:\Documents\Books.xml"
  Node Name: "book"
  Delay: 3
  Nodes: bookNodes
In this example, the activity reads the XML file located at "C:\Documents\Books.xml," waits for 3 seconds, and retrieves all nodes with the name "book." The list of book nodes is stored in the variable 
bookNodes
 for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Deal/Get Deal/index.html

Get Deal
AutomatR.HubSpot.Activities.GetDeal
The "Get Deal" activity in AutomatR is part of the HubSpot activities package, designed to retrieve details for a sales deal from your HubSpot user's account. This activity streamlines the process of obtaining information about specific deals, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Deal ID
Enter the deal ID to fetch the deal details. String variables containing the deal ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Returns the response as a HubSpotDealResult. Variables of type 
HubSpotDealResult
 to store deal details.
How to use:
Drag and drop the "Get Deal" activity onto the workflow.
Configure the properties by specifying the deal ID for which details need to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified deal.
Example:

Consider an example where the "Get Deal" activity is used to retrieve information about a deal with the ID "6789":
Get Deal:
  Deal ID: "6789"
  Result: dealDetails
In this example, the activity fetches detailed information about the deal with the ID "6789" from the HubSpot user account. The result is stored in the variable "dealDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Contact/Update Contact/index.html

Update Contact
AutomatR.HubSpot.Activities.UpdateContact
The "Update Contact" activity in AutomatR is part of the HubSpot activities package, allowing the update of contact details in a HubSpot user's account based on the contact ID. This activity streamlines the process of keeping contact information up-to-date within workflows.
Properties
​
Name
Description
Input
Contact ID
Enter the contact ID for which details need to be updated.
Email
Enter the updated email address for the contact.
First Name
Enter the updated first name for the contact.
Last Name
Enter the updated last name for the contact.
Job Title
Enter the updated job title for the contact.
Life Cycle Stage
Enter the updated life cycle stage for the contact from predefined values in HubSpot (e.g., marketingqualifiedlead).
Lead Status
Enter the updated lead status for the contact from predefined values in HubSpot (e.g., inProgress).
Owner ID
Enter the updated existing owner ID in the HubSpot user's account, which gets assigned to the contact.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Contact" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration (e.g., 5 for 5 seconds).
Optional
-
Either one of the inputs (Email, First Name, Last Name, Job Title, Life Cycle Stage, Lead Status, Owner ID) is required along with the Contact ID for the update. An error will be thrown if none of the inputs are provided.
How to use:
Drag and drop the "Update Contact" activity onto the workflow.
Configure the properties by specifying the contact ID and the details you want to update (Email, First Name, Last Name, Job Title, Life Cycle Stage, Lead Status, Owner ID).
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to update the specified contact details in HubSpot.
Example:

Consider an example where the "Update Contact" activity is used to update the email address and job title for a contact with ID "98765" in HubSpot:
Update Contact:
  Display Name: "Update Contact Details"
  Contact ID: "98765"
  Email: "newemail@example.com"
  Job Title: "Senior Developer"
In this example, the activity updates the email address to "
newemail@example.com
" and the job title to "Senior Developer" for the contact with ID "98765" in HubSpot. Customize the inputs based on the information you want to update for the specified contact.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Contact/Get Contact/index.html

Get Contact
AutomatR.HubSpot.Activities.GetContact
The "Get Contact" activity in AutomatR is part of the HubSpot activities package, allowing users to retrieve detailed information about a contact based on its ID from their HubSpot user account. This activity streamlines the retrieval of contact data for use in automation workflows.
Properties
​
Name
Description
Input
Contact ID
Enter the contact ID to fetch the contact details. String variables containing the contact ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Returns the response as a HubSpotContactResult. Variables of type 
HubSpotContactResult
 to store contact details.
How to use:
Drag and drop the "Get Contact" activity onto the workflow.
Configure the properties by specifying the contact ID for which details need to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified contact.
Example:

Consider an example where the "Get Contact" activity is used to retrieve information about a contact with the ID "12345":
Get Contact:
  Contact ID: "12345"
  Result: contactDetails
In this example, the activity fetches detailed information about the contact with the ID "12345" from the HubSpot user account. The result is stored in the variable "contactDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Contact/Delete Contact/index.html

Delete Contact
AutomatR.HubSpot.Activities.DeleteContact
The "Delete Contact" activity in AutomatR is part of the HubSpot activities package, allowing users to delete a contact based on the contact ID from their HubSpot user account. This activity streamlines contact management tasks within HubSpot.
Properties
​
Name
Description
Input
Contact ID
Enter the ID of the contact that needs to be deleted from the HubSpot account.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
None
This activity does not output any specific result. It throws an exception if the contact ID does not exist.
How to use:
Drag and drop the "Delete Contact" activity onto the workflow.
Configure the properties by specifying the contact ID for deletion.
Optionally, configure the delay if needed.
Execute the workflow to delete the specified contact in the HubSpot account.
Example:

Consider an example where the "Delete Contact" activity is used to delete a contact with ID "contact123" from HubSpot:
Delete Contact:
  Contact ID: "contact123"
In this example, the activity attempts to delete the contact with ID "contact123" from HubSpot. If the contact ID exists, the activity will delete the contact; otherwise, it will throw an exception indicating that the given contact ID does not exist.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Contact/Create Contact/index.html

Create Contact
AutomatR.HubSpot.Activities.CreateContact
The "Create Contact" activity in AutomatR for HubSpot facilitates the creation of a new contact with various attributes in a HubSpot user's account. This activity is part of the HubSpot activities package and simplifies the process of adding contacts to HubSpot.
Properties
​
Name
Description
Input
Email
Enter the unique email address of the new contact. String variables containing the email address.
First Name
Enter the first name for the contact. String variables containing the first name.
Last Name
Enter the last name for the contact. String variables containing the last name.
Job Title
Enter the job title for the contact. String variables containing the job title.
Life Cycle Stage
Enter the life cycle stage for the contact from predefined values in HubSpot (e.g., marketingqualifiedlead). String variables containing the life cycle stage.
Lead Status
Enter the lead status for the contact from predefined values in HubSpot (e.g., New). String variables containing the lead status.
Owner ID
Enter the existing owner ID in the HubSpot user's account to which the contact will be assigned. String variables containing the owner ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to start the activity. Integer variables containing the delay duration.
Output
Result
Returns the response as a 
HubSpotContactCreatedResult
 object. Variables of type 
HubSpotContactCreatedResult
 to store the operation result.
How to Use
​
Drag and drop the "Create Contact" activity onto the workflow.
Configure the properties by specifying the email address, first name, last name, job title, life cycle stage, lead status, and owner ID for the new contact.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the contact in HubSpot.
Example:
Consider an example where the "Create Contact" activity is used to add a new contact to HubSpot:
Create Contact:
  Display Name: "Add New Contact"
  Email: "john.doe@example.com"
  First Name: "John"
  Last Name: "Doe"
  Job Title: "Software Engineer"
  Life Cycle Stage: "marketingqualifiedlead"
  Lead Status: "New"
  Owner ID: "123456"
  Result: hubSpotContactResult
In this example, the activity creates a new contact with the email address "
john.doe@example.com
," first name "John," last name "Doe," job title "Software Engineer," life cycle stage "marketingqualifiedlead," lead status "New," and assigns it to the owner with ID "123456." The result of the operation is stored in the variable 
hubSpotContactResult
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Association/Delete Association/index.html

Delete Association
AutomatR.HubSpot.Activities.DeleteAssociation
The "Delete Association" activity in AutomatR is part of the HubSpot activities package, providing the capability to delete associations between different objects in a user's HubSpot account. This activity helps in managing relationships between entities, allowing users to remove associations based on specific association types.
Properties
​
Name
Description
Input
From Object ID
Enter the ID of the source object for which the association needs to be deleted.
To Object ID
Enter the ID of the target object from which the association should be removed.
From Object Type
Enter the type of the source object (e.g., Contacts, Companies, Deals, Tickets).
To Object Type
Enter the type of the target object (e.g., Contacts, Companies, Deals, Tickets).
Type
Enter the type of association to be deleted (e.g., contact_to_company).
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Outputs the result of the "Delete Association" operation. True if the association is deleted successfully; otherwise, false.
How to use:
Drag and drop the "Delete Association" activity onto the workflow.
Configure the properties by specifying the source and target object IDs, object types, and the type of association to be deleted.
Optionally, configure the delay if needed.
Execute the workflow to delete the specified association in the HubSpot account.
Example:

Consider an example where the "Delete Association" activity is used to remove the association between a contact and a company:
Delete Association:
  From Object ID: "contact123"
  To Object ID: "company456"
  From Object Type: "contacts"
  To Object Type: "companies"
  Type: "contact_to_company"
  Result: isAssociationDeleted
In this example, the activity attempts to delete the association between the contact with ID "contact123" and the company with ID "company456." The result of the operation (success or failure) is stored in the Boolean variable "isAssociationDeleted" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Association/Create Association/index.html

Create Association
AutomatR.HubSpot.Activities.CreateAssociation
The "Create Association" activity in AutomatR for HubSpot allows you to create associations between different objects in your HubSpot user account, such as associating a contact with a company. This activity is part of the HubSpot activities package and simplifies the process of managing associations in HubSpot.
Properties
​
Name
Description
Input
From Object ID
Enter the ID of the object from which the association originates. For example, the Contact ID when associating with a company. String variables containing the from object ID.
To Object ID
Enter the ID of the object to which the association is made. For example, the Company ID when associating with a contact. String variables containing the to object ID.
Type
Enter the type of association. For example, "contact_to_company." String variables containing the association type.
From Object Type
Enter the type of the object from which the association originates. For example, "contacts." String variables containing the from object type.
To Object Type
Enter the type of the object to which the association is made. For example, "companies." String variables containing the to object type.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to start the activity. Integer variables containing the delay duration.
Output
Result
Returns true or false based on the success of the association. Boolean variables to store the operation result.
How to Use
​
Drag and drop the "Create Association" activity onto the workflow.
Configure the properties by specifying the from object ID, to object ID, association type, from object type, and to object type.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the association between the specified objects in HubSpot.
Example:
Consider an example where the "Create Association" activity is used to associate a contact with a company in HubSpot:
Create Association:
  Display Name: "Associate Contact with Company"
  From Object ID: "123" (Contact ID)
  To Object ID: "456" (Company ID)
  Type: "contact_to_company"
  From Object Type: "contacts"
  To Object Type: "companies"
  Result: isAssociationSuccessful
In this example, the activity creates an association between a contact with ID "123" and a company with ID "456." The association type is "contact_to_company," and the result of the operation (success or failure) is stored in the Boolean variable "isAssociationSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/File/Upload File/index.html

Upload File
AutomatR.HubSpot.Activities.UploadFile
The "Upload File" activity in AutomatR is part of the HubSpot activities package, facilitating the process of uploading files to a HubSpot user's account. This activity streamlines file upload tasks, allowing you to specify the file path, destination folder, and overwrite options.
Properties
​
Name
Description
Input
File Path
Enter the local file path that needs to be uploaded to HubSpot.
Folder Path
Enter the folder path in the HubSpot user's account where the file will be uploaded.
Overwrite
When enabled, allows the file to be overwritten with new content. Boolean variable to determine overwrite behavior.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
Delay
Enter the wait time in seconds (e.g., 5) to start the activity.
How to use:
Drag and drop the "Upload File" activity onto the workflow.
Configure the properties by specifying the file path, folder path in HubSpot, and whether to overwrite existing files.
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to upload the specified file to the designated folder in HubSpot.
Example:

Consider an example where the "Upload File" activity is used to upload a document named "report.pdf" from the local drive to a folder named "Documents" in HubSpot:
Upload File:
  Display Name: "Upload Report Document"
  File Path: "C:\LocalFiles\report.pdf"
  Folder Path: "Documents"
  Overwrite: true
In this example, the activity uploads the "report.pdf" file to the "Documents" folder in HubSpot, and it overwrites the file if it already exists. Customize the inputs based on the file path and destination folder you want to use.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/File/Update File/index.html

Update File
AutomatR.HubSpot.Activities.UpdateFile
The "Update File" activity in AutomatR is part of the HubSpot activities package, allowing the update of the content of an existing file in a HubSpot user's account. This activity streamlines the process of updating file content within workflows.
Properties
​
Name
Description
Input
File Path
Enter the full path of the HubSpot user account to update the file.
File ID
Enter the file ID that needs to be updated.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration (e.g., 5 for 5 seconds).
How to use:
Drag and drop the "Update File" activity onto the workflow.
Configure the properties by specifying the file path and file ID for the file you want to update.
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to update the content of the specified file in HubSpot.
Example:

Consider an example where the "Update File" activity is used to update the content of a file with ID "12345" in HubSpot:
Update File:
  Display Name: "Update File Content"
  File Path: "/HubSpotUser/Documents/document.txt"
  File ID: "12345"
In this example, the activity updates the content of the file located at "/HubSpotUser/Documents/document.txt" in HubSpot. Customize the inputs based on the file path and ID you want to update.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Product/Get Product/index.html

Get Product
AutomatR.HubSpot.Activities.GetProduct
The "Get Product" activity in AutomatR is part of the HubSpot activities package, designed to retrieve details for a product from your HubSpot user's account. This activity streamlines the process of obtaining information about specific products, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Product ID
Enter the product ID to fetch product details. String variables containing the product ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Returns the response as a HubSpotProductResult. Variables of type 
HubSpotProductResult
 to store product details.
How to use:
Drag and drop the "Get Product" activity onto the workflow.
Configure the properties by specifying the product ID for which details need to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified product.
Example:

Consider an example where the "Get Product" activity is used to retrieve information about a product with the ID "12345":
Get Product:
  Product ID: "12345"
  Result: productDetails
In this example, the activity fetches detailed information about the product with the ID "12345" from the HubSpot user account. The result is stored in the variable "productDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Product/Delete Product/index.html

Delete Product
AutomatR.HubSpot.Activities.DeleteProduct
The "Delete Product" activity in AutomatR is part of the HubSpot activities package, allowing users to delete a product based on the product ID from their HubSpot user account. This activity streamlines product management tasks within HubSpot.
Properties
​
Name
Description
Input
Product ID
Enter the ID of the product that needs to be deleted from the HubSpot product list.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Outputs the result of the "Delete Product" operation, indicating whether the deletion was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Product" activity onto the workflow.
Configure the properties by specifying the product ID for deletion.
Optionally, configure the delay if needed.
Execute the workflow to delete the specified product in the HubSpot account.
Example:

Consider an example where the "Delete Product" activity is used to delete a product with ID "product123" from HubSpot:
Delete Product:
  Product ID: "product123"
In this example, the activity attempts to delete the product with ID "product123" from HubSpot. If the product ID exists, the activity will delete the product; otherwise, it will set the result to false.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Product/Update Product/index.html

Update Product
AutomatR.HubSpot.Activities.UpdateProduct
The "Update Product" activity in AutomatR is part of the HubSpot activities package, facilitating the update of existing product details in a HubSpot user's account based on the product ID. This activity streamlines the process of keeping product information up-to-date within workflows.
Properties
​
Name
Description
Input
Description
Enter the updated description of the product, such as product features, additional options, or measurements.
Name
Enter the updated name for the product or service.
Price
Enter the updated product's value in your account's currency.
Product ID
Enter the Product ID for which product details need an update.
Recurring Billing Frequency
Enter the updated billing frequency based on which contacts can be charged (e.g., Annually).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Product" activity. Integer variables containing the delay duration (e.g., 5 for 5 seconds).
How to use:
Drag and drop the "Update Product" activity onto the workflow.
Configure the properties by specifying the product ID and updating any relevant information such as name, description, price, and recurring billing frequency.
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to update the details of the specified product in HubSpot.
Example:

Consider an example where the "Update Product" activity is used to update the name, description, and price of a product with ID "123" in HubSpot:
Update Product:
  Display Name: "Update Product Details"
  Product ID: "123"
  Name: "New Product Name"
  Description: "Updated product features and specifications."
  Price: "150.00"
  Recurring Billing Frequency: "Annually"
In this example, the activity updates the name, description, and price of the product with ID "123" in HubSpot. Customize the inputs based on the product ID and information you want to update.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Product/Create Product/index.html

Create Product
AutomatR.HubSpot.Activities.CreateProduct
The "Create Product" activity in AutomatR for HubSpot allows you to create a new product in a HubSpot user's account. This activity is part of the HubSpot activities package and streamlines the process of adding products to HubSpot.
Properties
​
Name
Description
Input
Name
Enter a name for the product or service. String variables containing the product name.
Description
Enter a description of the product, such as product features, additional options, or measurements.
Price
Enter the product's value in your account's currency. String variables containing the product price.
Recurring Billing Frequency
Enter the billing frequency based on which contacts can be charged (e.g., Monthly). String variables containing the billing frequency.
SKU
Enter a name for the SKU to identify and track your product. String variables containing the SKU.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to start the activity. Integer variables containing the delay duration.
Output
Result
Returns the response as a 
HubSpotProductResult
. Variables of type 
HubSpotProductResult
 to store the operation result.
How to Use
​
Drag and drop the "Create Product" activity onto the workflow.
Configure the properties by specifying the name, description, price, recurring billing frequency, SKU, and optionally configure the delay.
Execute the workflow to create the product in HubSpot.
Example:
Consider an example where the "Create Product" activity is used to add a new product to HubSpot:
Create Product:
  Display Name: "New Software"
  Name: "Software Suite"
  Description: "Comprehensive software package with advanced features."
  Price: "499.99"
  Recurring Billing Frequency: "Monthly"
  SKU: "SW-001"
  Result: hubSpotProductResult
In this example, the activity creates a new product named "Software Suite" with a description, price of $499.99, recurring billing frequency set to "Monthly," and SKU "SW-001." The result of the operation is stored in the variable 
hubSpotProductResult
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Project/HubSpot Scope/index.html

HubSpot Scope
AutomatR.HubSpot.Activities.HubSpotScope
The "HubSpot Scope" activity in AutomatR is part of the HubSpot activities package, providing OAuth authentication setup for HubSpot integration. This activity allows users to configure and authenticate their HubSpot account to perform various actions within workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds i.e. 5) to start the activity.
Refresh Token
Click to browse for the refresh token and select the email ID associated with your HubSpot account. This enables the capture of the API token required to access your HubSpot account.
Client ID
Enter the client ID for your HubSpot user's account.
Client Secret Key
Enter the Client Secret Key for your HubSpot user's account.
Output
(Internal)
The activity internally outputs the HubSpot client and access token, which are used in subsequent actions within the HubSpot scope.
Body
A sequence of activities within the HubSpot scope.
How to use:
Drag and drop the "HubSpot Scope" activity onto the workflow.
Configure the properties by providing the necessary authentication details, such as client ID and client secret key.
Optionally, configure the delay and refresh token.
Create a sequence of activities within the HubSpot scope to perform actions using the authenticated HubSpot account.
Example:

Consider an example where the "HubSpot Scope" activity is used to authenticate a HubSpot account:
HubSpot Scope:
  Client ID: "your_client_id"
  Client Secret Key: "your_client_secret_key"
  Refresh Token: refreshTokenDetails
  Delay: 5
  Body:
    // Activities within the HubSpot scope
In this example, the activity authenticates the HubSpot account using the provided client ID and client secret key. The refresh token details are stored in the variable "refreshTokenDetails" for further use within the workflow. The activities within the "Body" of the scope can now perform actions using the authenticated HubSpot account.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Ticket/Create Ticket/index.html

Create Ticket
AutomatR.HubSpot.Activities.CreateTicket
The "Create Ticket" activity in AutomatR for HubSpot allows you to create a new ticket in a HubSpot user's account. This activity is part of the HubSpot activities package and streamlines the process of adding tickets to HubSpot.
Properties
​
Name
Description
Input
Pipeline
Select the predefined pipeline values to be associated with the new ticket. Enum variable containing the pipeline selection.
Ticket Status
Select the predefined status values to be associated with the new ticket. Enum variable containing the ticket status selection.
Priority
Select the predefined priority values to be associated with the new ticket. Enum variable containing the priority selection.
Ticket Name
Enter the title or name for the new ticket. String variables containing the ticket name.
Ticket Owner Email
Enter the owner email address of the new ticket. String variables containing the ticket owner's email.
Ticket Description
Enter the description to be mentioned in the ticket. String variables containing the ticket description.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to start the activity. Integer variables containing the delay duration.
Output
Ticket Details
Returns the response as a 
HubSpotTicketCreatedResult
. Variables of type 
HubSpotTicketCreatedResult
 to store the ticket details.
How to Use
​
Drag and drop the "Create Ticket" activity onto the workflow.
Configure the properties by selecting the pipeline, ticket status, priority, and providing the ticket name, owner email, and description.
Optionally, configure the delay.
Execute the workflow to create the ticket in HubSpot.
Example:
Consider an example where the "Create Ticket" activity is used to add a new ticket to HubSpot:
Create Ticket:
  Display Name: "New Support Ticket"
  Pipeline: "Support Pipeline"
  Ticket Status: "Open"
  Priority: "High"
  Ticket Name: "Support Request"
  Ticket Owner Email: "support@example.com"
  Ticket Description: "Customer is experiencing technical issues."
  Result: hubSpotTicketResult
In this example, the activity creates a new ticket named "Support Request" with a specified pipeline, ticket status, priority, owner email, and description. The result of the operation is stored in the variable 
hubSpotTicketResult
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Ticket/Delete Ticket/index.html

Delete Ticket
AutomatR.HubSpot.Activities.DeleteTicket
The "Delete Ticket" activity in AutomatR is part of the HubSpot activities package, allowing users to delete an existing ticket based on the ticket ID from their HubSpot user account. This activity streamlines ticket management tasks within HubSpot.
Properties
​
Name
Description
Input
Ticket ID
Enter the ID of the ticket that needs to be deleted from the HubSpot account.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Outputs the result of the "Delete Ticket" operation, indicating whether the deletion was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Ticket" activity onto the workflow.
Configure the properties by specifying the ticket ID for deletion.
Optionally, configure the delay if needed.
Execute the workflow to delete the specified ticket in the HubSpot account.
Example:

Consider an example where the "Delete Ticket" activity is used to delete a ticket with ID "ticket123" from HubSpot:
Delete Ticket:
  Ticket ID: "ticket123"
In this example, the activity attempts to delete the ticket with ID "ticket123" from HubSpot. If the ticket ID exists, the activity will attempt to delete the ticket; otherwise, it will set the result to false.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Ticket/Update Ticket/index.html

Update Ticket
AutomatR.HubSpot.Activities.UpdateTicket
The "Update Ticket" activity in AutomatR is part of the HubSpot activities package, facilitating the update of existing tickets in a HubSpot user's account. This activity streamlines the process of keeping ticket information up-to-date within workflows.
Properties
​
Name
Description
Input
Priority
Select the updated priority values to be associated with the new ticket. Choose from available priority options.
Subject
Enter the updated title or name for the new ticket.
Ticket Description
Enter the updated description to be mentioned in the ticket.
Ticket ID
Enter the ticket ID for the ticket that you want to update.
Ticket Owner Email
Enter the updated owner's email address for the ticket.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Ticket" activity. Integer variables containing the delay duration (e.g., 5 for 5 seconds).
How to use:
Drag and drop the "Update Ticket" activity onto the workflow.
Configure the properties by specifying the ticket ID and updating any relevant information such as priority, subject, description, and owner's email.
Optionally, customize the display name and set a delay if necessary.
Execute the workflow to update the details of the specified ticket in HubSpot.
Example:

Consider an example where the "Update Ticket" activity is used to update the priority, subject, and owner's email of a ticket with ID "456" in HubSpot:
Update Ticket:
  Display Name: "Update Ticket Details"
  Ticket ID: "456"
  Priority: High
  Subject: "Updated Ticket Title"
  Ticket Description: "Enhanced features and improvements."
  Ticket Owner Email: "owner@example.com"
In this example, the activity updates the priority, subject, and owner's email of the ticket with ID "456" in HubSpot. Customize the inputs based on the ticket ID and information you want to update.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Ticket/Get All Tickets/index.html

Get All Tickets
AutomatR.HubSpot.Activities.GetAllTickets
The "Get All Tickets" activity in AutomatR is part of the HubSpot activities package, allowing users to retrieve a list of all tickets associated with their HubSpot user account. This activity simplifies the process of fetching ticket information for automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Limit
Enter the count to limit the number of tickets for retrieval. If not specified, a default limit of 10 tickets will be applied.
Output
Result
Returns a list of HubSpotTickets as a response. Variables of type 
List<HubSpotTickets>
 to store the retrieved ticket information.
How to use:
Drag and drop the "Get All Tickets" activity onto the workflow.
Optionally, configure the delay and limit for ticket retrieval.
Execute the workflow to retrieve a list of tickets associated with the HubSpot user account.
Example:

Consider an example where the "Get All Tickets" activity is used to retrieve a list of tickets with a limit of 5:
Get All Tickets:
  Limit: 5
  Result: ticketList
In this example, the activity fetches the latest 5 tickets associated with the HubSpot user account. The result is stored in the variable "ticketList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Ticket/Get Ticket/index.html

Get Ticket
AutomatR.HubSpot.Activities.GetTicket
The "Get Ticket" activity in AutomatR is part of the HubSpot activities package, designed to retrieve details for a ticket associated with your HubSpot user's account. This activity streamlines the process of obtaining information about specific tickets, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Enter the ticket ID for which information is required. String variables containing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Returns HubSpotTickets as a response. Variables of type 
HubSpotTickets
 to store ticket details.
How to use:
Drag and drop the "Get Ticket" activity onto the workflow.
Configure the properties by specifying the ticket ID for which details need to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified ticket.
Example:

Consider an example where the "Get Ticket" activity is used to retrieve information about a ticket with the ID "ABCDE123":
Get Ticket:
  Ticket ID: "ABCDE123"
  Result: ticketDetails
In this example, the activity fetches detailed information about the ticket with the ID "ABCDE123" from the HubSpot user account. The result is stored in the variable "ticketDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Company/Create Company/index.html

Create Company
AutomatR.HubSpot.Activities.CreateCompany
The "Create Company" activity in AutomatR for HubSpot enables the creation of a new company with various properties in a HubSpot user's account. This activity is part of the HubSpot activities package and simplifies the process of adding companies to HubSpot.
Properties
​
Name
Description
Input
Company Name
Enter the name of the company to be created. String variables containing the company name.
Domain
Enter the domain of the company, ensuring it is a valid domain. String variables containing the company domain.
Industry
Select the industry from the available options.
Custom Industry
Enter a custom value for the industry if not found in the predefined options. String variables containing the custom industry value.
Phone
Enter the phone number of the company. String variables containing the company phone number.
City
Enter the city where the company is located. String variables containing the company city.
State
Enter the state as per the company's address details. String variables containing the company state.
Zip
Enter the zip code as per the company's address details. String variables containing the company zip code.
Country
Enter the country name of the company. String variables containing the company country.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to start the activity. Integer variables containing the delay duration.
Output
Result
Returns the response as a 
HubSpotCompanyCreateResult
 object. Variables of type 
HubSpotCompanyCreateResult
 to store the operation result.
How to Use
​
Drag and drop the "Create Company" activity onto the workflow.
Configure the properties by specifying the company name, domain, industry, phone number, city, state, zip code, and country.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the company in HubSpot.
Example:
Consider an example where the "Create Company" activity is used to add a new company to HubSpot:
Create Company:
  Display Name: "Add New Company"
  Company Name: "ABC Corp"
  Domain: "abccorp.com"
  Industry: Technology
  Phone: "+1234567890"
  City: "New York"
  State: "NY"
  Zip: "10001"
  Country: "United States"
  Result: hubSpotCompanyResult
In this example, the activity creates a new company named "ABC Corp" with the domain "abccorp.com" in the Technology industry, located in New York, NY, with zip code "10001" and country "United States." The result of the operation is stored in the variable 
hubSpotCompanyResult
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Company/Get Company/index.html

Get Company
AutomatR.HubSpot.Activities.GetCompany
The "Get Company" activity in AutomatR is part of the HubSpot activities package, allowing users to retrieve detailed information about a company based on its ID from their HubSpot user account. This activity facilitates the retrieval of company data for use in automation workflows.
Properties
​
Name
Description
Input
Company ID
Enter the ID for the company for which information needs to be retrieved. String variables containing the company ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Returns the response as a HubSpotCompanyResult response. Variables of type 
HubSpotCompanyResult
 to store the retrieved company information.
How to use:
Drag and drop the "Get Company" activity onto the workflow.
Configure the properties by specifying the company ID for which information needs to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified company.
Example:

Consider an example where the "Get Company" activity is used to retrieve information about a company with the ID "ABC123":
Get Company:
  Company ID: "ABC123"
  Result: companyDetails
In this example, the activity fetches detailed information about the company with the ID "ABC123" from the HubSpot user account. The result is stored in the variable "companyDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Company/Delete Company/index.html

Delete Company
AutomatR.HubSpot.Activities.DeleteCompany
The "Delete Company" activity in AutomatR is part of the HubSpot activities package, allowing users to delete a company based on the company ID from their HubSpot user account. This activity provides a streamlined approach to manage company data within HubSpot.
Properties
​
Name
Description
Input
Company ID
Enter the ID of the company that needs to be deleted from the HubSpot account.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds) to start the activity.
Output
Result
Outputs the result of the "Delete Company" operation. True if the company is deleted successfully; otherwise, false.
How to use:
Drag and drop the "Delete Company" activity onto the workflow.
Configure the properties by specifying the company ID for deletion.
Optionally, configure the delay if needed.
Execute the workflow to delete the specified company in the HubSpot account.
Example:

Consider an example where the "Delete Company" activity is used to delete a company with ID "company123" from HubSpot:
Delete Company:
  Company ID: "company123"
  Result: isCompanyDeleted
In this example, the activity attempts to delete the company with ID "company123" from HubSpot. The result of the operation (success or failure) is stored in the Boolean variable "isCompanyDeleted" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/HubSpot/Company/Update Company/index.html

Update Company
AutomatR.HubSpot.Activities.UpdateCompany
The "Update Company" activity in AutomatR is part of the HubSpot activities package, facilitating the update of existing company properties in a HubSpot user's account based on the company ID. This activity streamlines the process of keeping company information up-to-date within workflows.
Properties
​
Name
Description
Input
Company ID
Enter the company ID for which properties need updating.
Name
Enter the updated name for the given company.
Domain
Enter the updated domain for the given company.
Phone
Enter the updated phone number for the given company.
City
Enter the updated city for the given company.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow.
Optional
-
Either one of the inputs (Name, Domain, Phone, City) is required along with the Company ID for the update. An error will be thrown if none of the inputs are provided.
Output
-
The activity does not have specific output properties. The update operation is performed internally.
How to use:
Drag and drop the "Update Company" activity onto the workflow.
Configure the properties by specifying the company ID and the properties you want to update (Name, Domain, Phone, City).
Optionally, customize the display name.
Execute the workflow to update the specified company information in HubSpot.
Example:

Consider an example where the "Update Company" activity is used to update the phone number and city for a company with ID "12345" in HubSpot:
Update Company:
  Display Name: "Update Company Info"
  Company ID: "12345"
  Phone: "+1234567890"
  City: "New City"
In this example, the activity updates the phone number to "+1234567890" and the city to "New City" for the company with ID "12345" in HubSpot. Customize the inputs based on the information you want to update for the specified company.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Download File/index.html

Download File
AutomatR.GoogleDrive.Activities.DownloadFile
The "Download File" activity in AutomatR is part of the Google Drive activities package, enabling automation processes to download a file from a specified folder within a Google Drive user's account to a local drive. This activity simplifies the process of retrieving files from Google Drive for further processing.
Properties
​
Name
Description
Input
File Path
Specifies the full path of the file to be downloaded from Google Drive, including the file name and its location within the user's account. String variables containing the file path. Example: 
"Root\\myFolder\\1.xlsx"
.
Download Path
Specifies the full path of the local drive where the downloaded file should be saved. String variables containing the local drive path. Example: 
"C:\\downloads"
.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the file download operation was successful (
true
) or encountered errors (
false
). Variables of relevant types (e.g., Boolean variables) can store the operation result.
How to use:
​
Drag and drop the "Download File" activity onto the workflow.
Configure the properties by specifying the file path within Google Drive and the local drive path for downloading.
Optionally, configure the entry delay.
Execute the workflow to download the specified file from Google Drive to the local drive.
Example:
​
Consider an example where the "Download File" activity is used to download a file named "1.xlsx" from a folder named "myFolder" within Google Drive and save it to the local drive "C:\downloads":
Download File:
  Entry Delay: 5
  File Path: "Root\\myFolder\\1.xlsx"
  Download Path: "C:\\downloads"
  Result: isDownloadSuccessful
In this example, the activity waits for 5 seconds (specified by the entry delay) before executing the operation to download the "1.xlsx" file from the "myFolder" folder within Google Drive. The downloaded file is saved to the "C:\downloads" local drive. The result of the operation (success or failure) is stored in the Boolean variable "isDownloadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Get Files/index.html

Get Files
AutomatR.GoogleDrive.Activities.GetFiles
The "Get Files" activity in AutomatR is part of the Google Drive activities package, allowing the retrieval of a list of files from a specified folder in the user's Google Drive account. This activity streamlines the process of obtaining file information for further automation workflows.
Properties
​
Name
Description
Input
Folder
Enter the full path of the folder containing files to be retrieved (e.g., "Root
\
RetrieveAllFileshere"). String variables containing the folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds i.e. 5) to start the activity. Integer variables containing the delay duration.
Output
Get All Files Response
Returns a list of the files available in the specified folder. Variables of type 
List<Google.Apis.Drive.v3.Data.File>
 to store the file information.
How to use:
Drag and drop the "Get Files" activity onto the workflow.
Configure the properties by specifying the folder path from which you want to retrieve files.
Optionally, configure the delay and customize the display name.
Execute the workflow to obtain a list of files from the specified folder in Google Drive.
Example:

Consider an example where the "Get Files" activity is used to retrieve files from a folder named "Documents" within the user's Google Drive:
Get Files:
  Display Name: "Retrieve Documents"
  Folder: "Root\\Documents"
  Get All Files Response: fileList
In this example, the activity retrieves a list of files from the "Documents" folder in Google Drive, and the file information is stored in the variable "fileList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Get File Permissions/index.html

Get File Permissions
AutomatR.GoogleDrive.Activities.GetFilePermissions
The "Get File Permissions" activity in AutomatR is part of the Google Drive activities package, facilitating the retrieval of permissions associated with a specific file in Google Drive. This activity streamlines the process of obtaining detailed information about who has access to a particular file and their corresponding roles.
Properties
​
Name
Description
Input
File Name
Specifies the name of the file for which you want to retrieve permissions. String variables containing the file name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get File Permissions" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 1000 milliseconds or 1 sec, i.e., 1.
Output
Permissions
Outputs the permissions associated with the specified file. The information includes the role and type of each permission. Variables of relevant types to store the permissions data.
How to use:
Drag and drop the "Get File Permissions" activity onto the workflow.
Configure the properties by specifying the file name for which you want to retrieve permissions.
Optionally, configure the delay and customize the display name.
Execute the workflow to obtain detailed permissions information for the specified file in Google Drive.
Example:

Consider an example where the "Get File Permissions" activity is used to retrieve permissions for a file named "Document.txt" in the user's Google Drive:
Get File Permissions:
  Display Name: "Get Permissions for Document"
  File Name: "Document.txt"
  Permissions: filePermissions
In this example, the activity retrieves and outputs the permissions associated with the "Document.txt" file in the variable "filePermissions" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Delete File/index.html

Delete File
AutomatR.GoogleDrive.Activities.DeleteFile
The "Delete File" activity in AutomatR is part of the Google Drive activities package, enabling automation processes to delete a specific file from a specified folder within a Google Drive user's account. This activity provides a streamlined way to manage and delete files in Google Drive.
Properties
​
Name
Description
Input
File Path
Specifies the full file path, including the file name and its location within Google Drive, of the file to be deleted. String variables containing the file path. Example: 
"Root\\deletefilefrom\\1.xlsx"
.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Entry Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the file deletion operation was successful (
true
) or encountered errors (
false
). Variables of relevant types (e.g., Boolean variables) can store the operation result.
How to use:
​
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the file path within Google Drive.
Optionally, configure the entry delay.
Execute the workflow to delete the specified file from Google Drive.
Example:
​
Consider an example where the "Delete File" activity is used to delete a file named "1.xlsx" from a folder named "deletefilefrom" within Google Drive:
Delete File:
  Entry Delay: 5
  File Path: "Root\\deletefilefrom\\1.xlsx"
  Result: isDeleteSuccessful
In this example, the activity waits for 5 seconds (specified by the entry delay) before executing the operation to delete the "1.xlsx" file from the "deletefilefrom" folder within Google Drive. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Share File/index.html

Share File
AutomatR.GoogleDrive.Activities.ShareFile
The "Share File" activity in AutomatR is part of the Google Drive activities package, allowing automation processes to share files with intended recipients within the Google Drive user's account. This activity streamlines the process of sharing files, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
File Name
Specifies the full path of the file to be shared on Google Drive. It should include the file name and path within Google Drive (e.g., "Root
\
myFolder
\
1.xlsx"). String variables containing the file name.
Share With Email Address
Specifies the email address to which the Google Drive file should be shared. String variables containing the email address of the intended recipient.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Share File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
Output
Result
Outputs the result of the "Share File" operation, indicating whether the file sharing was successful or encountered any errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Share File" activity onto the workflow.
Configure the properties by specifying the file name and the email address of the intended recipient on Google Drive.
Optionally, configure the delay and customize the display name.
Execute the workflow to share the specified file on Google Drive.
Example:

Consider an example where the "Share File" activity is used to share a file named "1.xlsx" from a folder within Google Drive with the email address "
user@example.com
":
Share File:
  Display Name: "Share Excel File"
  File Name: "Root\\myFolder\\1.xlsx"
  Share With Email Address: "user@example.com"
  Result: isShareSuccessful
In this example, the activity shares the "1.xlsx" file with the email address "
user@example.com
" on Google Drive. The result of the operation (success or failure) is stored in the Boolean variable "isShareSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Download Folder/index.html

Download Folder
AutomatR.GoogleDrive.Activities.DownloadFolder
The "Download Folder" activity in AutomatR is part of the Google Drive activities package, allowing automation workflows to download an entire folder from a specified path within the user's Google Drive to a local drive. This activity simplifies the process of retrieving multiple files and subfolders, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Folder Name
Specifies the path of the folder on Google Drive to be downloaded. It should be in the format "Root\DownloadThis\". String variables containing the folder path.
Download Path
Specifies the full path on the local drive where the downloaded folder will be saved (e.g., "C:\downloads\"). String variables containing the local download path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download Folder" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean result based on the success or failure of the folder download operation. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Download Folder" activity onto the workflow.
Configure the properties by specifying the folder name on Google Drive, the local download path, and optionally set a delay or customize the display name.
Execute the workflow to download the specified folder from Google Drive to the local drive.
Example:

Consider an example where the "Download Folder" activity is used to download a folder named "MyDocuments" from the root directory of the user's Google Drive:
Download Folder:
  Display Name: "Download MyDocuments"
  Folder Name: "Root\MyDocuments\"
  Download Path: "C:\Users\UserName\Downloads\"
  Result: isDownloadSuccessful
In this example, the activity downloads the entire "MyDocuments" folder from the root directory of the user's Google Drive to the specified local download path. The result of the operation (success or failure) is stored in the Boolean variable "isDownloadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Delete All Files/index.html

Delete all Files
TasqFlow.GoogleDrive.Activities.DeleteAllFiles
The "Delete all Files" activity in TasqFlow is part of the Google Drive activities package, enabling automation processes to delete all files within a specified Google Drive account. This activity provides a convenient way to clean up files within a drive.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete all Files" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Delete all Files" activity onto the workflow.
Optionally, configure the entry delay.
Execute the workflow to delete all files within the specified Google Drive account.
Example:
​
Consider an example where the "Delete all Files" activity is used to delete all files within a Google Drive account:
Delete all Files:
  Entry Delay: 5
In this example, the activity waits for 5 seconds (specified by the entry delay) before executing the operation to delete all files within the Google Drive account.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Copy File/index.html

Copy File
AutomatR.GoogleDrive.Activities.CopyFile
The "Copy File" activity in AutomatR is part of the Google Drive activities package, designed for seamless integration with Google Drive. This custom activity allows you to copy a file to a specified destination folder on the user's Google Drive account. This facilitates efficient file management and copying within Google Drive.
Properties
​
Name
Description
Input
Source File Path
Specifies the file name that needs to be copied to the destination folder (e.g., "Root
\
CopyFileFrom
\
1.xlsx"). String variables containing the source file path.
Destination Folder
Specifies the destination folder on Google Drive where the file should be copied (e.g., "Root
\
DestinationFolder"). String variables containing the destination folder path.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs true or false based on the success of the copy file operation. Boolean variables to store the operation result.
How to use:
Drag and drop the "Copy File" activity onto the workflow.
Configure the properties by specifying the source file path, destination folder, and optionally set a delay.
Place the "Copy File" activity within a "Google Drive Scope" to ensure proper authentication and access to the Google Drive service.
Execute the workflow to copy the specified file to the designated folder on Google Drive.
Example:

Consider an example where the "Copy File" activity is used to copy a file named "document.xlsx" from the "Root
\
CopyFileFrom" folder to the "Root
\
DestinationFolder" on Google Drive:
Copy File:
  Delay: 1
  Source File Path: "Root\\CopyFileFrom\\document.xlsx"
  Destination Folder: "Root\\DestinationFolder"
  Result: isCopySuccessful
In this example, the activity copies the "document.xlsx" file from the source folder to the destination folder on Google Drive. The result of the operation (success or failure) is stored in the Boolean variable "isCopySuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Google Drive Scope/index.html

Google Drive Scope
AutomatR.GoogleDrive.Activities.GoogleDriveScope
The "Google Drive Scope" activity in AutomatR is part of the Google Drive activities package, allowing you to set up Google Drive with OAuth authentication for a user. This activity is a fundamental step for accessing and managing Google Drive files within your automation workflows.
Properties
​
Name
Description
Input
clientId
Enter the client ID for your Google Drive user's account. String variables containing the client ID.
clientSecretKey
Enter the client secret key for your Google Drive user's account. String variables containing the client secret key.
RefreshToken
Click to browse for the refresh token and select the mail ID associated with your Google Drive account. This enables the capture of the API token required to access your Google Drive account. Use the provided editor for ease of use.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example 5 seconds i.e. 5) to start the activity. Integer variables containing the delay duration.
Output
(Internal) DriveService
Internal output containing the initialized Google Drive service. This output is used internally for subsequent Google Drive activities.
How to use:
Drag and drop the "Google Drive Scope" activity onto the workflow.
Configure the properties by providing the client ID, client secret key, and refresh token.
Optionally, configure the delay and customize the display name.
Execute the workflow to set up Google Drive authentication for the specified user.
Example:

Consider an example where the "Google Drive Scope" activity is used to set up Google Drive authentication for a user with the following configuration:
Google Drive Scope:
  Display Name: "Authenticate Google Drive"
  clientId: "your_client_id"
  clientSecretKey: "your_client_secret"
  RefreshToken: (Browse and select refresh token for the associated Google Drive account)
In this example, the activity sets up Google Drive authentication using the provided client ID, client secret key, and refresh token.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Create Folder/index.html

Create Folder
AutomatR.GoogleDrive.Activities.CreateFolder
The "Create Folder" activity in AutomatR is part of the Google Drive activities package, enabling automation processes to create folders within a Google Drive account. This activity simplifies the process of folder creation, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Parent Folder
Specifies the parent folder path where the new child folder needs to be created. String variables containing the parent folder path.
Folder Name
Specifies the name of the folder to be created. It should not contain a backslash (
\
). String variables containing the folder name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Folder" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Create Folder" operation, indicating whether the folder creation was successful or encountered errors. Boolean variables to store the operation result.
How to use:
​
Drag and drop the "Create Folder" activity onto the workflow.
Configure the properties by specifying the parent folder path and the name of the folder to be created.
Optionally, configure the delay.
Execute the workflow to create the specified folder within Google Drive.
Example:
​
Consider an example where the "Create Folder" activity is used to create a folder named "Documents" within the "Root" directory of Google Drive:
Create Folder:
  Parent Folder: "/Root/"
  Folder Name: "Documents"
  Result: isFolderCreated
In this example, the activity creates the "Documents" folder within the "Root" directory of Google Drive. The result of the operation (success or failure) is stored in the Boolean variable "isFolderCreated" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Upload/index.html

Upload
AutomatR.GoogleDrive.Activities.Upload
The "Upload" activity in AutomatR is part of the Google Drive activities package, allowing automation processes to upload files from the local drive to a specified folder within the Google Drive user's account. This activity streamlines the process of uploading files, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Upload File Path
Specifies the path of the file on your local drive that needs to be uploaded to Google Drive. It should include the file name and path (e.g., "D:
\
myfiles
\
uploadthis
\
1.txt"). String variables containing the file path.
Folder Name Or Path
Specifies the folder name or path on Google Drive where the file should be uploaded. It represents the location within Google Drive. String variables containing the folder name or path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Upload" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. For example, if the delay is 1000 milliseconds or 1 sec, set it to 1.
Output
Result
Outputs the result of the "Upload" operation, indicating whether the file upload was successful or encountered any errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Upload" activity onto the workflow.
Configure the properties by specifying the local file path and the folder name or path within Google Drive.
Optionally, configure the delay and customize the display name.
Execute the workflow to upload the specified file to the specified folder on Google Drive.
Example:

Consider an example where the "Upload" activity is used to upload a file named "1.txt" from the local drive to a folder named "Uploadhere" within Google Drive:
Upload:
  Display Name: "Upload Text File"
  Upload File Path: "D:\\myfiles\\uploadthis\\1.txt"
  Folder Name Or Path: "Root\\Uploadhere"
  Result: isUploadSuccessful
In this example, the activity uploads the "1.txt" file to the "Uploadhere" folder within Google Drive. The result of the operation (success or failure) is stored in the Boolean variable "isUploadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Google Drive/Move File To Folder/index.html

Move File to Folder
AutomatR.GoogleDrive.Activities.MoveFileToFolder
The "Move File to Folder" activity in AutomatR is part of the Google Drive activities package, facilitating the movement of files from one folder to another within a user's Google Drive account. This activity streamlines file management tasks in Google Drive, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
File Name To Be Moved
Specifies the name of the file to be moved, including the file extension. String variables containing the file name.
Destination Folder
Specifies the path of the destination folder on your Google Drive to which the file should be moved. String variables containing the destination folder path.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move File to Folder" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs true or false based on the success of the move file operation. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Move File to Folder" activity onto the workflow.
Configure the properties by specifying the file name and destination folder path within the Google Drive account.
Optionally, configure the delay.
Execute the workflow to move the specified file within Google Drive.
Example:

Consider an example where the "Move File to Folder" activity is used to move a file named "document.txt" from one folder to another within Google Drive:
Move File to Folder:
  File Name To Be Moved: "document.txt"
  Destination Folder: "Root/Folder2/"
  Result: isMoveSuccessful
In this example, the activity moves the "document.txt" file from its current location to the "Folder2" directory within Google Drive. The result of the operation (success or failure) is stored in the Boolean variable "isMoveSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Json/Convert To JSON/index.html

Convert To JSON
AutomatR.DefaultActivities.Datatable.ConvertToJSON
The "Convert To JSON" activity in AutomatR is part of the JSON activities package, designed to transform an object into a properly formatted JSON string representation. This activity is particularly useful for converting structured data, such as DataTables or custom objects, into a JSON format for further processing or storage.
Properties
​
Name
Description
Input
Data
Specifies the object data that will undergo conversion to JSON format. This can include DataTables, custom objects, or other structured data types. 
Object
 variables containing the data to be converted.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Convert To JSON" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
JSON
Outputs the result of the conversion, providing a JSON string representation of the input data. 
String
 variables to store the JSON-formatted data for further use in the workflow.
How to use:
Drag and drop the "Convert To JSON" activity onto the workflow.
Configure the properties by specifying the object data to be converted to JSON.
Optionally, configure the delay.
Execute the workflow to transform the specified data into a JSON string.
Example:

Consider an example where the "Convert To JSON" activity is used to convert a DataTable into a JSON string:
Convert To JSON:
  Data: dataTable
  JSON: jsonString
In this example, the activity converts the data within the "dataTable" variable into a JSON-formatted string, storing the result in the "jsonString" variable. Adjust the input properties as needed to accommodate various scenarios in your automation workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/Json/Deserialize Json Array/index.html

Deserialize JSON Array
AutomatR.DeafultActivities.API.DeserializeJSONArray
The "Deserialize JSON Array" activity in AutomatR is designed to deserialize a JSON array string into a 
Newtonsoft.Json.Linq.JArray
 variable. This activity is particularly useful for handling and processing JSON arrays within automation workflows.
Properties
​
Name
Description
Input
JSON
Specifies the JSON array string that needs to be deserialized. This input is required for the activity to function correctly. Provide a string containing the JSON array data, such as 
{'TenancyName': 'Documentation'}
. 
String
 variables containing the JSON array data.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Deserialize JSON Array" activity. This optional delay can be used to manage synchronization or pacing issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Output
JSON Array
Outputs the deserialized JSON array as a Newtonsoft.Json.Linq.JArray variable. This variable can be used for further processing of the JSON array data within the workflow. Variables of type 
JArray
 to store the deserialized JSON array.
How to use:
Drag and drop the "Deserialize JSON Array" activity onto the workflow.
Configure the properties by specifying the JSON array string to be deserialized.
Optionally, configure the delay to control the timing of the activity.
Execute the workflow to deserialize the specified JSON array string.
Example:

Consider an example where the "Deserialize JSON Array" activity is used to parse a JSON array string representing a list of tenants:
Deserialize JSON Array:
  JSON: "{'TenancyList': [{'Name': 'Documentation'}, {'Name': 'Automation'}]}"
  Delay: 3
  JSON Array: deserializedJsonArray
In this example, the activity deserializes the provided JSON array string after a delay of 3 seconds. The deserialized JSON array object is stored in the variable 
deserializedJsonArray
 for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Json/Deserialize Json/index.html

Deserialize JSON
AutomatR.DeafultActivities.API.DeserializeJSON
The "Deserialize JSON" activity in AutomatR is designed to deserialize a JSON string into a 
Newtonsoft.Json.Linq.JObject
 variable. This activity is particularly useful for processing JSON data within automation workflows.
Properties
​
Name
Description
Input
JSON
Specifies the JSON string that needs to be deserialized. This input is required for the activity to function correctly. Provide a string containing the JSON data, such as 
{'TenancyName': 'Documentation'}
. 
String
 variables containing the JSON data.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Deserialize JSON" activity. This optional delay can be used to manage synchronization or pacing issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Output
JSON Object
Outputs the deserialized JSON as a 
Newtonsoft.Json.Linq.JObject
 variable. This variable can be used for further processing of the JSON data within the workflow. Variables of type 
JObject
 to store the deserialized JSON.
How to use:
Drag and drop the "Deserialize JSON" activity onto the workflow.
Configure the properties by specifying the JSON string to be deserialized.
Optionally, configure the delay to control the timing of the activity.
Execute the workflow to deserialize the specified JSON string.
Example:

Consider an example where the "Deserialize JSON" activity is used to parse a JSON string representing tenant information:
Deserialize JSON:
  JSON: "{'TenancyName': 'Documentation'}"
  Delay: 3
  JSON Object: deserializedJsonObject
In this example, the activity deserializes the provided JSON string after a delay of 3 seconds. The deserialized JSON object is stored in the variable 
deserializedJsonObject
 for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Transition/Update Transition/index.html

Update Transition
AutomatR.Jira.Activities.UpdateTransition
The "Update Transition" activity in AutomatR's Jira package allows you to update the status of a Jira ticket based on the provided ticket ID and transition ID. This activity is valuable for managing the workflow of Jira issues, enabling automation of status transitions.
Properties
​
Name
Description
Input
Ticket ID
Enter the Ticket ID for the issue whose transition ID is required. String variables containing the Ticket ID.
Ticket Key
Enter the Ticket Key for the issue whose transition ID is required. String variables containing the Ticket Key.
Transition ID
Enter the Transition ID of the issue for which the status update is required. String variables containing the Transition ID.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Transition" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns True or False based on the inputs provided. Variables of Boolean type to store the operation result.
How to use:
Drag and drop the "Update Transition" activity onto the workflow.
Configure the properties by providing the Ticket ID, Ticket Key, and Transition ID.
Optionally, configure the delay.
Execute the workflow to update the status of the specified Jira issue.
Example:

Consider an example where the "Update Transition" activity is used to transition a Jira issue with Ticket ID "JRA-123" to a status with Transition ID "21":
Update Transition:
  Ticket ID: "JRA-123"
  Transition ID: "21"
  Result: isTransitionSuccessful
In this example, the activity updates the status of the Jira issue with Ticket ID "JRA-123" based on the Transition ID "21". The result of the operation (success or failure) is stored in the Boolean variable "isTransitionSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Transition/Get Transitions/index.html

Get Transitions
AutomatR.Jira.Activities.GetTransitions
The "Get Transitions" activity in AutomatR's Jira package allows you to retrieve detailed information about possible transitions for a given Jira issue. This activity is useful for obtaining a list of available transitions that can be performed on a specific issue, facilitating workflow automation in Jira.
Properties
​
Name
Description
Input
Ticket ID
Enter the Jira issue's ID for which transition details are required. String variables containing the issue's ID.
Ticket Key
Enter the Jira issue's key for which transition details are required. String variables containing the issue's key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Transitions" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs all possible transitions for the provided Jira issue. Variables of dynamic type to store the transition details.
How to use:
Drag and drop the "Get Transitions" activity onto the workflow.
Optionally, configure the delay.
Provide either the Jira issue's ID or key.
Execute the workflow to retrieve details about possible transitions for the specified Jira issue.
Example:

Consider an example where the "Get Transitions" activity is used to obtain a list of possible transitions for a Jira issue with the key "ABC-123":
Get Transitions:
  Ticket Key: "ABC-123"
  Result: availableTransitions
In this example, the activity fetches all possible transitions for the Jira issue with the key "ABC-123". The result, which includes information about available transitions, is stored in the variable "availableTransitions" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Comment/Delete Comment/index.html

Delete Comment
AutomatR.Jira.Activities.DeleteComment
The "Delete Comment" activity in AutomatR's Jira package utilizes the Jira API to delete a comment associated with an issue. This activity provides a straightforward method to manage comments within Jira, allowing users to remove specific comments as part of their automation workflows.
Properties
​
Name
Description
Input
Comment ID
Specifies the ID of the comment to be deleted. This is the unique identifier for an existing comment on a Jira issue. String variables containing the comment ID.
Ticket ID
Specifies the ID of the Jira issue for which the comment will be deleted. Either Ticket ID or Ticket Key is required. String variables containing the Jira issue ID.
Ticket Key
Specifies the key of the Jira issue for which the comment will be deleted. Either Ticket ID or Ticket Key is required. String variables containing the Jira issue key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Comment" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the deletion of the comment was successful (True) or encountered errors (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Comment" activity onto the workflow.
Configure the properties by specifying the comment ID and either the Ticket ID or Ticket Key.
Optionally, configure the delay.
Execute the workflow to delete the specified comment associated with the specified Jira issue.
Example:

Consider an example where the "Delete Comment" activity is used to remove a comment with the ID "123" from the Jira issue with the key "PROJ-456":
Delete Comment:
  Comment ID: "123"
  Ticket Key: "PROJ-456"
  Result: isCommentDeleted
In this example, the activity deletes the comment with the ID "123" from the Jira issue "PROJ-456." The result of the operation (success or failure) is stored in the Boolean variable "isCommentDeleted" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Comment/Get Comment/index.html

Get Comment
AutomatR.Jira.Activities.GetComment
The "Get Comment" activity in AutomatR's Jira package utilizes the Jira API to retrieve specific details about a comment associated with a particular issue. This activity is valuable for accessing and processing comment data within Jira for enhanced automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Enter the Ticket ID of the Jira issue for which the comment needs to be fetched. String variables containing the Ticket ID.
Comment ID
Enter the ID of the existing comment to be fetched. This is a required field and is used to identify the specific comment. String variables containing the Comment ID.
Ticket Key
Enter the Ticket Key of the Jira issue for which the comment needs to be fetched. String variables containing the Ticket Key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Comment" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object containing details about the fetched comment. Variables of relevant types (e.g., dynamic variables) to store comment details.
How to use:
Drag and drop the "Get Comment" activity onto the workflow.
Configure the properties by specifying the Ticket ID, Comment ID, or Ticket Key.
Optionally, configure the delay.
Execute the workflow to retrieve details about the specified comment within the Jira issue.
Example:

Consider an example where the "Get Comment" activity is used to retrieve details about a specific comment within a Jira issue:
Get Comment:
  Ticket ID: "JIRA-123"
  Comment ID: "456"
  Result: commentDetails
In this example, the activity fetches details about the comment with ID "456" associated with the Jira issue "JIRA-123". The result, which includes details about the comment, is stored in the dynamic variable "commentDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Comment/Update Comments/index.html

Update Comment
AutomatR.Jira.Activities.UpdateComment
The "Update Comment" activity in AutomatR's Jira package uses the Jira API to update a specific comment for a particular issue. This activity enhances collaboration and communication by allowing you to modify existing comments associated with Jira issues.
Properties
​
Type
Description
Input
Comment
The comment text you wish to add to an Issue. This field supports only strings or 
String
 variables.
Comment ID
The comment text you wish to get from an Issue ID. This field supports only strings or 
String
 variables.
Ticket ID
The Ticket ID of the Issue. This field supports only strings or 
String
 variables.
Ticket Key
The Ticket Key of the Issue. This field supports only strings or 
String
 variables.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Comment" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
A Comment object. This field supports only Comment variables. The variable you create for this property can be used as an input variable in subsequent activities (e.g., Delete Comment).
How to use:
Drag and drop the "Update Comment" activity onto the workflow.
Configure the properties by providing the Ticket ID or Ticket Key, Comment ID, and the updated comment text.
Optionally, configure the delay.
Execute the workflow to update the specified comment for the Jira issue.
Example:

Consider an example where the "Update Comment" activity is used to modify an existing comment for a Jira issue:
Update Comment:
  Ticket ID: "JRA-123"
  Comment ID: "456"
  Comment: "This is the updated comment text."
  Result: updatedComment
In this example, the activity updates the comment with ID "456" for the Jira issue with Ticket ID "JRA-123". The updated comment text is provided, and the result of the operation is stored in the variable "updatedComment" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Comment/Get Comments/index.html

Get Comments
AutomatR.Jira.Activities.GetComments
The "Get Comments" activity in AutomatR's Jira package utilizes the Jira API to retrieve all comments associated with a specific issue. This activity is useful for fetching and processing comment data within Jira for enhanced automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Enter the Ticket ID of the Jira issue for which all comments need to be fetched. String variables containing the Ticket ID.
Ticket Key
Enter the Ticket Key of the Jira issue for which all comments need to be fetched. String variables containing the Ticket Key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Comments" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object containing details about all comments associated with the specified Jira issue. Variables of relevant types (e.g., dynamic variables) to store comment details.
How to use:
Drag and drop the "Get Comments" activity onto the workflow.
Configure the properties by specifying the Ticket ID or Ticket Key.
Optionally, configure the delay.
Execute the workflow to retrieve details about all comments within the specified Jira issue.
Example:

Consider an example where the "Get Comments" activity is used to retrieve all comments associated with a Jira issue:
Get Comments:
  Ticket ID: "JIRA-123"
  Result: allComments
In this example, the activity fetches details about all comments associated with the Jira issue "JIRA-123". The result, which includes details about all comments, is stored in the dynamic variable "allComments" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Comment/Add Comment/index.html

Add Comment
AutomatR.Jira.Activities.AddComment
The "Add Comment" activity in AutomatR's Jira package utilizes the Jira API to add a comment to a specific JIRA issue. This activity streamlines the process of updating issue comments, enhancing automation capabilities for issue tracking and collaboration.
Properties
​
Name
Description
Input
Comment
Specifies the text of the comment to be added to the JIRA issue. String variables containing the comment text.
Ticket ID
Specifies the Ticket ID of the JIRA issue to which a comment should be added. Either the "Ticket ID" or "Ticket Key" must be provided. String variables containing the Ticket ID.
Ticket Key
Specifies the Ticket Key of the JIRA issue to which a comment should be added. Either the "Ticket ID" or "Ticket Key" must be provided. String variables containing the Ticket Key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Comment" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object when the comment is added successfully. Variables of relevant types (e.g., dynamic variables) to store the result.
Validation:
The activity validates whether either the "Ticket ID" or "Ticket Key" is provided. If neither is provided, a validation error is raised.
How to use:
Drag and drop the "Add Comment" activity onto the workflow.
Configure the properties by specifying the Ticket ID or Ticket Key and providing the text of the comment to be added.
Optionally, configure the delay and customize the display name.
Execute the workflow to add the comment to the specified JIRA issue.
Example:

Consider an example where the "Add Comment" activity is used to add a comment to a JIRA issue with the Ticket Key "PROJ-123":
Add Comment:
  Delay: 2
  Ticket Key: "PROJ-123"
  Comment: "This is a sample comment."
  Result: commentResult
In this example, the activity waits for 2 seconds before executing, adds the comment "This is a sample comment" to the JIRA issue with the Ticket Key "PROJ-123." The result of the operation is stored in the dynamic variable "commentResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/User/Get User/index.html

Get User
AutomatR.Jira.Activities.GetUser
The "Get User" activity in AutomatR's Jira package leverages the Jira API to retrieve user details based on the account ID. This activity is useful for obtaining information about a specific user in Jira, enhancing the capabilities of workflow automation.
Properties
​
Name
Description
Input
Account ID
Enter the account ID for which user details are required. String variables containing the account ID.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get User" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a list of users based on the provided account ID. Variables of type 
Users
 to store the user details.
How to use:
Drag and drop the "Get User" activity onto the workflow.
Optionally, configure the delay.
Provide the account ID for the user whose details you want to retrieve.
Execute the workflow to obtain user details based on the specified account ID.
Example:

Consider an example where the "Get User" activity is used to retrieve details for a user with the account ID "abc123":
Get User:
  Account ID: "abc123"
  Result: userDetails
In this example, the activity fetches user details for the user with the account ID "abc123". The result, which includes information about the user, is stored in the variable "userDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/User/Get All Users/index.html

Get All Users
AutomatR.Jira.Activities.GetAllUsers
The "Get All Users" activity in AutomatR's Jira package utilizes the Jira API to retrieve details about all users associated with a Jira organization. This activity is designed to provide a list of users, enabling effective user management within automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Users" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a list of objects, each representing details about a user in the Jira organization. Variables of relevant types (e.g., List of 
Users
 variables) to store user information.
How to use:
Drag and drop the "Get All Users" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve information about all users associated with the Jira organization.
Example:

Consider an example where the "Get All Users" activity is used to retrieve a list of all users within the Jira organization:
Get All Users:
  Result: allUsersData
In this example, the activity fetches information about all users associated with the Jira organization. The result, which includes details about each user, is stored in the List of 
Users
 variable "allUsersData" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Project/Get All Boards/index.html

Get All Boards
AutomatR.Jira.Activities.GetAllBoards
The "Get All Boards" activity in AutomatR's Jira package utilizes the Jira API to retrieve a list of boards. This activity is designed to provide comprehensive information about boards associated with a Jira organization, facilitating efficient project management within automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Boards" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object listing all the project details based on the JIRA organization. Variables of relevant types (e.g., dynamic variables) to store the board information.
How to use:
Drag and drop the "Get All Boards" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve information about all boards associated with the Jira organization.
Example:

Consider an example where the "Get All Boards" activity is used to retrieve a list of all boards within the Jira organization:
Get All Boards:
  Result: allBoardsData
In this example, the activity fetches information about all boards associated with the Jira organization. The result, which includes details about each board, is stored in the dynamic variable "allBoardsData" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Project/Jira Scope/index.html

Jira Scope
AutomatR.Jira.Activities.JiraScope
The "Jira Scope" activity in AutomatR's Jira package establishes a connection between AutomatR and your Jira environment using Token Authentication. This connection authorizes a robot to call Jira APIs and access resources on your behalf. The activity creates a scoped environment for Jira-related activities within your workflow.
The Jira Scope activity establishes a connection to a specified Jira instance and provides a scope for all subsequent activities.
Prerequisite
​
To obtain an 
Access Token
 from Jira, you need to follow these steps:
Log in to your Jira account as an administrator or a user with administrative privileges.
Navigate to the Jira settings by clicking on the "Settings" gear icon in the top-right corner and selecting "System" from the dropdown menu.
In the System settings, locate and click on "OAuth (under Jira Settings)."
On the OAuth settings page, click on "Add Consumer" or "Create and link your app now" to create a new OAuth consumer or app.
Provide a name for your OAuth consumer or app. This name is for identification purposes and can be any name you choose.
Fill in the required information, such as the "Callback URL" (where the authorization response will be sent), "Description," and "URL."
Configure the permissions or scopes for the OAuth consumer or app based on your requirements. Scopes define the access level and permissions your app will have when making API requests. Select the appropriate scopes for your use case.
Once you have completed the configuration, click on the "Save" or "Create" button to create the OAuth consumer or app.
After saving, you can see the generated 
Access Token
 for your Jira app. This token can be used for authentication in AutomatR when making API requests to the Jira API.
NOTE:
 Make sure to securely store your 
Access Token
 and treat it as sensitive information. Do not share it publicly or expose it in your application's source code.
NOTE:
 The steps provided are based on the information available up to the cutoff in September 2021. The Jira website and interface may have been updated since then, so it's recommended to refer to the official Jira documentation for the most up-to-date instructions on obtaining an 
Access Token
.
For more information and before you build your first automation project, see the Jira Setup procedure.
Enter the URL of your Jira server (Instance URL) into the Jira Scope activity
Enter your Token Credentials (
Access Token
 and 
User email
) to complete the information needed to establish an authenticated connection to your Jira application.
After establishing a connection, a parent Jira Scope activity can output a record of the connection in a 
Jira Connection
 object (Jira Connection) that you can use in subsequent child scope activities.
The following steps and message sequence diagram is an example of how the activity works from design time (i.e., the activity dependencies and input/output properties) to run time.
Add the Jira Scope activity to your project.
Enter the Access Token Authentication value in the input properties.
Enter the Jira Instance URL and email address in the input properties.

Properties
​
Name
Description
Input
Access Token
Enter the API access token when authentication type is API Authentication. String variables containing the API access token.
Instance URL
Enter the URL of the Jira site to work with activities. String variables containing the Jira site URL.
User Email
Enter the email address linked to the Jira account. String variables containing the user's email.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Body
Represents the sequence of activities to be executed within the Jira scope. Drag and drop other Jira activities into this sequence to perform operations within the scoped Jira environment.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Jira Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Jira Scope" activity onto the workflow.
Configure the properties by providing the user email, API access token, and Jira site URL.
Optionally, configure the delay.
Drag and drop other Jira activities into the "Body" to perform operations within the scoped Jira environment.
Execute the workflow to establish a connection and perform Jira activities.
Example:

Consider an example where the "Jira Scope" activity is used to establish a connection to the Jira environment:
Jira Scope:
  User Email: "user@example.com"
  Access Token: "your-api-token"
  Instance URL: "https://your-jira-instance.com"
  Body:
    - Get User
    - Create Issue
    - Transition Issue
In this example, the "Jira Scope" activity establishes a connection using the provided user email, API access token, and Jira site URL. Subsequent Jira activities (e.g., Get User, Create Issue, Transition Issue) are placed within the "Body" to execute operations within the scoped Jira environment.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Project/Get All Projects/index.html

Get All Projects
AutomatR.Jira.Activities.GetAllProjects
The "Get All Projects" activity in AutomatR's Jira package utilizes the Jira API to retrieve details about all projects associated with a Jira organization. This activity is designed to provide comprehensive project information, facilitating effective project management within automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Projects" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a list of objects, each representing details about a project in the Jira organization. Variables of relevant types (e.g., List of 
JiraAllProjects
 variables) to store project information.
How to use:
Drag and drop the "Get All Projects" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve information about all projects associated with the Jira organization.
Example:

Consider an example where the "Get All Projects" activity is used to retrieve a list of all projects within the Jira organization:
Get All Projects:
  Result: allProjectsData
In this example, the activity fetches information about all projects associated with the Jira organization. The result, which includes details about each project, is stored in the List of 
JiraAllProjects
 variable "allProjectsData" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Project/Get Project/index.html

Get Project
AutomatR.Jira.Activities.GetProject
The "Get Project" activity in AutomatR's Jira package utilizes the Jira API to retrieve details about a specific project based on either the project key or ID. This activity is useful for obtaining information about a Jira project, such as its name, key, and other relevant details.
Properties
​
Name
Description
Input
Project Key
Enter the project key for which project details are required. String variables containing the project key.
Project ID
Enter the project ID for which project details are required. String variables containing the project ID.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Project" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object listing all the project details. Variables of relevant types (e.g., JiraAllProjects) to store the project details.
How to use:
Drag and drop the "Get Project" activity onto the workflow.
Optionally, configure the delay.
Provide either the project key or project ID.
Execute the workflow to retrieve details about the specified Jira project.
Example:

Consider an example where the "Get Project" activity is used to obtain details about a Jira project with the project key "PROJ123":
Get Project:
  Project Key: "PROJ123"
  Result: projectDetails
In this example, the activity fetches details about the Jira project with the key "PROJ123". The result, which includes various project details, is stored in the variable "projectDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Get Issue/index.html

Get Issue
AutomatR.Jira.Activities.GetIssue
The "Get Issue" activity in AutomatR's Jira package allows you to retrieve details for a specific Jira issue using its key or ID. This activity is essential for accessing information about Jira issues within your automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Enter the Ticket ID of the Jira issue for which details are required. String variables containing the Ticket ID.
Ticket Key
Enter the Ticket Key of the Jira issue for which details are required. String variables containing the Ticket Key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Issue" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object containing details about the specified Jira issue. Variables of relevant types (e.g., dynamic variables) to store issue details.
How to use:
Drag and drop the "Get Issue" activity onto the workflow.
Configure the properties by specifying the Ticket ID or Ticket Key.
Optionally, configure the delay.
Execute the workflow to retrieve details about the specified Jira issue.
Example:

Consider an example where the "Get Issue" activity is used to retrieve details for a Jira issue with the key "JIRA-123":
Get Issue:
  Ticket Key: "JIRA-123"
  Result: issueDetails
In this example, the activity fetches details about the Jira issue with the key "JIRA-123". The result, which includes details about the issue, is stored in the dynamic variable "issueDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Get Issue Type/index.html

Get Issue Type
AutomatR.Jira.Activities.GetIssueType
The "Get Issue Type" activity in AutomatR's Jira package utilizes the Jira API to retrieve a list of issue types. This activity is valuable for obtaining information about the available issue types within a Jira instance for use in automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Issue Type" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object containing details about the available issue types. Variables of relevant types (e.g., dynamic variables) to store the issue type information.
How to use:
Drag and drop the "Get Issue Type" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve a list of available issue types from Jira.
Example:

Consider an example where the "Get Issue Type" activity is used to obtain a list of issue types from Jira:
Get Issue Type:
  Result: issueTypes
In this example, the activity fetches information about the available issue types from Jira. The result, which includes details about the issue types, is stored in the dynamic variable "issueTypes" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Add Attachments/index.html

Add Attachments
AutomatR.Jira.Activities.AddAttachments
The "Add Attachments" activity in AutomatR's Jira package facilitates the addition of attachments to existing JIRA issues. This activity streamlines the process of attaching files to JIRA issues, enhancing automation capabilities for issue management.
Properties
​
Name
Description
Input
Attachments
Specifies a variable containing a list of strings, where each string represents the path of a file to be uploaded as an attachment to the JIRA issue.
Ticket ID
Specifies the Ticket ID of the JIRA issue to which attachments should be added. Either the "Ticket ID" or "Ticket Key" must be provided. String variables containing the Ticket ID.
Ticket Key
Specifies the Ticket Key of the JIRA issue to which attachments should be added. Either the "Ticket ID" or "Ticket Key" must be provided. String variables containing the Ticket Key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Attachments" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the attachment addition process was successful. True if successful; False otherwise. Variables of relevant types (e.g., Boolean variables) to store the operation result.
Validation:
The activity validates whether either the "Ticket ID" or "Ticket Key" is provided. If neither is provided, a validation error is raised.
How to use:
Drag and drop the "Add Attachments" activity onto the workflow.
Configure the properties by specifying the Ticket ID or Ticket Key, and provide a variable containing a list of file paths to be attached.
Optionally, configure the delay and customize the display name.
Execute the workflow to add attachments to the specified JIRA issue.
Example:

Consider an example where the "Add Attachments" activity is used to attach two files to a JIRA issue with the Ticket Key "PROJ-123":
Add Attachments:
  Delay: 2
  Ticket Key: "PROJ-123"
  Attachments: ["C:/Documents/File1.txt", "C:/Documents/File2.jpg"]
  Result: isAttachmentAdded
In this example, the activity waits for 2 seconds before executing, attaches two files ("File1.txt" and "File2.jpg") to the JIRA issue with the Ticket Key "PROJ-123." The result of the operation (success or failure) is stored in the Boolean variable "isAttachmentAdded" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Create Issue/index.html

Create Issue
AutomatR.Jira.Activities.CreateIssue
The "Create Issue" activity in AutomatR's Jira package utilizes the Jira API to create a new issue. This activity streamlines the process of issue creation, allowing users to dynamically generate new tasks or tickets within Jira as part of their automation workflows.
Properties
​
Name
Description
Input
Project Key
Specifies the project key for which the new issue will be created. String variables containing the project key.
Summary
Specifies the summary or title of the new issue. String variables containing the summary.
Description
Specifies the description of the new issue. String variables containing the description.
Issue Type ID
Specifies the ID corresponding to the type of the issue (e.g., Bug, Task, etc.). String variables containing the issue type ID.
Assignee ID
Specifies the User ID to whom the new issue will be assigned. String variables containing the assignee ID.
Attachments
Specifies a list of file paths representing attachments to be added to the new issue. List variables containing file paths.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Issue" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs an object representing the response when the issue is created successfully. This object may contain information about the newly created issue. Variables of relevant types (e.g., dynamic variables) to store the response.
How to use:
Drag and drop the "Create Issue" activity onto the workflow.
Configure the properties by specifying the project key, summary, description, issue type ID, assignee ID, and attachments (if any).
Optionally, configure the delay.
Execute the workflow to create a new issue in Jira based on the provided parameters.
Example:

Consider an example where the "Create Issue" activity is used to create a new task in a project with the project key "PROJ-123," having the summary "Task for Review" and description "This task is created for review purposes." The issue type is set to "Task," and the assignee is "john.doe." An attachment "task_document.txt" is also added to the issue:
Create Issue:
  Delay: 2
  Project Key: "PROJ-123"
  Summary: "Task for Review"
  Description: "This task is created for review purposes."
  Issue Type ID: "Task"
  Assignee ID: "john.doe"
  Attachments: ["C:\Attachments\task_document.txt"]
  Result: newIssueData
In this example, the activity waits for 2 seconds before executing, creates a new task in the project "PROJ-123" with the specified details, assigns it to "john.doe," attaches the "task_document.txt" file, and stores the response data in the dynamic variable "newIssueData" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Update Issue/index.html

Update Issue
AutomatR.Jira.Activities.UpdateIssue
The "Update Issue" activity in AutomatR's Jira package uses the Jira API to modify details of a specific issue. This activity provides flexibility in updating various aspects of an issue, such as the summary, description, project key, and issue type.
Once you set the Issue field, you can set the Issue dynamically with the help of variables, so that the fields stay on your canvas.
Alternatively, you can use a different ticket key to bring in different set of fields. 
You can only update an issue where all the fields or a subset of the fields apply. 
You can only update an issue where all the fields or a subset of the fields apply.
You can use the Update Record activity with an Issues object when dynamically creating a Jira issue.
NOTE:
 The authenticated Jira account must have sufficient permissions to the respective resource in each activity.
Properties
​
Name
Description
Input
Project Key
Enter the Project Key for which the issue needs to be updated. String variables containing the Project Key.
Summary
Enter a string containing the updated summary or title for the issue. String variables containing the updated summary.
Description
Enter a string containing the updated description for the issue. String variables containing the updated description.
Issue Type ID
Enter the ID for the updated issue type (e.g., Bug, Task, etc.). String variables containing the Issue Type ID.
Ticket ID
Enter the Ticket ID of the issue for which details need to be updated. String variables containing the Ticket ID.
Ticket Key
Enter the Ticket Key of the issue for which details need to be updated. String variables containing the Ticket Key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Issue" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns an object when the issue is updated successfully. Variables of dynamic type to store the operation result.
How to use:
Drag and drop the "Update Issue" activity onto the workflow.
Configure the properties by providing the Ticket ID or Ticket Key and updating the desired details (summary, description, project key, issue type).
Optionally, configure the delay.
Execute the workflow to update the specified issue in Jira.
Example:

Consider an example where the "Update Issue" activity is used to modify the summary and description of a Jira issue:
Update Issue:
  Ticket ID: "JRA-123"
  Summary: "Updated Issue Summary"
  Description: "This is the updated issue description."
  Result: updatedIssue
In this example, the activity updates the Jira issue with Ticket ID "JRA-123" by changing the summary to "Updated Issue Summary" and the description to "This is the updated issue description." The result of the operation is stored in the variable "updatedIssue" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Delete Issue/index.html

Delete Issue
AutomatR.Jira.Activities.DeleteIssue
The "Delete Issue" activity in AutomatR's Jira package leverages the Jira API to delete a specific issue. This activity is designed to streamline the process of removing issues from Jira as part of automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Specifies the ID of the Jira issue to be deleted. Either Ticket ID or Ticket Key is required. String variables containing the Jira issue ID.
Ticket Key
Specifies the key of the Jira issue to be deleted. Either Ticket ID or Ticket Key is required. String variables containing the Jira issue key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Issue" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the deletion of the issue was successful (True) or encountered errors (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Issue" activity onto the workflow.
Configure the properties by specifying the Ticket ID or Ticket Key of the Jira issue to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified Jira issue.
Example:

Consider an example where the "Delete Issue" activity is used to delete a Jira issue with the key "PROJ-123":
Delete Issue:
  Ticket Key: "PROJ-123"
  Result: isIssueDeleted
In this example, the activity deletes the Jira issue "PROJ-123." The result of the operation (success or failure) is stored in the Boolean variable "isIssueDeleted" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Atlassian/Jira/Issue/Assign Issue/index.html

Assign Issue
AutomatR.Jira.Activities.AssignIssue
The "Assign Issue" activity in AutomatR's Jira package assigns a JIRA issue to a specified user/assignee. This activity facilitates the automation of issue management by assigning issues to designated users, streamlining collaboration and task allocation.
Properties
​
Name
Description
Input
Assign User ID
Specifies the User ID to whom the JIRA issue should be assigned. String variables containing the User ID.
Ticket ID
Specifies the Ticket ID of the JIRA issue to be assigned. Either the "Ticket ID" or "Ticket Key" must be provided. String variables containing the Ticket ID.
Ticket Key
Specifies the Ticket Key of the JIRA issue to be assigned. Either the "Ticket ID" or "Ticket Key" must be provided. String variables containing the Ticket Key.
Misc
Display Name
The display name of the activity. This field supports only strings or 
String
 variables.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Assign Issue" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the assignment of the JIRA issue was successful (True) or encountered errors (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
Validation:
The activity validates whether either the "Ticket ID" or "Ticket Key" is provided. If neither is provided, a validation error is raised.
How to use:
Drag and drop the "Assign Issue" activity onto the workflow.
Configure the properties by specifying the User ID, and providing the Ticket ID or Ticket Key of the JIRA issue to be assigned.
Optionally, configure the delay.
Execute the workflow to assign the specified JIRA issue to the designated user.
Example:

Consider an example where the "Assign Issue" activity is used to assign a JIRA issue with the Ticket Key "PROJ-123" to a user with the User ID "john.doe":
Assign Issue:
  Delay: 2
  Ticket Key: "PROJ-123"
  Assign User ID: "john.doe"
  Result: isIssueAssigned
In this example, the activity waits for 2 seconds before executing, assigns the JIRA issue with the Ticket Key "PROJ-123" to the user with the User ID "john.doe." The result of the operation is stored in the Boolean variable "isIssueAssigned" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Group/Update Group/index.html

Update Group
AutomatR.Zendesk.Activities.UpdateGroup
The "Update Group" activity in AutomatR is part of the Zendesk activities package, enabling users to update group information within Zendesk. This activity streamlines the process of modifying group details, ensuring accurate and up-to-date data in Zendesk.
Properties
​
Name
Description
Input
Group Name
Specifies the name of the group. Enter a string or a String variable.
Group ID
Specifies the ID of the group. Enter an Int64 or an Int64 variable.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Result
Outputs the updated group information in the form of an IndividualGroupResponse object. This object contains details about the modified group, such as the group's ID, name, and other attributes. Variables of relevant types (e.g., IndividualGroupResponse) to store the updated group information.
How to use:
​
Drag and drop the "Update Group" activity onto the workflow.
Configure the properties by specifying the group name and group ID that you want to update.
Optionally, configure the delay.
Execute the workflow to update the specified group in Zendesk.
Example:
​
Consider an example where the "Update Group" activity is used to modify the name of a group with ID 456:
Update Group:
  Group Name: "New Group Name"
  Group ID: 456
  Delay: 0
  Result: updatedGroup
In this example, the activity updates the group with ID 456, changing its name to "New Group Name." The updated group information is stored in the variable "updatedGroup" for further analysis in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Group/Create Group/index.html

Create Group
AutomatR.Zendesk.Activities.CreateGroup
The "Create Group" activity in AutomatR is part of the Zendesk activities package, allowing for the automation of group creation within a Zendesk environment. This activity streamlines the process of setting up groups, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Group Name
Specifies the name of the group to be created. String variables containing the name of the group.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Group" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response containing details about the created group. Variables of relevant types (e.g., IndividualGroupResponse) to store the response.
How to use:
Drag and drop the "Create Group" activity onto the workflow.
Configure the properties by specifying the group name.
Optionally, configure the delay.
Execute the workflow to create a new group within Zendesk.
Example:

Consider an example where the "Create Group" activity is used to create a group named "SupportTeam":
Create Group:
  Delay: 0
  Group Name: "SupportTeam"
  Result: createdGroupDetails
In this example, the activity creates a new group named "SupportTeam." The details of the created group are stored in the variable "createdGroupDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Comment/Create Ticket Comment/index.html

Create Ticket Comment
AutomatR.Zendesk.Activities.CreateTicketComment
The "Create Ticket Comment" activity in AutomatR is part of the Zendesk activities package, facilitating the addition of comments to existing tickets in Zendesk. This activity enhances automation workflows by allowing users to provide additional information or updates to specific tickets.
Properties
​
Name
Description
Input
Text
The comment string. Enter a string or a String variable.
Ticket ID
The ID of the ticket.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Author ID
The ID of the comment author.
Public
Specifies whether the comment should be public (visible to end-users) or private (internal).
Uploads
The name of the group. Enter a string or a String variable.
Output
Result
The list of recent tickets. This field accepts only 
IndividualTicketResponse
How to use:
​
Drag and drop the "Create Ticket Comment" activity onto the workflow.
Configure the properties by specifying the ticket ID, comment text, and other optional details.
Optionally, configure the delay and customize the display name.
Execute the workflow to add a comment to the specified ticket.
Example:
​
Consider an example where the "Create Ticket Comment" activity is used to add a comment to an existing ticket:
Create Ticket Comment:
  Delay: 0
  Ticket ID: 12345
  Text: "This is a sample comment for ticket updates."
  Author ID: 6789
  Public: true
  Uploads: ["file1.txt", "image.png"]
  Result: ticketCommentResult
In this example, the activity adds a comment to the ticket with ID 12345. The comment text is set to "This is a sample comment for ticket updates," and the comment is marked as public. The list of uploads includes two files, "file1.txt" and "image.png." The result of the operation is stored in the 
ticketCommentResult
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Scope/Zendesk Scope/index.html

Zendesk Scope
AutomatR.Zendesk.Activities.ZendeskScope
The "Zendesk Scope" activity in AutomatR enables the setup of Zendesk with OAuth authentication for a user. This activity is essential for establishing a connection to Zendesk and obtaining the necessary credentials to access your Zendesk account securely.
Properties
​
Name
Description
Input
Access Token
Allows browsing for the access token to log in to the Zendesk account. This facilitates the capture of the API token required to access your Zendesk account securely. Click on the ellipsis button to configure authentication details using the provided editor. This is a required field.
Subdomain
Specifies the subdomain associated with the Zendesk account. Enter the subdomain where your Zendesk account is hosted. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. This is an optional field.
How to use:
​
Drag and drop the "Zendesk Scope" activity onto the workflow.
Configure the "Access Token" property by clicking on the ellipsis button to browse for the access token. This token is used for logging in to the Zendesk account.
Enter the "Subdomain" associated with the Zendesk account where your instance is hosted.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to set up the Zendesk Scope and establish authentication for subsequent Zendesk activities.
Note:
The "Access Token" property requires browsing for the access token using the provided editor, allowing you to configure authentication details securely.
Ensure that the specified subdomain is accurate and corresponds to the Zendesk account where your instance is hosted.
Example:

Consider an example where the "Zendesk Scope" activity is used to set up Zendesk authentication:
Zendesk Scope:
  Access Token: (Browse for token)
  Subdomain: "your-subdomain"
  Delay: 0
In this example, the activity sets up Zendesk authentication using the provided access token and specifies the subdomain associated with the Zendesk account.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Show Ticket Metrics/index.html

Show Ticket Metrics
AutomatR.Zendesk.Activities.ShowTicketMetrics
The "Show Ticket Metrics" activity in AutomatR is part of the Zendesk activities package, enabling users to retrieve ticket metrics for a specific Zendesk ticket. This activity streamlines the process of accessing and analyzing ticket metrics within automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Specifies the unique identification number of the ticket for which you want to retrieve metrics. Enter an Int64 or an Int64 variable representing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Ticket Metrics
Outputs the ticket metrics response object containing various metrics data for the specified ticket. Variables of relevant types (e.g., IndividualTicketMetricResponse) to store the metrics response.
How to use:
​
Drag and drop the "Show Ticket Metrics" activity onto the workflow.
Configure the properties by specifying the ticket ID for which you want to retrieve metrics.
Optionally, configure the delay.
Execute the workflow to retrieve ticket metrics for the specified ticket.
Example:
​
Consider an example where the "Show Ticket Metrics" activity is used to retrieve metrics for a ticket with ID 123:
Show Ticket Metrics:
  Ticket ID: 123
  Delay: 0
  Ticket Metrics: ticketMetrics
In this example, the activity retrieves metrics for the ticket with ID 123 and stores the metrics response in the variable "ticketMetrics" for further analysis in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Create Ticket/index.html

Create Ticket
AutomatR.Zendesk.Activities.CreateTicket
The "Create Ticket" activity in AutomatR is part of the Zendesk activities package, allowing for the automation of ticket creation within a Zendesk environment. This activity streamlines the process of generating new tickets, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Assignee Name
The agent currently assigned to the ticket. Enter an Int64 or an Int64 variable.
Body
The value of the body field for this ticket. This field supports only strings or String variables.
Organization Name
The organization of the requester. You can only specify the ID of an organization associated with the requester. Enter an Int64 variable.
Priority
The urgency with which the ticket should be addressed. From the drop-down, choose one of four options: Urgent, High, Normal, or Low.
Subject
The value of the subject field for this ticket. This field supports only strings or String variables.
Type
The type of the ticket. From the drop-down, choose one of four options: Problem, Incident, Question, or Task.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Ticket" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Assignee Name
The agent currently assigned to the ticket. Enter an Int64 or an Int64 variable.
Priority
The urgency with which the ticket should be addressed. From the drop-down, choose one of four options: Urgent, High, Normal, or Low.
Status
The state of the ticket. From the drop-down, choose one of the options - Allowed values are "new", "open", "pending", "hold", "solved", or "closed".
Type
The type of the ticket. From the drop-down, choose one of four options: Problem, Incident, Question, or Task.
Output
Ticket ID
The ID of the new ticket. Returns ticket ID as an Int64 variable.
How to use:
Drag and drop the "Create Ticket" activity onto the workflow.
Configure the properties by specifying the assignee name, body, delay, organization name, priority, subject, and type.
Optionally, configure the optional properties like priority, status, and type.
Execute the workflow to create a new ticket within Zendesk.
Example:

Consider an example where the "Create Ticket" activity is used to create a new ticket with the following details:
Create Ticket:
  Delay: 0
  Assignee Name: "JohnDoe"
  Body: "This is the body of the ticket."
  Organization Name: "CustomerSupport"
  Priority: High
  Subject: "Issue with Service"
  Type: Incident
  Ticket ID: newTicketID
In this example, the activity creates a new ticket with the specified details, and the ID of the newly created ticket is stored in the variable "newTicketID" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Update Ticket/index.html

Update Ticket
AutomatR.Zendesk.Activities.UpdateTicket
The "Update Ticket" activity in AutomatR is part of the Zendesk activities package, allowing users to modify ticket details within Zendesk. This activity simplifies the process of updating various attributes of a Zendesk ticket, such as subject, status, priority, and more.
Properties
​
Name
Description
Input
Ticket ID
The ID of the ticket. Enter an Int64 or an Int64 variable.
Subject
The value of the subject field for this ticket. This field supports only strings or String variables.
Priority
The urgency with which the ticket should be addressed. Choose one of four options: Urgent, High, Normal, or Low.
Type
The type of the ticket. Choose one of four options: Problem, Incident, Question, or Task.
Status
The state of the ticket. Choose from "open," "pending," "hold," "solved," or "closed."
Assignee Name
The agent currently assigned to the ticket. Enter a user name or a user name variable.
Group Name
The group to which this ticket is assigned. Enter a group name or a group name variable.
Organization Name
The organization of the requester. Specify the ID of an organization associated with the requester. Enter an Int64 variable.
Body
The value of the body field for this ticket. This field supports only strings or String variables.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Response
Outputs the updated ticket information in the form of an IndividualTicketResponse object. This object contains details about the modified ticket, including the ticket's ID, subject, status, and other attributes. Variables of relevant types (e.g., IndividualTicketResponse) to store the updated ticket information.
How to use:
​
Drag and drop the "Update Ticket" activity onto the workflow.
Configure the properties by specifying the ticket ID and the attributes you want to update.
Optionally, configure the delay.
Execute the workflow to update the specified ticket in Zendesk.
Example:
​
Consider an example where the "Update Ticket" activity is used to modify the subject and priority of a ticket with ID 123:
Update Ticket:
  Ticket ID: 123
  Subject: "New Subject"
  Priority: High
  Delay: 0
  Response: updatedTicket
In this example, the activity updates the ticket with ID 123, changing its subject to "New Subject" and priority to "High." The updated ticket information is stored in the variable "updatedTicket" for further analysis in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/List Ticket Comments/index.html

List Ticket Comments
AutomatR.Zendesk.Activities.ListTicketComments
The "List Ticket Comments" activity in AutomatR is part of the Zendesk activities package, enabling users to retrieve a list of comments associated with a specific ticket in Zendesk. This activity streamlines the process of accessing and managing ticket comments within automation workflows.
Properties
​
Name
Description
Input
Ticket ID
Specifies the unique identification number of the ticket for which you want to retrieve comments. Enter an Int32 or an Int32 variable representing the ticket ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Result
Outputs the list of ticket comments associated with the specified ticket ID. This field supports only Ticket_comments[] as the output type. Variables of relevant types (e.g., IList<ZendeskApi_v2.Models.Tickets.Comment>) to store the list of comments.
How to use:
​
Drag and drop the "List Ticket Comments" activity onto the workflow.
Configure the properties by specifying the ticket ID for which you want to retrieve comments.
Optionally, configure the delay.
Execute the workflow to retrieve the list of comments associated with the specified ticket.
Example:
​
Consider an example where the "List Ticket Comments" activity is used to retrieve comments for a ticket with ID 123:
List Ticket Comments:
  Ticket ID: 123
  Delay: 0
  Result: ticketComments
In this example, the activity retrieves comments for the ticket with ID 123 and stores the list of comments in the variable "ticketComments" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Delete File/index.html

Delete File
AutomatR.Zendesk.Activities.DeleteFile
The "Delete File" activity in AutomatR is part of the Zendesk activities package, allowing the deletion of files associated with a ticket in Zendesk. This activity simplifies the process of removing specific files, identified by their unique file token, from the ticket.
Properties
​
Name
Description
Input
File Token
The name of the file. This field supports only strings or String variables. The endpoint has a required filename query parameter. The parameter specifies what the file will be named when attached to the ticket comment.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Result
Returns true/false, indicating whether the file deletion was successful.
How to use:
​
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the file token (name) of the file to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified file from the Zendesk ticket.
Example:
​
Consider an example where the "Delete File" activity is used to delete a file with the token "xyz123" from a Zendesk ticket:
Delete File:
  Delay: 0
  File Token: "xyz123"
  Result: isDeleteSuccessful
In this example, the activity deletes the file with the token "xyz123" from the associated Zendesk ticket. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Upload File/index.html

Upload File
AutomatR.Zendesk.Activities.UploadFile
The "Upload File" activity in AutomatR is part of the Zendesk activities package, facilitating the attachment of files to tickets in Zendesk. This activity supports various file types, including documents and images, enhancing the capability to include relevant files in Zendesk ticket comments.
Properties
​
Name
Description
Input
File Path
The full path, including the file name, of the file to be uploaded. This field supports only strings or String variables. The endpoint has a required filename query parameter, specifying the file's name when attached to the ticket comment. This is a required field.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. This is an optional field.
Output
Uploaded File Token
The token of the uploaded file. This field supports only strings or String variables.
Uploaded File Attachment
The attachment ID (attachment_id) of the uploaded file. Enter an Int64 or an Int64 variable.
Note:
The "File Path" property requires the full path of the file, including the file name, to be uploaded.
The activity automatically determines the content type based on the file extension to ensure correct handling in Zendesk.
Supported file types include documents (.docx, .doc, .pdf, .xlsx, .xls) and images (.jpg, .jpeg, .png).
The "Uploaded File Token" provides the token associated with the uploaded file, while "Uploaded File Attachment" contains the attachment ID.
How to use:
​
Drag and drop the "Upload File" activity onto the workflow.
Configure the "File Path" property by specifying the full path, including the file name, of the file to be uploaded.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to upload the specified file to Zendesk as an attachment to be associated with ticket comments.
Example:

Consider an example where the "Upload File" activity is used to attach a PDF document named "report.pdf" to a Zendesk ticket:
Upload File:
  File Path: "C:/Documents/report.pdf"
  Delay: 0
  Uploaded File Token: fileToken
  Uploaded File Attachment: fileAttachmentID
In this example, the activity uploads the "report.pdf" file to Zendesk, and the associated file token is stored in the variable "fileToken," while the attachment ID is stored in the variable "fileAttachmentID" for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Create User/index.html

Create User
AutomatR.Zendesk.Activities.CreateUser
The "Create User" activity in AutomatR is part of the Zendesk activities package, allowing the creation of new users in Zendesk. This activity streamlines the process of adding users, providing essential details such as name, email, and other optional information.
Properties
​
Name
Description
Input
Name
The name of the user. Enter a string or a String variable.
Email
The primary email address of this user. Enter a string or a String variable.
Phone
The primary phone number of this user. Enter a string or a String variable.
Organization ID
The ID of the user's organization or, if the user has more than one organization membership, the ID of the user's default organization.
Details
Any details you want to store about the user, such as an address.
Ticket Restriction
Specifies which tickets the user has access to. Enter one of four options: Organization, Groups, Assigned, Requested.
Time Zone
The user's time zone. Enter a string or a String variable. For example, "Copenhagen."
Role
Choose the role of the user.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Result
Created user details in the form of 
IndividualUserResponse
.
How to use:
​
Drag and drop the "Create User" activity onto the workflow.
Configure the properties by specifying the user's name, email, and other optional details.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new user in Zendesk.
Example:
​
Consider an example where the "Create User" activity is used to create a new user:
Create User:
  Delay: 0
  Name: "John Doe"
  Email: "john.doe@example.com"
  Phone: "123-456-7890"
  Organization ID: 98765
  Details: "123 Main St, Cityville"
  Ticket Restriction: "Organization"
  Time Zone: "Copenhagen"
  Role: "Enduser"
  Result: createdUserDetails
In this example, the activity creates a new user named "John Doe" with the email "
john.doe@example.com
" and other optional details. The user is associated with the organization with ID 98765, and the ticket restriction is set to "Organization." The created user's details are stored in the variable 
createdUserDetails
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/List All Tickets/index.html

List All Tickets
AutomatR.Zendesk.Activities.ListAllTickets
The "List All Tickets" activity in AutomatR is part of the Zendesk activities package, providing the capability to retrieve a list of all tickets in Zendesk for the logged-in account. This activity is useful for accessing information about recent tickets in Zendesk.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Output
Result
The list of recent tickets. This field accepts only Tickets[].
How to use:
​
Drag and drop the "List All Tickets" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve a list of all tickets from Zendesk.
Example:
​
Consider an example where the "List All Tickets" activity is used to retrieve a list of all recent tickets from Zendesk:
List All Tickets:
  Delay: 0
  Result: recentTickets
In this example, the activity retrieves the list of recent tickets from Zendesk, and the result is stored in the variable "recentTickets" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/List Search/index.html

List Search
AutomatR.Zendesk.Activities.ListSearch
The "List Search" activity in AutomatR is part of the Zendesk activities package, allowing users to perform searches in Zendesk and retrieve a list of records based on specified criteria. This activity facilitates the retrieval of tickets, users, groups, or organizations matching the provided search query.
Properties
​
Name
Description
Input
Maximum Records
The maximum number of records to return. Enter an Int32 or an Int32 variable. The Search API returns up to 1,000 results per query.
Query
The search query. Provide any string or String variable to search. The string can be a single string, a combination of words, status, IDs such as ticket ID, date, resource type, etc.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity.
Sort By
Enter one of the criteria: created_at, updated_at, priority, status, or ticket_type. The default is sorting by relevance. Enter a string or a String variable.
Sort Order
The order in which the results should be sorted, in the format [asc
Output
List Of Search
Returns the list of records as responses based on tickets, users, groups, or organizations, as specified by the filter_type parameter.
How to use:
​
Drag and drop the "List Search" activity onto the workflow.
Configure the properties by specifying the search query, maximum records, and optional parameters such as sort order and sort by.
Optionally, configure the delay.
Execute the workflow to perform a search in Zendesk and retrieve the list of matching records.
Example:
​
Consider an example where the "List Search" activity is used to search for tickets with a specific status:
List Search:
  Query: "status:open"
  Maximum Records: 10
  Sort By: "created_at"
  Sort Order: "asc"
  List Of Search: ticketList
In this example, the activity searches for open tickets, retrieves a maximum of 10 records, sorts the results by the creation date in ascending order, and stores the list of search results in the variable "ticketList" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Zendesk/Ticket/Update User/index.html

Update User
AutomatR.Zendesk.Activities.UpdateUser
The "Update User" activity in AutomatR is part of the Zendesk activities package, allowing automation processes to update user details within Zendesk. This activity is useful for keeping user information synchronized and ensuring accurate user data.
Properties
​
Name
Description
Input
User ID
The ID of the user. Enter an Int64 or an Int64 variable. This is a required field.
Name
The name of the user. Enter a string or a String variable.
Email
The primary email address of this user. Enter a string or a String variable.
Phone
The primary phone number of this user. Enter a string or a String variable.
Organization ID
The ID of the user's organization or, if the user has more than one organization memberships, the ID of the user's default organization. Enter an Int64 variable.
Details
Any details you want to store about the user, such as an address. Enter a string or a String variable.
Ticket Restriction
Specifies which tickets the user has access to. Enter one of four options: Organization, Groups, Assigned, Requested.
Time Zone
The user's time zone. Enter a string or a String variable. For example, "Copenhagen".
Role
Choose the role of the user. Select from the available options.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds i.e., 5) to start the activity. This is an optional field.
Output
Result
Outputs the updated user details as an IndividualUserResponse.
Note:
The user ID is a required field, and it represents the unique identifier of the user whose details you want to update.
The "Role" property allows you to specify the role of the user. Choose from the available options, and if "Enduser" is selected, it will be mapped to "end-user."
Ensure that the provided user ID exists in Zendesk before attempting to update the user details.
If the user ID corresponds to an admin user, the user role cannot be altered.
How to use:
​
Drag and drop the "Update User" activity onto the workflow.
Configure the properties based on the user details you want to update.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to update the specified user details in Zendesk.
Example:

Consider an example where the "Update User" activity is used to modify the email address and phone number of a user with the ID 123:
Update User:
  User ID: 123
  Email: "newemail@example.com"
  Phone: "+1234567890"
  Result: updatedUserDetails
In this example, the activity updates the email address and phone number of the user with ID 123 in Zendesk, and the updated user details are stored in the variable "updatedUserDetails" for further use.

URL: https://docs.automatr.tech/docs/Products/Activities/CSV/Write to CSV/index.html

Write to CSV
AutomatR.DefaultActivities.CSV.WriteCSV
The "Write to CSV" activity in AutomatR is part of the CSV activities package, designed to facilitate the writing of specific data, extracted from other activities, to a CSV file. This activity provides flexibility by allowing users to define the delimiter, file path, and other optional settings, making it a versatile tool for managing data in CSV format within automation workflows.
Properties
​
Name
Description
Input
Data
Specifies the DataTable variable reference containing the data to be written to the CSV file. 
DataTable
 variables referencing data from other activities, such as "Read CSV."
Delimiter
Specifies the delimiter used in the CSV file (e.g., Tab, Comma(,), Semicolon(;), Caret(^), or Pipe(I)). 
Char
 variables containing the desired delimiter.
File Path
Specifies the full path of the CSV file on the local drive, including the filename (e.g., "C:\excelActivities\workbook.csv"). 
String
 variables containing the file path.
Include Headers
When enabled, considers the column headers as the first row during the write operation. 
Boolean
 variables determining whether to include headers.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Write to CSV" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Write to CSV" operation, indicating whether the write operation was successful or encountered any errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Write to CSV" activity onto the workflow.
Configure the properties by specifying the delimiter, file path, and other optional settings.
Provide the DataTable variable reference containing the data to be written.
Optionally, configure the delay.
Execute the workflow to write data to the specified CSV file.
Example:

Consider an example where the "Write to CSV" activity is used to write data to a CSV file:
Write to CSV:
  File Path: "C:\example\output.csv"
  Include Headers: True
  Delimiter: ','
  Data: dataToWrite
  Result: isWriteSuccessful
In this example, the activity writes data from the "dataToWrite" DataTable variable to the "output.csv" file located at "C:\example\". It includes headers, uses a comma as the delimiter, and stores the result of the operation (success or failure) in the Boolean variable "isWriteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/CSV/Append To CSV/index.html

Append To CSV
AutomatR.DefaultActivities.CSV.AppendToCSV
The "Append To CSV" activity in AutomatR is part of the CSV activities package, allowing users to append data from a DataTable to an existing CSV file. This activity is valuable for scenarios where you need to continuously add data to an existing CSV file without overwriting its content.
Properties
​
Name
Description
Input
Data
Specifies the 
DataTable
 variable reference containing the data to be appended to the CSV file.
Delimiter
Specifies the delimiter used in the CSV file. Choose from common options like Tab, Comma(,), Semicolon(;), Caret(^), or Pipe(I). 
Char
 variables containing the desired delimiter.
File Path
Specifies the full path of the CSV file on the local drive, including the filename (e.g., "C:\excelActivities\workbook.csv"). 
String
 variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append To CSV" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Append To CSV" operation, indicating whether the operation was successful (True) or encountered errors (False). 
Boolean
 variables to store the operation result.
How to use:
Drag and drop the "Append To CSV" activity onto the workflow.
Configure the properties by specifying the DataTable variable containing the data, the delimiter used in the CSV file, and the full path of the CSV file on the local drive.
Optionally, configure the delay.
Execute the workflow to append the specified data to the existing CSV file.
Example:

Consider an example where the "Append To CSV" activity is used to add new data to an existing CSV file:
Append To CSV:
  Data: dataTableVariable
  Delimiter: ','
  File Path: "C:\example\existing_data.csv"
  Result: isAppendSuccessful
In this example, the activity appends the data from the "dataTableVariable" to the CSV file located at "C:\example\existing_data.csv". The result of the operation (success or failure) is stored in the Boolean variable "isAppendSuccessful" for further handling in the workflow.
Note:
Ensure that the CSV file exists before using this activity.
The activity supports various delimiters to accommodate different CSV file formats.

URL: https://docs.automatr.tech/docs/Products/Activities/CSV/Read from CSV/index.html

Read from CSV
AutomatR.DefaultActivities.CSV.ReadCSV
The "Read from CSV" activity in AutomatR is part of the CSV activities package, facilitating the extraction of data from a specified CSV file for use in automation workflows. This activity offers flexibility by allowing users to include or exclude headers, define the delimiter, skip a specified number of rows, and save the extracted data into a DataTable variable for further processing.
Properties
​
Name
Description
Input
Delimiter
Specifies the delimiter used in the CSV file (e.g., Tab, Comma(,), Semicolon(;), Caret(^), or Pipe(I)). 
Char
 variables containing the desired delimiter.
File Path
Specifies the full path of the CSV file on the local drive, including the filename (e.g., "C:\excelActivities\workbook.csv"). 
String
 variables containing the file path.
Include Headers
When enabled, considers the first row of the CSV file as column headers during the read operation. 
Boolean
 variables to determine whether to include headers.
Skip Number Of Rows
Specifies the number of rows to skip from the beginning of the CSV file. 
Integer
 variables containing the number of rows to skip.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read from CSV" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Result
Result
Stores the data extracted from the CSV file in a DataTable variable for use in subsequent workflow activities. 
DataTable
 variables to store the extracted data.
How to use:
Drag and drop the "Read from CSV" activity onto the workflow.
Configure the properties by specifying the delimiter, file path, and other optional settings.
Optionally, configure the delay.
Execute the workflow to read data from the specified CSV file.
Example:

Consider an example where the "Read from CSV" activity is used to extract data from a CSV file:
Read from CSV:
  File Path: "C:\example\data.csv"
  Include Headers: True
  Delimiter: ','
  Skip Number Of Rows: 2
  Result: extractedData
In this example, the activity reads data from the "data.csv" file located at "C:\example\". It includes headers, uses a comma as the delimiter, skips the first two rows, and stores the extracted data in the DataTable variable "extractedData" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/List/Remove From List/index.html

Remove From List
AutomatR.DefaultActivities.List.RemoveFromList<T>
The "Remove From List" activity in AutomatR, categorized under List, allows you to remove the value of a specific item in a list. This is useful when you need to eliminate a particular element from a list based on its index.
Properties
​
Name
Description
Input
Index Number
Specifies the index of the item you want to remove from the list. It represents the position of the item in the list. Integer variables containing the index value.
List
Specifies the list from which you want to remove the item. It represents the list containing the item to be removed. Variables of type List\<T
>
 containing the data.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Remove From List" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Remove From List" activity onto the workflow.
Configure the properties, specifying the list from which to remove the item and the index of the item to be removed.
Optionally, configure the delay and customize the display name.
Execute the workflow to remove the specified item from the list.
Example:

Consider an example where the "Remove From List" activity is used to eliminate an item from a list of strings:
Remove From List:
  List: myList
  Index: 3
In this example, the activity removes the item at index 3 from the list named "myList."

URL: https://docs.automatr.tech/docs/Products/Activities/List/Create List/index.html

Create List
AutomatR.DefaultActivities.List.CreateList<T>
The "Create List" activity in AutomatR, categorized under List, allows you to create a new empty list. This activity is useful for initializing a list that can be populated and manipulated in subsequent activities within your automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create List" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the newly created list as a variable of type List\<T
>
. This variable can be utilized in subsequent activities for adding, updating, or iterating through the list. Variables of the appropriate type to store the list.
How to use:
Drag and drop the "Create List" activity onto the workflow.
Configure the properties, optionally setting a delay based on your requirements.
Execute the workflow to create a new empty list.
Utilize the output variable (Result) in subsequent activities for list-related operations.
Example:

Consider an example where the "Create List" activity is used to initialize an empty list of integers:
Create List:
  Result: myList
In this example, the activity creates a new empty list named "myList," which can be subsequently populated with integer values or manipulated in other list-related activities.

URL: https://docs.automatr.tech/docs/Products/Activities/List/Update List Item/index.html

Update List Item
AutomatR.DefaultActivities.List.UpdateListItem<T>
The "Update List Item" activity in AutomatR, categorized under List, allows you to update the value of a specific item in a list. This is useful when you need to modify the content of an element at a particular index in the list.
Properties
​
Name
Description
Input
Index Number
Specifies the index of the item you want to update in the list. It represents the position of the item to be updated. Integer variables containing the index value.
List
Specifies the list from which you want to update the item. It represents the list containing the item to be updated. Variables of type List\<T
>
 containing the data.
Updated Item
Specifies the new value that should be set at the specified index in the list. It represents the updated content for the list item. Variables of type T containing the updated value.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update List Item" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Update List Item" activity onto the workflow.
Configure the properties, specifying the list from which to update the item, the index of the item to be updated, and the new value to set.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified item in the list.
Example:

Consider an example where the "Update List Item" activity is used to modify a string item in a list:
Update List Item:
  List: myList
  Index: 2
  Updated Item: "NewValue"
In this example, the activity updates the item at index 2 in the list named "myList" with the new value "NewValue."

URL: https://docs.automatr.tech/docs/Products/Activities/List/Read List Item/index.html

Read List Item
AutomatR.DefaultActivities.List.ReadListItem<T>
The "Read List Item" activity in AutomatR, categorized under List, enables you to fetch the value of a specific item in a list. This activity is particularly useful when you need to retrieve the value stored at a particular index within a list.
Properties
​
Name
Description
Input
Index Number
Specifies the index of the item you want to read from the list. It represents the position of the item in the list. Integer variables containing the index value.
List
Specifies the list from which you want to read the item. It represents the list containing the desired data. Variables of type List\<T
>
 containing the data.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read List Item" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the reference of the value of the item at the specified index in a variable of type T. This variable can be used in subsequent activities or conditions. Variables of type T to store the item value.
How to use:
Drag and drop the "Read List Item" activity onto the workflow.
Configure the properties, specifying the list from which to read, the index of the item, and an optional delay based on your requirements.
Execute the workflow to retrieve the value of the specified item from the list.
Utilize the output variable (Result) in subsequent activities or conditions.
Example:

Consider an example where the "Read List Item" activity is used to retrieve a specific value from a list of integers:
Read List Item:
  List: myList
  Index: 2
  Result: retrievedValue
In this example, the activity reads the value at index 2 from the list named "myList" and stores it in the variable "retrievedValue" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/List/Append Item To List/index.html

Append Item To List
AutomatR.DefaultActivities.List.AppendItemToList<T>
The "Append Item To List" activity in AutomatR, categorized under List, allows you to add an item at the end of a specified list. This activity is useful for dynamically updating and managing lists within your automation workflows.
Properties
​
Name
Description
Input
Appended Item
Specifies the item that you want to add at the end of the list. Variables of the appropriate type containing the item to be appended.
List
Specifies the list to which the item should be appended. Variables of the list type containing the list to be updated.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append Item To List" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Append Item To List" activity onto the workflow.
Configure the properties by specifying the item to be appended and the target list.
Optionally, configure the delay based on your requirements.
Execute the workflow to append the specified item to the end of the list.
Example:

Consider an example where the "Append Item To List" activity is used to add a new item to a list of strings:
Append Item To List:
  Appended Item: "NewValue"
  List: myList
In this example, the activity adds the string "NewValue" to the end of the list named "myList."

URL: https://docs.automatr.tech/docs/Products/Activities/OCR Data Extraction/AWS Textract OCR/index.html

AWS Textract OCR
AutomatR.Windows.Activities.AWSTextractOCR
The "AWS Textract OCR" activity in AutomatR integrates with Amazon Textract, a fully managed OCR service provided by Amazon Web Services (AWS). This activity facilitates the extraction of text and data from images or documents using the powerful OCR capabilities of AWS Textract.
Properties
​
Name
Description
Input
Access Key
Specifies the AWS Access Key ID associated with your AWS account. This key is used for authentication to access the Textract OCR service. 
String
 variables containing the AWS Access Key ID.
Bucket Name
Specifies the name of the Amazon S3 bucket where the input document or image is stored. Textract processes documents stored in this bucket. 
String
 variables containing the bucket name.
File Name
Specifies the name of the document or image file stored in the specified Amazon S3 bucket. Textract performs OCR on this document. 
String
 variables containing the file name.
File Path
Specifies the local path to the document or image file if it is stored locally. This property is used if the file is not in an Amazon S3 bucket. 
String
 variables containing the local file path.
Region
Specifies the AWS region where the Amazon Textract service is hosted. 
String
 variables containing the AWS region.
Region Selection
Allows the user to select the image region to capture by clicking on the ellipsis button (...) and dragging the mouse to define the region of interest. This is particularly useful when focusing OCR on specific areas of an image. No direct variable support for region selection, as it involves user interaction.
Secret Key
Specifies the AWS Secret Access Key associated with your AWS account. This key is used for authentication to access the Textract OCR service. 
String
 variables containing the AWS Secret Access Key.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the Textract OCR activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the AWS Textract OCR operation, typically containing the extracted text data and additional information about the document. Variables of relevant types (e.g., 
string
 variables) to store the OCR result.
How to use:
Drag and drop the "AWS Textract OCR" activity onto the workflow.
Configure the properties by providing the necessary AWS credentials, file information, and region details.
Use the region selection feature to define the area of interest within the image.
Optionally, configure the delay and customize the display name.
Execute the workflow to perform OCR using the AWS Textract service.
Note:
 Ensure that the specified AWS credentials (Access Key, Secret Key) have the necessary permissions to interact with the Amazon Textract service.
Example:

Consider an example where the "AWS Textract OCR" activity is used to extract text from an image stored in an Amazon S3 bucket:
AWS Textract OCR:
  Display Name: "Extract Text from Image"
  Access Key: "your_access_key"
  Secret Key: "your_secret_key"
  Bucket Name: "your_s3_bucket"
  File Name: "sample.png"
  Region: "us-east-1"
  Region Selection: [User Interaction]
  Result: extractedText
In this example, the activity uses the AWS Textract service to extract text from the "sample.png" image file stored in the specified Amazon S3 bucket. The region of interest is interactively defined by the user through the region selection feature. The extracted text is stored in the variable "extractedText" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/OCR Data Extraction/Google OCR/index.html

Google OCR
AutomatR.Windows.Activities.GoogleOCR
The "Google OCR" activity in AutomatR leverages the Google Cloud Vision API, providing powerful optical character recognition (OCR) capabilities. This activity is designed to extract text from images or documents, offering a reliable solution for OCR data extraction in automation workflows.
Properties
​
Name
Description
Input
API Key
Specifies the API key associated with your Google Cloud Platform (GCP) project. This key is used for authentication to access the Google Cloud Vision API for OCR. String variables containing the API key.
File Name
Specifies the name of the document or image file for which OCR needs to be performed. This file can be stored locally or in a cloud storage service. String variables containing the file name.
File Path
Specifies the local path to the document or image file if it is stored locally. This property is used if the file is not in a cloud storage service. String variables containing the local file path.
Region Selection
Allows the user to select the image region to capture by clicking on the ellipsis button (...) and dragging the mouse to define the region of interest. This is particularly useful when focusing OCR on specific areas of an image. No direct variable support for region selection, as it involves user interaction.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the Google OCR activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the Google OCR operation, typically containing the extracted text data and additional information about the document. Variables of relevant types (e.g., string variables) to store the OCR result.
How to use:
Drag and drop the "Google OCR" activity onto the workflow.
Input the API key and file information in the properties pane.
Specify the source of the document (local file or cloud storage).
Use the region selection feature to define the area of interest within the image.
Optionally, configure the delay and customize the display name.
Execute the workflow to perform OCR using the Google Cloud Vision API.
Note:
 Ensure that the Google Cloud Vision API is enabled for your GCP project and that the API key has the necessary permissions for successful OCR operations.
Example:

Consider an example where the "Google OCR" activity is used to extract text from a local image file:
Google OCR:
  Display Name: "Extract Text from Image"
  API Key: "your_api_key"
  File Path: "C:\Images\sample.png"
  Region Selection: [User Interaction]
  Result: extractedText
In this example, the activity uses the Google Cloud Vision API to extract text from the "sample.png" image file. The region of interest is interactively defined by the user through the region selection feature. The extracted text is stored in the variable "extractedText" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/OCR Data Extraction/Tesseract OCR/index.html

Tesseract OCR
AutomatR.Windows.Activities.TesseractOCR
The "Tesseract OCR" activity in AutomatR utilizes the Tesseract OCR engine, an open-source optical character recognition engine developed by Google. This activity enables users to extract text from images or documents, providing a powerful and flexible solution for OCR data extraction in automation workflows.
Properties
​
Name
Description
Input
File Name
Specifies the name of the document or image file for which OCR needs to be performed. This file can be stored locally. String variables containing the file name.
File Path
Specifies the local path to the document or image file if it is stored locally. This property is used if the file is not in a cloud storage service. String variables containing the local file path.
Region Selection
Allows the user to select the image region to capture by clicking on the ellipsis button (...) and dragging the mouse to define the region of interest. This feature is beneficial when focusing OCR on specific areas of an image. No direct variable support for region selection, as it involves user interaction.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the Tesseract OCR activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the Tesseract OCR operation, typically containing the extracted text data. Variables of relevant types (e.g., string variables) to store the OCR result.
How to use:
Drag and drop the "Tesseract OCR" activity onto the workflow.
Configure the properties by specifying the file information and using the region selection feature to define the area of interest.
Optionally, configure the delay and customize the display name.
Execute the workflow to perform OCR using the Tesseract OCR engine.
Note:
 The "Region Selection" property provides a visual and interactive way to specify the region of interest within the image. It allows users to focus OCR processing on specific portions of an image, enhancing accuracy and efficiency.
Example:

Consider an example where the "Tesseract OCR" activity is used to extract text from a local image file with a defined region of interest:
Tesseract OCR:
  Display Name: "Extract Text from Image"
  File Path: "C:\Images\sample.png"
  Region Selection: [User Interaction]
  Result: extractedText
In this example, the activity uses the Tesseract OCR engine to extract text from the "sample.png" image file. The region of interest is interactively defined by the user through the region selection feature. The extracted text is stored in the variable "extractedText" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/OCR Data Extraction/Image OCR/index.html

Image OCR
AutomatR.Windows.Activities.ImageOCR
The "Image OCR" activity in AutomatR serves as a comprehensive OCR data extraction tool, supporting multiple OCR engines, including Tesseract OCR, Google OCR, AWS Textract, and others. This activity allows users to extract text from images or documents, providing flexibility and adaptability for various automation scenarios.
Properties
​
Name
Description
AWS (Amazon Textract) Properties
Access Key Id
Specifies the AWS Access Key ID associated with your AWS account when using the AWS Textract OCR engine.
String
 variables containing the AWS Access Key ID.
Bucket Name
Specifies the name of the Amazon S3 bucket where the input document or image is stored. Relevant when using the AWS Textract OCR engine. 
String
 variables containing the bucket name.
Region
Specifies the AWS region where the Amazon Textract service is hosted. 
String
 variables containing the AWS region.
Secret Access Key
Specifies the AWS Secret Access Key associated with your AWS account when using the AWS Textract OCR engine. 
String
 variables containing the AWS Secret Access Key.
Google OCR Properties
API Key
Specifies the API key associated with your Google Cloud Platform (GCP) project when using the Google OCR engine. 
String
 variables containing the API key.
Input Properties
File Name
Specifies the name of the document or image file for which OCR needs to be performed. This file can be stored locally or in a cloud storage service. 
String
 variables containing the file name.
File Path
Specifies the local path to the document or image file if it is stored locally. This property is used if the file is not in a cloud storage service. 
String
 variables containing the local file path.
OCR Engine
Specifies the OCR engine to be used for text extraction. This can be set to "Tesseract OCR", "Google OCR," "AWS Textract," or other supported engines. 
String
 variables containing the selected OCR engine
Region Selection
Allows the user to select the image region to capture by clicking on the ellipsis button (...) and dragging the mouse to define the region of interest. This is particularly useful when focusing OCR on specific areas of an image. No direct variable support for region selection, as it involves user interaction.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the Image OCR activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Result
Outputs the result of the OCR operation, typically containing the extracted text data and additional information about the document. Variables of relevant types (e.g., 
string
 variables) to store the OCR result.
How to use:
Drag and drop the "Image OCR" activity onto the workflow.
Configure the properties based on the OCR engine you want to use (Tesseract OCR, Google OCR, AWS Textract, etc.).
Input the required credentials and file information.
Use the region selection feature to define the area of interest within the image.
Optionally, configure the delay and customize the display name.
Execute the workflow to perform OCR using the selected OCR engine.
Note:
 Ensure that the necessary credentials are configured for the chosen OCR engine (AWS Access Key, Secret Key, API Key, etc.) and that the file information is accurate.
Example:

Consider an example where the "Image OCR" activity is used to extract text from a local image file with a defined region of interest:
Image OCR:
  Display Name: "Extract Text from Image"
  OCR Engine: "AWS Textract"
  Access Key Id: "your_access_key"
  Secret Access Key: "your_secret_key"
  File Path: "C:\Images\sample.png"
  Region Selection: [User Interaction]
  Result: extractedText
In this example, the activity uses the AWS Textract OCR engine to extract text from the "sample.png" image file. The region of interest is interactively defined by the user through the region selection feature. The extracted text is stored in the variable "extractedText" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Append Text/index.html

Append Text
AutomatR.Word.Activities.AppendText
The "Append Text" activity in AutomatR allows you to insert text at the end of a Word document. This activity is part of the Word activities package, providing a seamless way to add content to the last line containing text in a Word document.
Properties
​
Name
Description
Input
Text
Specifies the text that should be appended to the end of the last line containing text in the Word document. String variables containing the text to be appended.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append Text" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Append Text" activity onto the workflow.
Configure the properties by specifying the text to be appended to the Word document.
Optionally, configure the delay and customize the display name.
Execute the workflow to append the specified text to the last line containing text in the Word document.
Example:
​
Consider an example where the "Append Text" activity is used to add a signature line at the end of a Word document:
Append Text:
  Display Name: "Add Signature"
  Text: "Authorized by John Doe"
In this example, the activity appends the text "Authorized by John Doe" to the last line containing text in the Word document. The specified display name enhances workflow clarity.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Set Bookmark Content/index.html

Set Bookmark Content
AutomatR.Word.Activities.SetBookmarkContent
The "Set Bookmark Content" activity in AutomatR is part of the Word activities package, designed to add text at a specified bookmark location within a Word document. This activity streamlines the process of inserting content precisely where needed, enhancing document customization in automation workflows.
Properties
​
Name
Description
Input
Bookmark Name
Select Text to enter the name of the bookmark where text will be added in the document. String variables containing the bookmark name.
Bookmark Text
Select Text to enter the text that will be added at the bookmark location in the document. String variables containing the bookmark text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Set Bookmark Content" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Set Bookmark Content" activity onto the workflow.
Configure the properties by specifying the bookmark name and the text to be added at the bookmark location within the Word document.
Optionally, configure the delay before executing the activity.
Execute the workflow to add text at the specified bookmark location in the Word document.
Example:
​
Consider an example where the "Set Bookmark Content" activity is used to add a specific text ("Automation is powerful") at a bookmark named "Description" in a Word document:
Set Bookmark Content:
  Bookmark Name: "Description"
  Bookmark Text: "Automation is powerful"
In this example, the activity inserts the text "Automation is powerful" at the bookmark named "Description" within the Word document.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Replace Text/index.html

Replace Text
AutomatR.Word.Activities.ReplaceText
The "Replace Text" activity in AutomatR is part of the Word activities package, allowing you to replace all instances of specific text in a Word document with another specified text. This activity is designed to facilitate dynamic text replacement during automation workflows.
Properties
​
Name
Description
Input
Search For
Specifies the text to be searched for and replaced. String variables containing the text to search for.
Replace With
Specifies the text to replace the searched text. String variables containing the replacement text.
Replace All
If checked, replaces all occurrences of the searched text with the replacement text. Boolean variables containing the flag for replacing all occurrences.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Replace Text" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Replace Text" activity onto the workflow.
Configure the properties by specifying the text to search for, the replacement text, and whether to replace all occurrences.
Optionally, configure the delay before executing the activity.
Execute the workflow to replace the specified text in the Word document.
Example:
​
Consider an example where the "Replace Text" activity is used to replace the occurrences of the text "OldCompanyName" with "NewCompanyName" in a Word document:
Replace Text:
  Search For: "OldCompanyName"
  Replace With: "NewCompanyName"
  Replace All: true
In this example, the activity searches for all occurrences of "OldCompanyName" in the Word document and replaces them with "NewCompanyName". The "Replace All" option is set to 
true
 to replace all occurrences.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Save Document As PDF/index.html

Save Document As PDF
AutomatR.Word.Activities.SaveDocumentAsPDF
The "Save Document As PDF" activity in AutomatR is part of the Word activities package, allowing you to export a Word document in PDF format. This activity provides the flexibility to specify the document path, choose whether to overwrite existing files, and introduces a delay option for synchronization.
Properties
​
Name
Description
Input
File Path
Specifies the full path of the document on the local drive, including the filename, that you want to save as a PDF. String variables containing the document path.
Overwrite
When selected, overwrites files at the desired location. Boolean variables to determine whether to overwrite existing files.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Save Document As PDF" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Save Document As PDF" activity onto the workflow.
Configure the properties by specifying the document path and selecting the overwrite option if needed.
Optionally, configure the delay before executing the activity.
Execute the workflow to export the Word document as a PDF.
Example:
​
Consider an example where the "Save Document As PDF" activity is used to export a Word document named "Document1.docx" to PDF:
Save Document As PDF:
  File Path: "C:\Documents\Document1.docx"
  Overwrite: True
In this example, the activity exports "Document1.docx" to PDF, overwriting any existing file at the specified path if the "Overwrite" option is set to true.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Read Text/index.html

Read Text
AutomatR.Word.Activities.ReadText
The "Read Text" activity in AutomatR is part of the Word activities package, allowing you to extract text from a Word document and store it in a string variable. This activity is useful for reading the content of Word documents, enabling further processing or analysis within your automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Text" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the extracted text from the Word document as a string variable. The variable can be used for subsequent activities. String variables to store the extracted text.
How to use:
​
Drag and drop the "Read Text" activity onto the workflow.
Configure the properties by specifying the delay (if needed) and customize the display name.
Execute the workflow to read the text from the associated Word document and store it in the specified string variable.
Example:
​
Consider an example where the "Read Text" activity is used to extract and store the content of a Word document:
Read Text:
  Display Name: "Extract Document Content"
  Delay: 2
  Result: documentContent
In this example, the activity waits for 2 seconds, then reads the content of the associated Word document and stores it in the string variable "documentContent" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Word Root/index.html

Word Root
AutomatR.Word.WordRoot
The "Word Root" activity in AutomatR is part of the Word activities package, designed to select a Word document for use in the automation process. This activity establishes a scope for working with Word documents, enabling subsequent activities to perform actions within the selected document.
Properties
​
Name
Description
Input
FilePath
Enter the full path of the Word document on the local drive, including the filename (e.g., "C:\WordActivities\word.docx"). String variables containing the file path.
Visible
Determines whether the Word application is visible during the automation process. Boolean variables to set the visibility.
Password
Enter the password for the Word document if required. String variables containing the document password.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Word
Outputs the Word application instance, allowing subsequent activities to perform actions within the Word document. Variables of type 
Microsoft.Office.Interop.Word.Application
 to store the Word application instance.
How to use:
​
Drag and drop the "Word Root" activity onto the workflow.
Configure the properties by specifying the Word document's file path, delay, visibility, and password (if required).
Optionally, configure the delay before starting the activity and set the visibility of the Word application.
Execute the workflow to establish a scope for working with the selected Word document.
Example:
​
Consider an example where the "Word Root" activity is used to work with a Word document located at "C:\Documents\Sample.docx" with a delay of 2 seconds and the Word application set to be visible:
Word Root:
  FilePath: "C:\Documents\Sample.docx"
  Delay: 2
  Visible: true
  Password: "your_password"
  Word: wordAppInstance
In this example, the activity selects the Word document at the specified file path, waits for 2 seconds before starting, sets the Word application to be visible, and uses the password "your_password" if required. The Word application instance is stored in the variable "wordAppInstance" for further actions in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Save Document As/index.html

Save Document As
AutomatR.Word.Activities.SaveDocumentAs
The "Save Document As" activity in AutomatR is part of the Word activities package, allowing you to save a Word file, added to the project, as a different file with various format options. This activity provides flexibility by allowing you to specify the desired file name and choose the Word file type to save it as.
Properties
​
Name
Description
Input
Save As Type
Specifies the type of Word file to save as. You can choose from various formats, such as Word Document (.docx), Word 97-2003 Document (.doc), Web Page (.html), and Plain Text (.txt). Enum variables containing the desired file type.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Save Document As" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Save Document As" activity onto the workflow.
Configure the properties by selecting the desired file type from the "Save As Type" dropdown.
Optionally, configure the delay before executing the activity.
Execute the workflow to save the Word document with the specified file type.
Example:
​
Consider an example where the "Save Document As" activity is used to save a Word document named "Document1.docx" as a Word 97-2003 Document (.doc):
Save Document As:
  Save As Type: Word_97_2023_Document_doc
In this example, the activity saves the "Document1.docx" file as a Word 97-2003 Document (.doc). You can choose different file types based on your requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Add Picture/index.html

Add Picture
AutomatR.Word.Activities.AddPicture
The "Add Picture" activity in AutomatR is designed for Microsoft Word automation, allowing users to insert images into specified Word documents at precise positions relative to text or bookmarks. This activity enhances document customization by seamlessly integrating images into the content.
Properties
​
Name
Description
Input
Picture Path
Enter the complete path of the image, including the filename, that you want to add to the Word document. Provide the local drive path (e.g., "C:\images\pic.jpeg"). String variables containing the picture path.
Insert Relative To
Specify whether the image should be added relative to the entire document or specific text within the document. Choose from options: Document, Text.
Position Where To Insert
Provide the position where the picture needs to be inserted. Choose from options: Start, End, Before, After, Replace.
Text Occurrence
Select the occurrences of the specified text relative to which you want to add the image. Choose from options: First, Last, All, Specific.
Text To Search For
Enter the text relative to which you want to add the image. String variables containing the text to search for.
Occurrence Index
Enter the index when a specific text occurrence happens multiple times in the document. For example, if the text search appears 5 times and you want to add a picture at the 2nd occurrence, set the index value as 2. Integer variables containing the occurrence index.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (e.g., 5 seconds) to introduce a delay before starting the activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration.
How to use:
​
Drag and drop the "Add Picture" activity onto the workflow.
Configure the properties by specifying the picture path, insert relative to, position, text occurrence, and other relevant details.
Optionally, configure the delay if needed.
Execute the workflow to add the specified picture to the Word document.
Example:
​
Consider an example where the "Add Picture" activity is used to insert a picture named "image.jpg" after the first occurrence of the text "Introduction" in a Word document:
Add Picture:
  Picture Path: "C:\Images\image.jpg"
  Insert Relative To: Text
  Position Where To Insert: After
  Text Occurrence: First
  Text To Search For: "Introduction"
  Occurrence Index: 1

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Replace Picture/index.html

Replace Picture
AutomatR.Word.Activities.ReplacePicture
The "Replace Picture" activity in AutomatR is part of the Word activities package, allowing you to replace all occurrences of a picture in a Word document with another specified picture. This activity is particularly useful for dynamically updating images in Word documents during automation workflows.
Properties
​
Name
Description
Input
Find Picture With Alt Text
Specifies the alt text of the picture you want to replace. String variables containing the alt text to identify the picture.
Replace With Picture
Specifies the path of the image file to replace the identified picture. Only accepts image files. String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Replace Picture" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Height
Provides the desired height for the inserted picture. Integer variables containing the height value.
Width
Provides the desired width for the inserted picture. Integer variables containing the width value.
Output
Replace With Picture Count
Outputs the count of pictures replaced with the specified alt text. Integer variables to store the count.
How to use:
​
Drag and drop the "Replace Picture" activity onto the workflow.
Configure the properties by specifying the alt text of the picture to be replaced, the image file path for replacement, and optional settings such as delay, height, and width.
Execute the workflow to replace all occurrences of the specified alt text with the provided image.
Example:
​
Consider an example where the "Replace Picture" activity is used to replace all occurrences of a picture with alt text "CompanyLogo" in a Word document:
Replace Picture:
  Find Picture With Alt Text: "CompanyLogo"
  Replace With Picture: "C:\Images\NewLogo.png"
  Height: 100
  Width: 200
  Replace With Picture Count: replacedPictureCount
In this example, the activity searches for all pictures with alt text "CompanyLogo" in the Word document, replaces them with the image located at "C:\Images\NewLogo.png", and sets the count of replaced pictures in the variable "replacedPictureCount" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Add Hyperlink To Document/index.html

Add Hyperlink To Document
AutomatR.Word.Activities.AddHyperlinkToDocument
The "Add Hyperlink To Document" activity in AutomatR is part of the Word activities package, enabling automation processes to add hyperlinks within Microsoft Word documents. This activity simplifies the process of inserting hyperlinks with various customization options.
Properties
​
Name
Description
Input
Address
Specifies the hyperlink address to be added to the document. String variables containing the hyperlink address.
Search For Text
Specifies the text to which the hyperlink needs to be added. If specified, the hyperlink will be added relative to this text. String variables containing the text for hyperlink insertion.
Text To Display
Specifies the text to be displayed in the document, representing the hyperlink. String variables containing the display text for the hyperlink.
Insert Relative To
Specifies whether the hyperlink should be added relative to the entire document or a specific piece of text. Choose options like "Document" or "Text" from the dropdown. Enum variable of type 
WordAddPicInsertRelativeTo
.
Position Where To Insert
Specifies the position where the hyperlink needs to be inserted, such as "Start," "End," "Before," "After," or "Replace." Enum variable of type 
WordAddPicInsertPosition
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Hyperlink To Document" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Add Hyperlink To Document" activity onto the workflow.
Configure the properties by specifying the hyperlink address, display text, and optional parameters.
Choose the insertion options, such as position and relative text.
Optionally, configure the delay before executing the activity.
Execute the workflow to add the specified hyperlink to the Word document.
Example:

Consider an example where the "Add Hyperlink To Document" activity is used to add a hyperlink to the text "Click here" with the address "
https://www.example.com"
:
Add Hyperlink To Document:
  Text To Display: "Click here"
  Address: "https://www.example.com"
  Position Where To Insert: "After"
  Insert Relative To: "Text"
  Search For Text: "Insert hyperlink here"
In this example, the activity adds a hyperlink with the text "Click here" after the occurrence of the text "Insert hyperlink here" in the Word document.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Insert Header Footer/index.html

Insert Header Footer
AutomatR.Word.InsertHeaderFooter
The "Insert Header Footer" activity in AutomatR is part of the Word activities package, allowing you to add header and footer content to a Word document. This activity enhances the customization of Word documents by incorporating specific header and footer details.
Properties
​
Name
Description
Input
Footer Content
Specifies the content to be added to the footer of the Word document. String variables containing the desired footer content.
Header Content
Specifies the content to be added to the header of the Word document. String variables containing the desired header content.
Header Size
Specifies the size of the header in centimeters (e.g., 0.5cm). Float variables containing the header size.
Footer Size
Specifies the size of the footer in centimeters (e.g., 1cm). Float variables containing the footer size.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Insert Header Footer" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Insert Header Footer" activity onto the workflow.
Configure the properties by specifying the desired header and footer content, along with their respective sizes.
Optionally, configure the delay and customize the display name.
Execute the workflow to add the specified header and footer content to the Word document.
Example:
​
Consider an example where the "Insert Header Footer" activity is used to add a custom header and footer to a Word document:
Insert Header Footer:
  Display Name: "Custom Header Footer"
  Header Content: "Confidential Document"
  Footer Content: "Page Number: [Page]"
  Header Size: 1.0
  Footer Size: 1.5
In this example, the activity adds a header with the content "Confidential Document" and a footer with the content "Page Number: 
[Page]
" to the Word document. The header has a size of 1.0cm, and the footer has a size of 1.5cm.

URL: https://docs.automatr.tech/docs/Products/Activities/Word/Insert Data Table In Document/index.html

Insert DataTable In Document
AutomatR.Word.Activities.InsertDataTableInDocument
The "Insert DataTable In Document" activity in AutomatR enables you to insert a table, generated from a DataTable variable, into a Word document at a specific position relative to text or a bookmark. This activity provides flexibility in adding structured data to your Word documents.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable containing extracted data from other inbound activities. DataTable variables storing data to be inserted into the Word document.
Insert Relative To
Specifies whether the data table should be inserted relative to the entire document or a specific piece of text. Options: "Document," "Text."
Position
Specifies the position where the data table needs to be inserted. Options: "Start," "End" (if inserting relative to the entire document), "Before," "After," "Replace" (if inserting relative to text).
Text Occurrence
Specifies the occurrences of the specified text relative to which to add the data table. Options: "First," "Last," "Specific," "All."
Text to Search For
Specifies the text that needs to be searched in the document, and the data table needs to be inserted according to the specified position. String variables containing the search text.
Index Position
Specifies the index position when Text Occurrence is set to "Specific." Integer variables containing the index position.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Insert DataTable In Document" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
​
Drag and drop the "Insert DataTable In Document" activity onto the workflow.
Configure the properties by specifying the DataTable variable, insertion options, search text, and position.
Optionally, configure the delay and customize the display name.
Execute the workflow to insert the specified data table into the Word document.
Example:
​
Consider an example where the "Insert DataTable In Document" activity is used to add a table containing sales data to a Word document:
Insert DataTable In Document:
  Display Name: "Insert Sales Data"
  Data Table: salesDataTable
  Insert Relative To: "Document"
  Position: "End"
In this example, the activity inserts the "salesDataTable" into the Word document at the end.

URL: https://docs.automatr.tech/docs/Products/Activities/Environment/Get Environment Variable/index.html

Get Environment Variable
AutomatR.DefaultActivities.Environment.GetEnvironmentVariable
The "Get Environment Variable" activity in AutomatR allows you to retrieve the contents of a specified environment variable. This activity enhances the flexibility of automation workflows by providing access to environment-specific values.
Properties
​
Name
Description
Input
Variable Name
Enter the name of the environment variable whose value is to be retrieved.
Target
Select the type of environment variable to be retrieved (e.g., Process, User, or Machine).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Environment Variable" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Variable Value
Returns the value of the selected environment variable as a string. 
String
 variable or argument to store the obtained variable value.
How to use:
Drag and drop the "Get Environment Variable" activity onto the workflow.
Configure the properties by specifying the name of the environment variable and selecting the target type (Process, User, or Machine).
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the value of the specified environment variable.
Example:

Consider an example where the "Get Environment Variable" activity is used to retrieve the value of the "TEMP" environment variable:
Get Environment Variable:
  Display Name: "Get TEMP Variable"
  Variable Name: "TEMP"
  Target: Process
  Variable Value: tempValue
In this example, the activity retrieves the value of the "TEMP" environment variable for the current process, and the result is stored in the string variable "tempValue" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Environment/Set Environment Variable/index.html

Set Environment Variable
AutomatR.DefaultActivities.Environment.SetEnvironmentVariable
The "Set Environment Variable" activity in AutomatR allows you to set or update an environment variable, providing the name, value, and target type (Process, User, or Machine). This activity simplifies the process of managing environment variables within automation workflows.
Properties
​
Name
Description
Input
Variable Name
Enter the name of the environment variable to be set or updated.
Variable Value
Enter the value for the environment variable.
Target
Select the type of environment variable for setup (e.g., Process, User, or Machine).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Set Environment Variable" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Set Environment Variable" activity onto the workflow.
Configure the properties by specifying the name, value, and target type of the environment variable.
Optionally, configure the delay and customize the display name.
Execute the workflow to set or update the specified environment variable.
Example:

Consider an example where the "Set Environment Variable" activity is used to set or update the value of the "TEMP" environment variable:
Set Environment Variable:
  Display Name: "Set TEMP Variable"
  Variable Name: "TEMP"
  Variable Value: "C:\Temp"
  Target: User
In this example, the activity sets or updates the value of the "TEMP" environment variable for the user, specifying the value "C:\Temp." The operation is performed without direct output; however, the updated value can be retrieved using the "Get Environment Variable" activity if needed.

URL: https://docs.automatr.tech/docs/Products/Activities/Environment/Get Environment Folder/index.html

Get Environment Folder
AutomatR.DefaultActivities.Environment.GetEnvironmentFolder
The "Get Environment Folder" activity in AutomatR is designed to retrieve the path to the specified system special folder. This activity provides a convenient way to obtain the path of predefined system folders, enhancing the flexibility of automation workflows.
Properties
​
Name
Description
Input
Folder Name
Select the folder name for which the path has to be retrieved.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Environment Folder" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Folder Path
Returns the path of the folder specified as a string. 
String
 variable or argument to store the obtained folder path.
How to use:
Drag and drop the "Get Environment Folder" activity onto the workflow.
Configure the properties by selecting the desired system special folder for which you want to obtain the path.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the path of the specified system special folder.
Example:

Consider an example where the "Get Environment Folder" activity is used to retrieve the path of the "MyDocuments" folder:
Get Environment Folder:
  Display Name: "Get MyDocuments Path"
  Folder Name: MyDocuments
  Folder Path: myDocumentsPath
In this example, the activity retrieves the path of the "MyDocuments" folder, and the result is stored in the string variable "myDocumentsPath" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Folder/Move Folder/index.html

Move Folder
AutomatR.Dropbox.Activities.MoveFolder
The "Move Folder" activity in AutomatR is part of the Dropbox activities package, designed to move an entire folder from a source path to a destination path within the user's Dropbox account. This activity streamlines folder relocation tasks in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the path of the destination folder in Dropbox to move the entire source folder. String variables containing the destination path.
Source Path
Specifies the path of the source folder in Dropbox to be moved. String variables containing the source folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move Folder" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to Use
​
Drag and drop the "Move Folder" activity onto the workflow.
Configure the properties by specifying the source path and destination path for the folder relocation.
Optionally, configure the delay and customize the display name.
Execute the workflow to move the specified folder within Dropbox.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
The source folder will be moved along with its contents (files and subfolders).
Verify that the specified source folder exists; otherwise, an exception will be thrown.
The contents of the source folder will be moved to the destination folder, and the source folder will be deleted.
Example:
Consider an example where the "Move Folder" activity is used to move a folder named "Documents" from one location to another within Dropbox:
Move Folder:
  Display Name: "Move Documents Folder"
  Source Path: "/Folder1/Documents"
  Destination Path: "/Folder2/"
In this example, the activity moves the entire "Documents" folder from the "Folder1" directory to the "Folder2" directory within Dropbox.
Important:
 The contents of the "Documents" folder, including files and subfolders, will be moved to the "Folder2" directory, and the "Folder1/Documents" path will be deleted.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Folder/Rename Folder/index.html

Rename Folder
AutomatR.Dropbox.Activities.RenameFolder
The "Rename Folder" activity in AutomatR is part of the Dropbox activities package, designed to rename a folder within the user's Dropbox account. This activity streamlines the process of renaming folders in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the full path of the folder to be renamed in Dropbox. String variables containing the folder path. Example: "Root/FolderRename"
New Name
Specifies the new folder name. String variables containing the new folder name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Rename Folder" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs a boolean value indicating whether the folder rename operation was successful (True) or encountered errors (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Rename Folder" activity onto the workflow.
Configure the properties by specifying the folder path to be renamed, the new folder name, and optionally set the delay and customize the display name.
Execute the workflow to rename the specified folder within Dropbox.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
The "Folder Path" should include the full path of the folder to be renamed in Dropbox.
If the "New Name" includes a path separator (e.g., "
\
" or "/"), it will be treated as a nested folder structure within the original path.
Verify that the provided folder path exists and refers to a folder; otherwise, an exception will be raised.
The activity checks for existing folders with the new name and raises an exception if a conflict is detected.
Example:
Consider an example where the "Rename Folder" activity is used to rename a folder named "FolderRename" to "RenamedFolder" within Dropbox:
Rename Folder:
  Display Name: "Rename Document"
  Folder Path: "Root/FolderRename"
  New Name: "RenamedFolder"
  Result: isRenameSuccessful
In this example, the activity renames the folder "FolderRename" to "RenamedFolder" within the specified path in Dropbox. The result of the operation (success or failure) is stored in the Boolean variable "isRenameSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Folder/Copy Folder/index.html

Copy Folder
AutomatR.Dropbox.Activities.CopyFolder
The "Copy Folder" activity in AutomatR is part of the Dropbox.Folder activities package, allowing automation processes to copy folders from one location to another within a user's Dropbox. This activity simplifies folder management tasks in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the destination path of the folder in Dropbox where the copied folder should be stored. String variables containing the destination folder path.
Overwrite
When enabled, allows overwriting the destination folder and its contents if they already exist. Boolean variables to enable or disable overwriting.
Source Path
Specifies the path of the folder in Dropbox that needs to be copied. String variables containing the source folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Folder" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
Output
Result
Returns true or false based on the copy folder operation result. Boolean variables to store the operation result.
How to Use
​
Drag and drop the "Copy Folder" activity onto the workflow.
Configure the properties by specifying the source folder path, destination folder path, and optional settings like delay and overwrite.
Execute the workflow to copy the specified folder and its contents to the designated location within Dropbox.
Example
​
Consider an example where the "Copy Folder" activity is used to copy a folder named "Documents" from one location to another within Dropbox:
Copy Folder:
  Display Name: "Copy Documents Folder"
  Source Path: "/Folder1/Documents"
  Destination Path: "/Folder2/"
  Overwrite: true
In this example, the activity copies the "Documents" folder and its contents from the "Folder1" directory to the "Folder2" directory within Dropbox. The "Overwrite" option is set to true, allowing the destination folder to be overwritten if it already exists.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Folder/Upload Folder/index.html

Upload Folder
AutomatR.Dropbox.Activities.UploadFolder
The "Upload Folder" activity in AutomatR is part of the Dropbox activities package, allowing automation processes to upload an entire folder from a local drive to a user's Dropbox account. This activity streamlines the process of uploading folders, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the path of the destination folder in Dropbox where the folder will be uploaded. String variables containing the destination path.
Source Path
Specifies the full path of the folder on the local drive that you want to upload to Dropbox. String variables containing the local folder path. Example: "D:\uploadFolder"
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Upload Folder" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to Use
​
Drag and drop the "Upload Folder" activity onto the workflow.
Configure the properties by specifying the local folder path, destination folder path in Dropbox, and optionally set the delay and customize the display name.
Execute the workflow to upload the entire folder to the specified destination in Dropbox.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
The "Source Path" should include the full path of the folder on the local drive.
The "Destination Path" should specify the path of the destination folder in Dropbox where the folder will be uploaded.
If the destination folder path does not exist in Dropbox, the activity will create the folder.
Example:
Consider an example where the "Upload Folder" activity is used to upload a folder named "uploadFolder" from the local drive to a folder named "Uploads" in Dropbox:
Upload Folder:
  Display Name: "Upload to Dropbox"
  Source Path: "D:\uploadFolder"
  Destination Path: "/Uploads"
In this example, the activity uploads the entire "uploadFolder" from the local drive to the "/Uploads" folder in Dropbox, including all files and subfolders.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Folder/Get List Of Folders/index.html

Get List Of Folders
AutomatR.Dropbox.Activities.GetListOfFolders
The "Get List Of Folders" activity in AutomatR is part of the Dropbox activities package, designed to retrieve the list of folders within a specified folder or root folder on a user's Dropbox account. This activity facilitates efficient management of folders and enables further automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the path of the folder in Dropbox for obtaining the list of folders within it. String variables containing the folder path.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get List Of Folders" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs the list of folders with datatype metadata. Variables of relevant types (e.g., 
List<Metadata>
 ) to store the retrieved folders.
How to Use
​
Drag and drop the "Get List Of Folders" activity onto the workflow.
Configure the properties by specifying the folder path in Dropbox from which you want to obtain the list of folders.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the list of folders from the specified folder in Dropbox.
Example:
Consider an example where the "Get List Of Folders" activity is used to retrieve the list of folders from a root folder named "Projects" in Dropbox:
Get List Of Folders:
  Display Name: "List Projects Folders"
  Folder Path: "/Projects"
  Response: listOfFolders
In this example, the activity retrieves the list of folders from the "/Projects" root folder in Dropbox, and the list of folders is stored in the variable "listOfFolders" for further processing in the workflow.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
Verify that the specified folder path in Dropbox exists; otherwise, an exception will be thrown.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Folder/Delete Folder/index.html

Delete Folder
AutomatR.Dropbox.Activities.DeleteFolder
The "Delete Folder" activity in AutomatR is part of the Dropbox.Folder activities package, facilitating the deletion of a folder in the user's Dropbox. This activity streamlines folder management tasks in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the full path of the folder to be deleted from Dropbox (e.g., "Root/DeleteFolder"). String variables containing the folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Folder" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
Output
Result
Returns 
true
 or 
false
 depending on the success of the folder deletion. Variables of type 
bool
 to store the operation result.
How to Use
​
Drag and drop the "Delete Folder" activity onto the workflow.
Configure the properties by specifying the full path of the folder to be deleted from Dropbox.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified folder from Dropbox.
Example
​
Consider an example where the "Delete Folder" activity is used to delete a folder named "DeleteFolder" in Dropbox:
Delete Folder:
  Display Name: "Delete Folder"
  Folder Path: "Root/DeleteFolder"
  Result: isDeleteSuccessful
In this example, the activity deletes the "DeleteFolder" from the root directory in Dropbox. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Scope/Dropbox Scope/index.html

Dropbox Scope
AutomatR.Dropbox.Activities.DropboxScope
The "Dropbox Scope" activity in AutomatR is designed to set up Dropbox OAuth authentication for a user, allowing subsequent Dropbox activities to be executed securely within the established scope. This activity is essential for obtaining the required access token and client instance to interact with Dropbox services.
Prerequisite
​
To generate an API key (
Refresh Token
) for your Dropbox account, follow these steps:
Sign in to your Dropbox account at 
https://www.dropbox.com
.
Go to the Dropbox App Console by visiting the following URL: 
https://www.dropbox.com/developers/apps/create
.
Select the option "Scoped access" and click on the "Create app" button.
Provide a name for your app. This can be any name you choose.
Choose the type of access you require for your app. For example, if you need access to a user's  files, select the "Full dropbox" option.
Click on the "Create app" button.
On the app's settings page, you will find the "OAuth 2" section. Under the "OAuth 2" section, you will see the generated API key labeled as "App key." This is the 
Refresh Token
 you can use to authenticate in the AutomatR application and make API calls to Dropbox.
NOTE:
 Make sure to keep your 
Refresh Token
 secure and do not share it publicly or expose it in your application's source code. Treat it as sensitive information and store it securely.
NOTE:
 The steps provided are based on the information available up to the cutoff in September 2021. The Dropbox website and interface may have been updated since then, so it's recommended to refer to the official Dropbox documentation for the most up-to-date instructions on generating an API key (
Refresh Token
) .
Properties
​
Name
Description
Input
Auth
Enables Dropbox OAuth authentication with options to approve or reject. Allows setting up credentials securely. See the 
AuthDetails
 section for details.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Dropbox Scope" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
AuthDetails
​
The AuthDetails input property is essential for Dropbox OAuth authentication. It includes the following sub-properties:
IsCredRegistered (boolean):
 Indicates whether the credentials are already registered.
Token (string):
 The OAuth access token.
ApprovalUri (string):
 The approval URI for the user to grant access.
Note:
 Ensure that you set up the "AuthDetails" property before using the "Dropbox Scope" activity.
How to Use
​
Drag and drop the "Dropbox Scope" activity onto the workflow.
Configure the "Auth" property by clicking on it. This enables Dropbox OAuth authentication with the option to approve or reject.
Optionally, configure the delay and customize the display name.
Execute the workflow to set up the Dropbox OAuth authentication scope.
Example:
Consider an example where the "Dropbox Scope" activity is used to set up OAuth authentication for Dropbox:
Dropbox Scope:
  Display Name: "Authenticate with Dropbox"
  Auth:
    IsCredRegistered: False
    Token: ""
    ApprovalUri: approvalUriVariable
  Delay: 5
In this example, the activity sets up OAuth authentication for Dropbox, and the approval URI is stored in the variable "approvalUriVariable" for further use.
Important Notes:
The activity must be placed before any other Dropbox activities to establish the authentication scope.
Ensure that the "AuthDetails" property is correctly configured for proper authentication.
For more information, refer to the 
Dropbox API documentation
.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Get List Of Files/index.html

Get List Of Files
AutomatR.Dropbox.Activities.GetListOfFiles
The "Get List Of Files" activity in AutomatR is part of the Dropbox activities package, designed to retrieve the list of files within a specified folder on a user's Dropbox account. This activity facilitates efficient management of files and enables further automation workflows.
Properties
​
Name
Description
Input
Folder Path
Specifies the path of the folder in Dropbox for obtaining the list of files. String variables containing the folder path.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get List Of Files" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs the list of files with datatype metadata. Variables of relevant types (e.g., 
List<Metadata>
) to store the retrieved files.
How to Use
​
Drag and drop the "Get List Of Files" activity onto the workflow.
Configure the properties by specifying the folder path in Dropbox from which you want to obtain the list of files.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the list of files from the specified folder in Dropbox.
Example:
Consider an example where the "Get List Of Files" activity is used to retrieve the list of files from a folder named "Documents" in Dropbox:
Get List Of Files:
  Display Name: "List Documents Files"
  Folder Path: "/Documents"
  Response: listOfFiles
In this example, the activity retrieves the list of files from the "/Documents" folder in Dropbox, and the list of files is stored in the variable "listOfFiles" for further processing in the workflow.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
Verify that the specified folder path in Dropbox exists; otherwise, an exception will be thrown.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Create Shared Link/index.html

Create Shared Link
AutomatR.Dropbox.Activities.CreateSharedLink
The "Create Shared Link" activity in AutomatR is part of the Dropbox.Files activities package, allowing users to generate a shared link for a file or folder in a user's Dropbox. This activity simplifies the process of sharing files or folders with others, enhancing collaboration within automation workflows.
Properties
​
Name
Description
Input
File Path
Specifies the path of the file or folder in Dropbox for which a shared link will be generated. String variables containing the file or folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Shared Link" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
Output
Shared Link
Returns a shared link as a string. Variables of type 
SharedLinkMetadata
 to store the generated shared link.
How to Use
​
Drag and drop the "Create Shared Link" activity onto the workflow.
Configure the properties by specifying the file or folder path for which the shared link will be generated.
Optionally, configure the delay and customize the display name.
Execute the workflow to generate a shared link for the specified file or folder in Dropbox.
Example
​
Consider an example where the "Create Shared Link" activity is used to generate a shared link for a file named "document.txt" within Dropbox:
Create Shared Link:
  Display Name: "Generate Document Link"
  File Path: "/Folder1/document.txt"
  Shared Link: documentLink
In this example, the activity generates a shared link for the "document.txt" file within the "Folder1" directory in Dropbox. The generated shared link is stored in the 
documentLink
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Delete File/index.html

Delete File
AutomatR.Dropbox.Activities.DeleteFile
The "Delete File" activity in AutomatR is part of the Dropbox.Files activities package, facilitating the deletion of a file in the user's Dropbox. This activity streamlines file management tasks in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
File Path
Specifies the full path of the file to be deleted from Dropbox, including the file name (e.g., "Root/DeleteFile/File1.txt"). String variables containing the file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
Output
Result
Returns 
true
 or 
false
 depending on the success of the file deletion. Variables of type 
bool
 to store the operation result.
How to Use
​
Drag and drop the "Delete File" activity onto the workflow.
Configure the properties by specifying the full path of the file to be deleted from Dropbox.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified file from Dropbox.
Example
​
Consider an example where the "Delete File" activity is used to delete a file named "File1.txt" within a folder named "DeleteFile" in Dropbox:
Delete File:
  Display Name: "Delete Document"
  File Path: "Root/DeleteFile/File1.txt"
  Result: isDeleteSuccessful
In this example, the activity deletes the "File1.txt" from the "DeleteFile" directory in Dropbox. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Move File/index.html

Move File
AutomatR.Dropbox.Activities.MoveFile
The "Move File" activity in AutomatR is part of the Dropbox activities package, designed to move a file from a source path to a destination path within the user's Dropbox account. This activity streamlines file relocation tasks in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the path of the destination folder in Dropbox to move the specific file. String variables containing the destination path.
Source Path
Specifies the path of the source folder in Dropbox to move the specific file. String variables containing the source path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Move File" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Overwrite
When enabled, allows overwriting the existing file with the specified file in the destination path. Boolean variables containing the overwrite setting.
Output
Result
Outputs a boolean variable that indicates whether or not the specified file was moved successfully. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Move File" activity onto the workflow.
Configure the properties by specifying the source path, destination path, and optional settings such as delay and overwrite.
Optionally, configure the delay and customize the display name.
Execute the workflow to move the specified file within Dropbox.
Example:
Consider an example where the "Move File" activity is used to move a file named "document.txt" from one folder to another within Dropbox:
Move File:
  Display Name: "Move Document File"
  Source Path: "/Folder1/document.txt"
  Destination Path: "/Folder2/"
  Overwrite: true
  Result: isMoveSuccessful
In this example, the activity moves the "document.txt" file from the "Folder1" directory to the "Folder2" directory within Dropbox. The result of the operation (success or failure) is stored in the Boolean variable "isMoveSuccessful" for further handling in the workflow.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
Verify that the specified source file exists; otherwise, an exception will be thrown.
Optionally, configure the overwrite setting to replace an existing file with the specified file.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Copy File/index.html

Copy File
AutomatR.Dropbox.Activities.CopyFile
The "Copy File" activity in AutomatR is part of the Dropbox.Files activities package, facilitating the copying of a file to a different location within the user's Dropbox. This activity simplifies file management tasks in Dropbox, providing efficient automation workflows.
Properties
​
Name
Description
Input
Destination Folder Path
Specifies the path of the folder in Dropbox where the copied file should be stored. String variables containing the destination folder path.
Overwrite
When enabled, allows overwriting the destination file if it already exists. Boolean variables to enable or disable overwriting.
Source File Path
Specifies the path of the file in Dropbox that needs to be copied. String variables containing the source file path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy File" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
How to Use
​
Drag and drop the "Copy File" activity onto the workflow.
Configure the properties by specifying the source file path, destination folder path, and optional settings like delay and overwrite.
Execute the workflow to copy the specified file to the designated location within Dropbox.
Example
​
Consider an example where the "Copy File" activity is used to copy a file named "document.txt" from one folder to another within Dropbox:
Copy File:
  Display Name: "Copy Document File"
  Source File Path: "/Folder1/document.txt"
  Destination Folder Path: "/Folder2/"
  Overwrite: true
In this example, the activity copies the "document.txt" file from the "Folder1" directory to the "Folder2" directory within Dropbox. The "Overwrite" option is set to true, allowing the destination file to be overwritten if it already exists.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Upload Files/index.html

Upload Files
AutomatR.Dropbox.Activities.UploadFile
The "Upload File" activity in AutomatR is part of the Dropbox activities package, facilitating the upload of a file from a local drive to a user's Dropbox account. This activity streamlines the process of uploading files, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Destination Path
Specifies the path of the destination folder in Dropbox where the file will be uploaded. String variables containing the destination path.
File Path
Specifies the full path of the file on the local drive that you want to upload to Dropbox. String variables containing the local file path. Example: "D:\uploadFile\dropbox.txt"
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Upload File" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to Use
​
Drag and drop the "Upload File" activity onto the workflow.
Configure the properties by specifying the local file path, destination folder path in Dropbox, and optionally set the delay and customize the display name.
Execute the workflow to upload the specified file to the specified destination in Dropbox.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
The "File Path" should include the full path of the file on the local drive, including the file name and extension.
The "Destination Path" should specify the path of the destination folder in Dropbox where the file will be uploaded.
If the destination folder path does not exist in Dropbox, the activity will raise an exception.
Example:
Consider an example where the "Upload File" activity is used to upload a file named "dropbox.txt" from the local drive to a folder named "Uploads" in Dropbox:
Upload File:
  Display Name: "Upload to Dropbox"
  File Path: "D:\uploadFile\dropbox.txt"
  Destination Path: "/Uploads"
In this example, the activity uploads the "dropbox.txt" file from the local drive to the "/Uploads" folder in Dropbox.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Rename File/index.html

Rename File
AutomatR.Dropbox.Activities.RenameFile
The "Rename File" activity in AutomatR is part of the Dropbox activities package, designed to rename a file within the user's Dropbox account. This activity streamlines the process of renaming files in Dropbox, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
File Path
Specifies the full path of the file to be renamed in Dropbox, including the file name. String variables containing the file path. Example: "Root/DeleteFile/File1.txt"
New Name
Specifies the new file name for the file. String variables containing the new file name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Rename File" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
Output
Result
Outputs a boolean value indicating whether the file rename operation was successful (True) or encountered errors (False). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to Use
​
Drag and drop the "Rename File" activity onto the workflow.
Configure the properties by specifying the file path to be renamed, the new file name, and optionally set the delay and customize the display name.
Execute the workflow to rename the specified file within Dropbox.
Important Notes:
Ensure that the activity is placed within a "Dropbox Scope" activity to establish the necessary authentication scope.
The "File Path" should include the full path, including the file name, of the file to be renamed in Dropbox.
If the "New Name" includes a file extension, it must match the original file's extension; otherwise, an error will be thrown.
Verify that the provided file path exists and refers to a file; otherwise, an exception will be raised.
Example:
Consider an example where the "Rename File" activity is used to rename a file named "File1.txt" to "NewFile.txt" within Dropbox:
Rename File:
  Display Name: "Rename Document"
  File Path: "Root/DeleteFile/File1.txt"
  New Name: "NewFile.txt"
  Result: isRenameSuccessful
In this example, the activity renames the file "File1.txt" to "NewFile.txt" within the specified path in Dropbox. The result of the operation (success or failure) is stored in the Boolean variable "isRenameSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Dropbox/Files/Download Files/index.html

Download Files
AutomatR.Dropbox.Activities.DownloadFiles
The "Download Files" activity in AutomatR is part of the Dropbox activities package, allowing automation processes to download files from a user's Dropbox account. This activity simplifies the process of retrieving files from Dropbox and storing them locally on your machine.
Properties
​
Name
Description
Input
Destination Path
Specifies the path of the local folder where the downloaded files will be stored. String variables containing the destination folder path on your local drive.
Server Path
Specifies the path of the source folder in Dropbox from which files will be downloaded. String variables containing the source folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download Files" activity. Integer variables containing the delay duration. Example: 5 seconds i.e. 5.
How to use:
Drag and drop the "Download Files" activity onto the workflow.
Configure the properties by specifying the server path (source folder in Dropbox), destination path (local folder for downloaded files), and optionally set a delay or customize the display name.
Execute the workflow to download files from Dropbox to the specified local folder.
Example:

Consider an example where the "Download Files" activity is used to download files from the Dropbox folder "/Documents" to the local folder "C:\DownloadedFiles":
Download Files:
  Display Name: "Download Documents"
  Server Path: "/Documents"
  Destination Path: "C:\DownloadedFiles"
In this example, the activity downloads files from the Dropbox folder "/Documents" and stores them in the local folder "C:\DownloadedFiles" on your machine.
Note:
The activity should be placed within a "Dropbox Scope Activity" for proper authentication.
Ensure that the provided paths are valid, and the necessary permissions are granted in the Dropbox account.

URL: https://docs.automatr.tech/docs/Products/Activities/API/Http Request/index.html

HTTP Request
AutomatR.DeafultActivities.API.HTTPRequest
The "HTTP Request" activity in AutomatR facilitates performing HTTP requests to a specified web API. This versatile activity supports various request methods such as GET, POST, and DELETE, allowing users to interact with APIs and retrieve responses for further processing.
Properties
​
Name
Description
Input
Body
Specifies the body of the HTTP request as a 
string
. This property is required for POST requests and can be used for other methods as needed.
URL
Specifies the endpoint URL to which the HTTP request should be sent. Provide a 
string
 variable containing the URL. This property is required.
Headers
Specifies custom headers to include in the HTTP request. Enter headers in 
dictionary
 format, where the keys represent header names and values represent header values.
Method
Specifies the HTTP request method to be used when calling the API (e.g., POST, DELETE, GET). This property is required.
FormData
Allows entering form data through a wizard. This property is optional and can be configured for specific use cases, especially for POST requests.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "HTTP Request" activity. This optional delay can be used to manage synchronization or pacing issues. 
Integer
 variables containing the delay duration (e.g., 5 for 5 seconds).
Output
Response
Outputs the response received from the HTTP request as a 
string
 variable. This variable contains the 
HttpResponseMessage
 from the API call, providing details about the response.
How to use:
Drag and drop the "HTTP Request" activity onto the workflow.
Configure the properties by specifying the URL, method, headers, body, and any optional parameters.
Optionally, configure the delay to control the timing of the HTTP request.
Execute the workflow to perform the HTTP request and retrieve the response.
Example:

Consider an example where the "HTTP Request" activity is used to send a POST request to an API endpoint:
HTTP Request:
  URL: "https://api.example.com/data"
  Method: POST
  Headers:
    - Key: "Authorization"
      Value: "Bearer {your_access_token}"
    - Key: "Content-Type"
      Value: "application/json"
  Body: "{ 'key': 'value' }"
  Delay: 2
  Response: apiResponse
In this example, the activity sends a POST request to "
https://api.example.com/data"
 with specified headers and a JSON body. The response from the API is stored in the variable 
apiResponse
 for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Messages/Delete Message/index.html

Delete Messages
AutomatR.Slack.Activities.DeleteMessage
The "Delete Messages" activity in AutomatR is part of the Slack Messages activities package, leveraging the Slack API to delete a specific message sent by a user. This activity provides the capability to manage and remove messages within a Slack channel.
Properties
​
Name
Description
Input
Channel Name
The name of the channel from which the message needs to be deleted. String variables containing the desired channel name.
Time Stamp
Timestamp of the message to be deleted. String variables containing the timestamp of the message to be deleted.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Messages" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns 
true
 or 
false
 based on the success of the message deletion. Boolean variables indicating whether the message deletion was successful or encountered any errors.
How to use:
Drag and drop the "Delete Messages" activity onto the workflow.
Configure the properties by specifying the channel name and timestamp of the message to be deleted.
Optionally, configure the delay.
Execute the workflow to delete the specified message within the Slack channel.
Example:

Consider an example where the "Delete Messages" activity is used to delete a message with a timestamp "1639500000" from a channel named "General":
Delete Messages:
  Delay: 2
  Channel Name: "General"
  Time Stamp: "1639500000"
  Result: isDeleteSuccessful
In this example, the activity attempts to delete the message from the "General" channel with the specified timestamp. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Messages/Get Replies/index.html

Get Replies
AutomatR.Slack.Activities.GetReplies
The "Get Replies" activity in AutomatR is part of the Slack Messages activities package, utilizing the Slack API to retrieve replies associated with a specific message. This activity facilitates the integration of Slack messaging functionality into automation workflows.
Properties
​
Name
Description
Input
Channel Name
The name of the channel from which to retrieve replies. String variables containing the desired channel name.
Time Stamp
The time stamp around which replies are fetched. String variables containing the timestamp for fetching replies.
Limit
The limit of the maximum number of replies to retrieve. Integer variables indicating the maximum number of replies to fetch.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Replies" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Replies Response
Outputs a list of replies associated with the specified message. Variables of type 
List<RepliesResponse>
 to store the reply responses.
How to use:
Drag and drop the "Get Replies" activity onto the workflow.
Configure the properties by specifying the channel name, timestamp, and optional limit for reply retrieval.
Optionally, configure the delay.
Execute the workflow to retrieve replies associated with the specified message in the Slack channel.
Example:

Consider an example where the "Get Replies" activity is used to retrieve the most recent 5 replies from a message in the "General" channel:
Get Replies:
  Delay: 2
  Channel Name: "General"
  Time Stamp: "1645623498.123456"
  Limit: 5
  Replies Response: repliesList
In this example, the activity fetches the most recent 5 replies associated with the message at the specified timestamp in the "General" channel. The response is stored in a variable named "repliesList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Messages/Get Messages/index.html

Get Messages
AutomatR.Slack.Activities.GetMessages
The "Get Messages" activity in AutomatR is part of the Slack Messages activities package, leveraging Slack APIs to retrieve the most recent messages from a specified conversation. This activity facilitates the integration of Slack messaging functionality into automation workflows.
Properties
​
Name
Description
Input
Channel Name
The name of the channel from which to retrieve messages. String variables containing the desired channel name.
Limit
The limit of the maximum number of messages to retrieve. Integer variables indicating the maximum number of messages to fetch.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Messages" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Message Response
Outputs a list of messages retrieved from the specified channel. Variables of type 
List<MessageResponse>
 to store the message responses.
How to use:
Drag and drop the "Get Messages" activity onto the workflow.
Configure the properties by specifying the channel name and optional limit for message retrieval.
Optionally, configure the delay.
Execute the workflow to retrieve messages from the specified Slack channel.
Example:

Consider an example where the "Get Messages" activity is used to retrieve the most recent 10 messages from a channel named "General":
Get Messages:
  Delay: 2
  Channel Name: "General"
  Limit: 10
  Message Response: messagesList
In this example, the activity fetches the most recent 10 messages from the "General" channel and stores the response in a variable named "messagesList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Messages/Reply/index.html

Reply
AutomatR.Slack.Activities.Reply
The "Reply" activity in AutomatR is part of the Slack Messages activities package, utilizing the Slack API to send a reply to a specific message in a Slack channel. This activity is designed for scenarios where you need to reply to a message with a specific body of text.
Properties
​
Name
Description
Input
Channel Name
The name of the Slack channel to which you want to send the reply. String variables containing the desired channel name.
Reply Message
The body of text that you want to send in your reply. String variables containing the text for the reply.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Reply" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the reply operation was successful. True indicates success, while False indicates failure. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Reply" activity onto the workflow.
Configure the properties by specifying the channel name and reply message.
Optionally, configure the delay.
Execute the workflow to send the specified reply to the Slack channel.
Example:

Consider an example where the "Reply" activity is used to reply to a message in the "general" channel:
Reply:
  Delay: 2
  Channel Name: "general"
  Reply Message: "Hello, this is the reply message."
  Result: replyResult
In this example, the activity sends the specified reply message to the "general" channel with a 2-second delay. The result of the operation (success or failure) is stored in the Boolean variable "replyResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Messages/Send Message/index.html

Send Message
AutomatR.Slack.Activities.SendMessage
The "Send Message" activity in AutomatR is part of the Slack Messages activities package, utilizing the Slack API to send messages to specific channels or direct/group messages. This activity is designed for scenarios where you need to programmatically send messages to Slack channels or direct/group messages.
Properties
​
Name
Description
Input
Message
The body of text that you want to send as a message. String variables containing the text for the message.
Channel Name
The name of the Slack channel to which you want to send the message. String variables containing the desired channel name.
Conversation Type
Specifies the type of conversation you want to send messages to (e.g., Channel, Direct Message, Group Message). String variables containing the conversation type.
User Name
The name of the user whose direct/group message you want to get messages from. String variables containing the user name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Message" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the message sending operation was successful. True indicates success, while False indicates failure. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Send Message" activity onto the workflow.
Configure the properties by specifying the conversation type (Channel, Direct Message, Group Message), channel name or user name, and the message text.
Optionally, configure the delay.
Execute the workflow to send the specified message to the Slack channel or user.
Example:

Consider an example where the "Send Message" activity is used to send a message to a Slack channel named "general":
Send Message:
  Delay: 2
  Conversation Type: "Channel"
  Channel Name: "general"
  Message: "Hello, this is a sample message."
  Result: messageResult
In this example, the activity sends the specified message to the "general" channel with a 2-second delay. The result of the operation (success or failure) is stored in the Boolean variable "messageResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Scope/Slack Scope/index.html

Slack Scope
AutomatR.Slack.Activities.SlackScope
The "Slack Scope" activity in AutomatR establishes a connection between AutomatR and your Slack app using Token Authentication. This connection authorizes a robot to call the Slack APIs and access resources on your behalf. The activity requires an API Access token for authentication.
Properties
​
Name
Description
Input
API Token
The API Access token used for authentication. This token is required to establish a connection with the Slack app. String variables containing the API Access token.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Slack Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Slack Scope" activity onto the workflow.
Configure the properties by specifying the API Access token for authentication.
Optionally, configure the delay.
Inside the "Slack Scope" activity, you can include other Slack-related activities to perform actions on Slack using the established connection.
Example:

Consider an example where the "Slack Scope" activity is used to establish a connection with Slack:
Slack Scope:
  Delay: 2
  API Token: "your-api-token"
In this example, the activity establishes a connection with Slack using the provided API Access token with a 2-second delay. The connection details are stored in context properties for further use in the workflow.
The "Slack Scope" activity doesn't produce direct output properties. Instead, it establishes a connection to Slack, and the connection details are stored in the context properties for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Download File/index.html

Download File
AutomatR.Slack.Activities.DownloadFile
The "Download File" activity in AutomatR is part of the Slack Channel activities package, utilizing the Slack API to download a specified file from a channel and save it to a local destination. This activity facilitates the retrieval of files shared within a Slack channel, enhancing automation workflows.
Properties
​
Name
Description
Input
Channel Name
The name of the channel from which the file needs to be downloaded. String variables containing the desired channel name.
File Name
The name of the file to be downloaded. String variables containing the desired file name.
Local Path
The local destination where the downloaded file will be saved. String variables containing the local path. Example: "C:
\
AutomatR
\
DownloadExample.xlsx"
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download File" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs 
true
 if the file download was successful, and 
false
 otherwise. Boolean variables indicating whether the file download was successful or encountered any errors.
How to use:
Drag and drop the "Download File" activity onto the workflow.
Configure the properties by specifying the channel name, file name, and local path for the downloaded file.
Optionally, configure the delay.
Execute the workflow to download the specified file from the Slack channel.
Example:

Consider an example where the "Download File" activity is used to download a file named "example.txt" from a channel named "General":
Download File:
  Delay: 2
  Channel Name: "General"
  File Name: "example.txt"
  Local Path: "C:\\AutomatR\\DownloadedFiles\\"
  Result: isDownloadSuccessful
In this example, the activity attempts to download the file from the "General" channel with the specified name and saves it to the local path "C:
\
AutomatR
\
DownloadedFiles
\
". The result of the operation (success or failure) is stored in the Boolean variable "isDownloadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Create Channel/index.html

Create Channel
AutomatR.Slack.Activities.CreateChannel
The "Create Channel" activity in AutomatR is part of the Slack Channel activities package, leveraging the Slack API to create a new channel within your workspace. This activity facilitates the automation of channel creation, supporting enhanced collaboration and communication workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Channel" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Is Private Channel
Specifies whether the new channel will be public or private based on a boolean value. Boolean variables indicating whether the channel should be private.
Channel Name
The name of the channel that you want to create. String variables containing the desired channel name.
Output
Channel Data
Returns the response as created channel data. Variables of type 
CreateChannelResult
 to store information about the newly created channel.
CreateChannelResult Class
​
Property
Description
created
The timestamp indicating when the channel was created.
id
The unique identifier for the channel.
is_channel
Indicates whether the channel is a general channel.
name
The name of the channel.
is_group
Indicates whether the channel is a group channel.
is_mpim
Indicates whether the channel is an MPIM (multiparty instant messaging) channel.
isPrivate
Indicates whether the channel is private.
How to use:
Drag and drop the "Create Channel" activity onto the workflow.
Configure the properties by specifying the channel name and optionally indicating whether it should be private.
Optionally, configure the delay.
Execute the workflow to create the specified channel.
Example:

Consider an example where the "Create Channel" activity is used to create a new public channel named "TeamAnnouncements":
Create Channel:
  Delay: 2
  Channel Name: "TeamAnnouncements"
  Is Private Channel: false
  Channel Data: NewChannelData
In this example, the activity creates a new public channel named "TeamAnnouncements," and the result is stored in the variable "NewChannelData" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Leave Channel/index.html

Leave Channel
AutomatR.Slack.Activities.LeaveChannel
The "Leave Channel" activity in AutomatR is part of the Slack Channel activities package, utilizing the Slack API to enable you to leave a channel that you're currently a member of. This activity supports seamless channel management within automation workflows.
Properties
​
Name
Description
Input
Channel Name
The name of the channel from which to leave. String variables containing the desired channel name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Leave Channel" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the user successfully left the channel. True indicates success, while False indicates failure. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Leave Channel" activity onto the workflow.
Configure the properties by specifying the channel name.
Optionally, configure the delay.
Execute the workflow to leave the specified channel.
Example:

Consider an example where the "Leave Channel" activity is used to leave the "General" channel:
Leave Channel:
  Delay: 2
  Channel Name: "General"
  Result: leaveResult
In this example, the activity attempts to leave the "General" channel with a 2-second delay. The result of the operation (success or failure) is stored in the Boolean variable "leaveResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Channels List/index.html

Channels List
AutomatR.Slack.Activities.ChannelsList
The "Channels List" activity in AutomatR is part of the Slack Channel activities package, providing functionality to retrieve the list of channels associated with a Slack user's account. This activity enables automation workflows to obtain information about available channels, supporting enhanced collaboration and communication automation.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Channels List" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the list of channels as a response. List of 
ChannelsListResponse
 objects containing channel information.
ChannelsListResponse Class
​
Property
Description
id
The unique identifier for the channel.
name
The name of the channel.
is_channel
Indicates whether the channel is a general channel.
is_private
Indicates whether the channel is a private channel.
is_member
Indicates whether the user is a member of the channel.
is_im
Indicates whether the channel is an IM (instant messaging) channel.
is_mpim
Indicates whether the channel is an MPIM (multiparty instant messaging) channel.
is_group
Indicates whether the channel is a group channel.
created
The timestamp indicating when the channel was created.
How to use:
Drag and drop the "Channels List" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve the list of channels.
Example:

Consider an example where the "Channels List" activity is used to obtain the list of channels associated with a Slack user's account:
Channels List:
  Delay: 2
  Result: SlackChannelsList
In this example, the activity retrieves the list of channels, and the result is stored in the variable "SlackChannelsList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Users List/index.html

Users List
AutomatR.Slack.Activities.UsersList
The "Users List" activity in AutomatR is part of the Slack activities package, allowing automation processes to retrieve a list of users in a Slack admin user's account. This activity provides information about each user, such as their ID, real name, username, and role.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Users List" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as a list of user details in the form of 
List<UsersListResponse>
. This includes information such as user ID, real name, username, and role. Variables of relevant types (e.g., 
List<UsersListResponse>
 variables) to store the user list.
How to use:
Drag and drop the "Users List" activity onto the workflow.
Configure the properties, such as the optional delay.
Execute the workflow to retrieve the list of users from the Slack admin user's account.
Example:

Consider an example where the "Users List" activity is used to retrieve the list of users:
Users List:
  Delay: 2
  Result: userList
In this example, the activity retrieves the list of users with a 2-second delay. The list of users is stored in the 
userList
 variable for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Remove From Channel/index.html

Remove From Channel
AutomatR.Slack.Activities.RemoveFromChannel
The "Remove From Channel" activity in AutomatR is part of the Slack Channel activities package, utilizing the Slack API to remove a specified Slack user from an existing channel. This activity is designed for scenarios where you, as a member and administrator of the channel, need to manage the channel membership by removing a particular user.
Properties
​
Name
Description
Input
Channel Name
The name of the channel from which the user is to be removed. String variables containing the desired channel name.
User Name
The name of the Slack user to be removed from the channel. String variables containing the desired user name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Remove From Channel" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a Boolean value indicating whether the user removal from the channel was successful. True indicates success, while False indicates failure. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Remove From Channel" activity onto the workflow.
Configure the properties by specifying the channel name and user name.
Optionally, configure the delay.
Execute the workflow to remove the specified user from the channel.
Example:

Consider an example where the "Remove From Channel" activity is used to remove a user named "john_doe" from the "General" channel:
Remove From Channel:
  Delay: 2
  Channel Name: "General"
  User Name: "john_doe"
  Result: removalResult
In this example, the activity attempts to remove the user "john_doe" from the "General" channel with a 2-second delay. The result of the operation (success or failure) is stored in the Boolean variable "removalResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Slack/Channel/Add Member To Channel/index.html

Add Member To Channel
AutomatR.Slack.Activities.AddMembertoChannel
The "Add Member To Channel" activity in AutomatR is part of the Slack Channel activities package, facilitating the addition of users to a specified Slack channel. This activity streamlines collaboration by automating the process of inviting users to join specific channels.
Properties
​
Name
Description
Input
Channel Name
Enter the channel name to which you want to add the specified users. Required argument.
User Name
Enter the user name of the user to be added to the channel. Required argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Member To Channel" activity. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns true or false based on the success of the member addition operation. Boolean variable to store the operation result.
How to use:
Drag and drop the "Add Member To Channel" activity onto the workflow.
Configure the properties by specifying the channel name and user name.
Optionally, configure the delay.
Execute the workflow to add the specified user to the Slack channel.
Example:

Consider an example where the "Add Member To Channel" activity is used to add a user named "JohnDoe" to a Slack channel named "General":
Add Member To Channel:
  Channel Name: "General"
  User Name: "JohnDoe"
  Delay: 2
  Result: isMemberAdded
In this example, the activity adds the user "JohnDoe" to the "General" channel in Slack. The result of the operation (success or failure) is stored in the Boolean variable "isMemberAdded" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Delete Bucket Policy/index.html

Delete Bucket Policy
AutomatR.AWS.DeleteBucketPolicy
The "Delete Bucket Policy" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, allowing automation processes to delete the ongoing bucket policy associated with an S3 bucket within Amazon Web Services (AWS). This activity streamlines the process of managing bucket policies, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the AWS region where the S3 bucket with the policy is located. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the S3 bucket for which the bucket policy will be deleted. String variables containing the bucket name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Bucket Policy" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Bucket Policy" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and bucket name.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the ongoing bucket policy associated with the specified S3 bucket within AWS.
Example:

Consider an example where the "Delete Bucket Policy" activity is used to remove the policy from an S3 bucket named "MyDataBucket" located in the "us-west-2" region:
Delete Bucket Policy:
  Display Name: "Delete Policy from MyDataBucket"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket Name: "MyDataBucket"
In this example, the activity deletes the ongoing bucket policy associated with the S3 bucket named "MyDataBucket" in the "us-west-2" region.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Bucket Creation/index.html

Bucket Creation
AutomatR.AWS.Activities.BucketCreationActivity
The "Bucket Creation" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, allowing automation processes to create a new S3 bucket within Amazon Web Services (AWS). This activity streamlines the process of setting up storage for your data in the cloud.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the Amazon S3 service. String variables containing the secret access key.
Region
Specifies the Amazon S3 region in which the bucket is to be created. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the S3 bucket to be created. Follow S3 bucket naming conventions. String variables containing the bucket name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Bucket Creation" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Bucket Creation" operation, indicating whether the bucket was successfully created or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Bucket Creation" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and the desired bucket name.
Optionally, configure the delay and customize the display name.
Execute the workflow to create the specified S3 bucket within AWS.
Example:

Consider an example where the "Bucket Creation" activity is used to create a new S3 bucket named "my-automatr-bucket" in the US West (Oregon) region:
Bucket Creation:
  Display Name: "Create AutomatR Bucket"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket Name: "my-automatr-bucket"
  Result: isBucketCreated
In this example, the activity attempts to create an S3 bucket named "my-automatr-bucket" in the specified AWS region. The result of the operation (success or failure) is stored in the Boolean variable "isBucketCreated" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Bucket Delete/index.html

Bucket Delete
AutomatR.AWS.Activities.DeleteBucket
The "Delete Bucket" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, allowing automation processes to delete a specific S3 bucket within Amazon Web Services (AWS). This activity streamlines the bucket deletion process, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the AWS region where the S3 bucket is located. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the S3 bucket to be deleted. String variables containing the bucket name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Bucket" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Delete Bucket" operation, indicating whether the bucket deletion was successful or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Bucket" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and bucket name.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified S3 bucket within AWS.
Example:

Consider an example where the "Delete Bucket" activity is used to delete an S3 bucket named "MyDataBucket" located in the "us-west-2" region:
Delete Bucket:
  Display Name: "Delete MyDataBucket"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket Name: "MyDataBucket"
  Result: isBucketDeleted
In this example, the activity attempts to delete the S3 bucket named "MyDataBucket" in the "us-west-2" region, and the result of the operation (success or failure) is stored in the Boolean variable "isBucketDeleted" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Empty Bucket/index.html

Empty Bucket
AutomatR.AWS.Activities.EmptyBucket
The "Empty Bucket" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, enabling automation processes to remove all content from a specified Amazon S3 bucket. This activity streamlines the process of emptying a bucket, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the Amazon S3 region associated with the bucket intended to be emptied. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the Amazon S3 bucket from which all content will be removed. String variables containing the bucket name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Empty Bucket" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Empty Bucket" operation, indicating whether the bucket was successfully emptied or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Empty Bucket" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, Amazon S3 region, and the name of the bucket to be emptied.
Optionally, configure the delay and customize the display name.
Execute the workflow to remove all content from the specified Amazon S3 bucket.
Example:

Consider an example where the "Empty Bucket" activity is used to remove all content from an S3 bucket named "MyDataBucket":
Empty Bucket:
  Display Name: "Empty S3 Bucket"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket Name: "MyDataBucket"
  Result: isBucketEmptied
In this example, the activity removes all content from the "MyDataBucket" S3 bucket. The result of the operation (success or failure) is stored in the Boolean variable "isBucketEmptied" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Get Bucket List/index.html

Get Bucket List
AutomatR.AWS.Activities.GetBucketList
The "Get Bucket List" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, enabling automation processes to retrieve a list of buckets in a specific Amazon S3 region. This activity streamlines the process of obtaining the names of available buckets, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the Amazon S3 region for which the list of buckets will be retrieved. Use the 
RegionEndpoint
 enumeration to set the region.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Bucket List" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Bucket List
Outputs the result of the "Get Bucket List" operation, providing a list of bucket names in the specified Amazon S3 region. Variables of type 
List<String>
 to store the list of bucket names.
How to use:
Drag and drop the "Get Bucket List" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, and Amazon S3 region.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the list of buckets in the specified Amazon S3 region.
Example:

Consider an example where the "Get Bucket List" activity is used to obtain a list of buckets in the "us-west-2" region:
Get Bucket List:
  Display Name: "Get S3 Bucket List"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket List: bucketList
In this example, the activity retrieves and outputs the list of bucket names in the "us-west-2" region. The result is stored in the 
List<String>
 variable "bucketList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Get Bucket Policy/index.html

Get Bucket Policy
AutomatR.AWS.Activities.GetBucketPolicy
The "Get Bucket Policy" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, enabling automation processes to retrieve the policy associated with a specific bucket. This activity streamlines the process of obtaining the bucket policy, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the Amazon S3 region where the bucket policy should be retrieved. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the bucket for which the policy should be retrieved. String variables containing the bucket name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Bucket Policy" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Get Bucket Policy" operation, indicating whether the policy retrieval was successful (true) or encountered errors (false). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Get Bucket Policy" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and bucket name.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the policy associated with the specified bucket.
Example:

Consider an example where the "Get Bucket Policy" activity is used to check if a policy exists for a bucket named "example-bucket" in the "us-west-2" region:
Get Bucket Policy:
  Display Name: "Check Bucket Policy"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket Name: "example-bucket"
  Result: hasBucketPolicy
In this example, the activity checks if a policy exists for the "example-bucket" in the "us-west-2" region. The result of the operation (true or false) is stored in the Boolean variable "hasBucketPolicy" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Get Bucket/index.html

Get Bucket
AutomatR.AWS.Activities.GetBucket
The "Get Bucket" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, enabling automation processes to retrieve information about a specific Amazon S3 bucket. This activity streamlines the process of obtaining details such as creation date for a specified bucket, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the Amazon S3 region associated with the bucket from which information will be retrieved. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the Amazon S3 bucket for which information will be retrieved. String variables containing the bucket name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Bucket" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Get Bucket" operation, providing the creation date of the specified bucket. Variables of relevant types (e.g., DateTime variables) to store the operation result.
How to use:
Drag and drop the "Get Bucket" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, Amazon S3 region, and the name of the bucket for which information is to be retrieved.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve information about the specified Amazon S3 bucket.
Example:

Consider an example where the "Get Bucket" activity is used to obtain the creation date of an S3 bucket named "MyDataBucket":
Get Bucket:
  Display Name: "Get S3 Bucket Info"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  Bucket Name: "MyDataBucket"
  Result: bucketCreationDate
In this example, the activity retrieves and outputs the creation date of the "MyDataBucket" S3 bucket. The result is stored in the DateTime variable "bucketCreationDate" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Buckets/Set Bucket Policy/index.html

Set Bucket Policy
AutomatR.AWS.SetBucketPolicy
The "Set Bucket Policy" activity in AutomatR is part of the AWS S3 activities package, allowing users to set the policy for a specific bucket in Amazon S3. This activity provides flexibility in managing access control to S3 buckets by defining custom policies in JSON format.
Properties
​
Name
Description
Input
Access Key ID
The encrypted access key ID for your AWS account, enabling connection to the Amazon S3 service. String variables containing the access key ID.
Secret Access Key
The encrypted secret access key ID for your AWS account, enabling connection to the Amazon S3 service. String variables containing the secret access key.
Region
The Amazon S3 region where the bucket is located. Choose from a list of available regions. RegionEndpoint variables containing the region information.
Bucket Name
The name of the S3 bucket on which the operation will be performed. String variables containing the bucket name.
Bucket Policy
The bucket policy to be set, provided as a JSON text in the form of a string variable. This policy defines access control rules for the specified bucket. String variables containing the JSON-formatted bucket policy.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
The amount of time (in seconds) to wait before executing the "Set Bucket Policy" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 1000 milliseconds or 1 sec, set it to 1.
How to use:
Drag and drop the "Set Bucket Policy" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, bucket name, and the desired bucket policy in JSON format.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to set the specified policy for the chosen S3 bucket.
Example:

Consider an example where the "Set Bucket Policy" activity is used to apply a custom access policy to an S3 bucket named "example-bucket":
Set Bucket Policy:
  Access Key ID: "your-access-key-id"
  Secret Access Key: "your-secret-access-key"
  Region: RegionEndpoint.USWest2
  Bucket Name: "example-bucket"
  Bucket Policy: "{ \"Version\": \"2012-10-17\", \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": \"s3:GetObject\", \"Resource\": [\"arn:aws:s3:::example-bucket/*\"] }] }"
In this example, the activity sets an access policy allowing users to retrieve objects from the "example-bucket" in the US West (Oregon) region.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Objects/Delete Object/index.html

Delete Object
AutomatR.AWS.Activities.DeleteObject
The "Delete Object" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, enabling automation processes to delete single or multiple objects from an Amazon S3 bucket. This activity streamlines object management tasks in AWS S3, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the AWS region associated with the S3 bucket. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the Amazon S3 bucket from which objects will be deleted. String variables containing the bucket name.
Path
Specifies the full paths of the objects to be deleted from the bucket. Use a 
List<String>
 variable to provide multiple object paths. For example, 
new List<string> {"deleteobject/deleteobj.zip", "deleteobject1/deleteobj1.zip"}
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Object" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Delete Object" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, bucket name, and object paths.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified objects from the Amazon S3 bucket.
Example:

Consider an example where the "Delete Object" activity is used to delete two objects ("deleteobject/deleteobj.zip" and "deleteobject1/deleteobj1.zip") from an S3 bucket named "my-s3-bucket" in the "us-east-1" region:
Delete Object:
  Display Name: "Delete S3 Objects"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Bucket Name: "my-s3-bucket"
  Path: ```new List<string> {"deleteobject/deleteobj.zip", "deleteobject1/deleteobj1.zip"}```
In this example, the activity deletes the specified objects from the "my-s3-bucket" in the "us-east-1" region. The success or failure of the deletion can be handled in subsequent workflow activities.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Objects/Copy Object/index.html

Copy Object
AutomatR.AWS.Activities.CopyObject
The "Copy Object" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, allowing automation processes to copy an object from one S3 bucket to another within Amazon Web Services (AWS). This activity streamlines object management tasks in S3, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the Amazon S3 service. String variables containing the secret access key.
Region
Specifies the AWS region associated with the source bucket, which is needed for copying the object. Use the 
RegionEndpoint
 enumeration to set the region.
Source Bucket Name
Specifies the name of the bucket from which the object needs to be copied. String variables containing the source bucket name.
Source Key
Specifies the name of the object that needs to be copied. String variables containing the source object key.
Destination Bucket Name
Specifies the name of the bucket where the copied object should be placed. String variables containing the destination bucket name.
Destination Key
Specifies the desired name for the copied object. String variables containing the destination object key.
Overwrite
Enables an option to overwrite the destination object if it already exists. Boolean variables to control this option.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Object" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Copy Object" operation, indicating whether the object copy was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Copy Object" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, source bucket name, source object key, destination bucket name, destination object key, and the overwrite option.
Optionally, configure the delay and customize the display name.
Execute the workflow to copy the specified object within AWS S3.
Example:

Consider an example where the "Copy Object" activity is used to copy an object named "file.txt" from one S3 bucket to another:
Copy Object:
  Display Name: "Copy File Object"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Source Bucket Name: "source-bucket"
  Source Key: "file.txt"
  Destination Bucket Name: "destination-bucket"
  Destination Key: "new-file.txt"
  Overwrite: true
  Result: isCopySuccessful
In this example, the activity attempts to copy the "file.txt" object from the "source-bucket" to the "destination-bucket" with a new name "new-file.txt". The result of the operation (success or failure) is stored in the Boolean variable "isCopySuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Objects/Download Objects From Bucket/index.html

Download Objects From Bucket
AutomatR.AWS.Activities.DownloadObjectsFromBucket
The "Download Objects From Bucket" activity in AutomatR is part of the AWS S3 (Simple Storage Service) activities package, enabling automation processes to download objects from a specified Amazon S3 bucket to a local system. This activity streamlines object retrieval tasks from an S3 bucket, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the Amazon S3 region associated with the source bucket, needed for downloading the objects. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the Amazon S3 bucket from which objects will be downloaded. String variables containing the bucket name.
Folder Path
Specifies the full local folder path where objects from the specified bucket will be downloaded. String variables containing the local folder path.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Download Objects From Bucket" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Download Objects From Bucket" operation, indicating whether the objects were successfully downloaded or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Download Objects From Bucket" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, Amazon S3 region, bucket name, and local folder path.
Optionally, configure the delay and customize the display name.
Execute the workflow to download objects from the specified Amazon S3 bucket to the local system.
Example:

Consider an example where the "Download Objects From Bucket" activity is used to download objects from an S3 bucket named "MyBucket" to the local folder path "C:\DownloadedFiles":
Download Objects From Bucket:
  Display Name: "Download S3 Objects"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Bucket Name: "MyBucket"
  Folder Path: "C:\DownloadedFiles"
  Result: isDownloadSuccessful
In this example, the activity downloads objects from the "MyBucket" S3 bucket to the local folder path "C:\DownloadedFiles". The result of the operation (success or failure) is stored in the Boolean variable "isDownloadSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Objects/Upload Objects To Bucket/index.html

Upload Objects To Bucket
AutomatR.AWS.Activities.UploadBucketObjects
The "Upload Objects To Bucket" activity in AutomatR is part of the AWS Simple Storage Service (S3) activities package, designed to facilitate the bulk upload of objects to a specified S3 bucket. This activity streamlines the process of transferring local files and directories to an S3 bucket, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon S3 service. String variables containing the access key ID.
Bucket Name
Specifies the name of the S3 bucket to which objects will be uploaded. String variables containing the bucket name.
Path
Provides the full paths of the objects that you want to upload from your local system to the bucket. You can provide the paths as a 
List<string>
 variable. Example: 
new List<string> {"D:/uploadobject/uploadobj.zip","D:/uploadobject1/uploadobj1.docx"}
Region
Specifies the Amazon S3 region associated with the source bucket, which is needed for uploading the object. RegionEndpoint variables containing the AWS region.
Secret Access Key
Provides the encrypted secret access key ID for your AWS account, enabling connection to the Amazon S3 service. String variables containing the secret access key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Upload Objects To Bucket" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Upload Objects To Bucket" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, bucket name, path, and optional delay.
Execute the workflow to upload the specified objects from the local system to the specified S3 bucket.
Example:

Consider an example where the "Upload Objects To Bucket" activity is used to upload multiple objects (files and directories) to an S3 bucket named "MyBucket":
Upload Objects To Bucket:
  Display Name: "Upload Files to S3"
  Access Key ID: "{YourAccessKey}"
  Secret Access Key: "{YourSecretKey}"
  Region: "us-east-1"
  Bucket Name: "MyBucket"
  Path: {"D:/uploadobject/uploadobj.zip", "D:/uploadobject1/uploadobj1.docx"}
In this example, the activity uploads the specified objects from the local system to the "MyBucket" S3 bucket in the "us-east-1" region. The paths of the objects are provided in the 
List<string>
 variable "Path." The operation details can be further captured based on the requirements of the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/S3/Objects/Get Object/index.html

Get Object
AutomatR.AWS.Activities.GetObject
The "Get Object" activity in AutomatR is part of the AWS S3 (Simple Storage Service) Objects activities package, enabling automation processes to retrieve details of a specific object in an AWS S3 bucket. This activity streamlines the process of obtaining information about an object within an S3 bucket, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS S3 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS S3 service. String variables containing the secret access key.
Region
Specifies the AWS region associated with the source bucket, required for getting the object. Use the 
RegionEndpoint
 enumeration to set the region.
Bucket Name
Specifies the name of the S3 bucket on which you want the operation to be performed. String variables containing the bucket name.
Object Key Name
Specifies the entire path of the object within the bucket, for example: ("Data/Object/objectkey.docx"). String variables containing the object key name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Object" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Stores the result in a variable of type 
GetObjectMetadataResponse
, providing details about the requested object. Variables of type 
GetObjectMetadataResponse
 for further activities.
How to use:
Drag and drop the "Get Object" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, bucket name, and object key name.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve details about the specified object within the S3 bucket.
Example:

Consider an example where the "Get Object" activity is used to retrieve details about an object named "objectkey.docx" in the S3 bucket "Data/Object":
Get Object:
  Display Name: "Retrieve Object Details"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Bucket Name: "Data/Object"
  Object Key Name: "objectkey.docx"
  Result: objectDetails
In this example, the activity retrieves details about the object "objectkey.docx" in the S3 bucket "Data/Object." The result is stored in the variable "objectDetails" of type 
GetObjectMetadataResponse
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Group/Add User To Group/index.html

Add User To Group
AutomatR.AWS.Activities.AddUserToGroup
The "Add User To Group" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, allowing automation processes to add a user account to a specified IAM group within Amazon Web Services (AWS).
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the secret access key.
Region
Specifies the region in which the IAM group is located. Use the 
RegionEndpoint
 enumeration to set the region.
User Name
Specifies the name of the IAM user to be added to the group. String variables containing the IAM user name.
Group Name
Specifies the name of the IAM group to which the user will be added. String variables containing the IAM group name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add User To Group" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Add User To Group" operation, indicating whether the user was successfully added to the group or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Add User To Group" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, user name, and group name.
Optionally, configure the delay and customize the display name.
Execute the workflow to add the specified IAM user to the specified IAM group within AWS.
Example:

Consider an example where the "Add User To Group" activity is used to add a user named "john_doe" to an IAM group named "Admins":
Add User To Group:
  Display Name: "Add John Doe to Admins"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-west-2"
  User Name: "john_doe"
  Group Name: "Admins"
  Result: isUserAddedToGroup
In this example, the activity attempts to add the user "john_doe" to the "Admins" IAM group within the specified AWS region. The result of the operation (success or failure) is stored in the Boolean variable "isUserAddedToGroup" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Group/Delete Group/index.html

Delete Group
AutomatR.AWS.Activities.DeleteGroup
The "Delete Group" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, enabling automation processes to delete a specified IAM (Identity and Access Management) group within Amazon Web Services (AWS). This activity streamlines the process of managing IAM groups, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the AWS region where the IAM group is located. Use the 
RegionEndpoint
 enumeration to set the region.
Name
Specifies the name of the IAM group that you want to delete. String variables containing the IAM group name.
Remove All Attached Entities
Enables the removal of all subordinate entities (policies, users, etc.) attached to the group before deleting the group. Boolean variables indicating whether to remove all attached entities.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Group" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Delete Group" operation, indicating whether the deletion was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Group" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and group name.
Optionally, configure the delay, choose whether to remove all attached entities, and customize the display name.
Execute the workflow to delete the specified IAM group within AWS.
Example:

Consider an example where the "Delete Group" activity is used to delete an IAM group named "Developers" in the "us-east-1" region:
Delete Group:
  Display Name: "Delete Developers Group"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Name: "Developers"
  Remove All Attached Entities: true
  Result: isDeleteSuccessful
In this example, the activity deletes the IAM group named "Developers" in the "us-east-1" region, removing all attached entities. The result of the operation (success or failure) is stored in the Boolean variable "isDeleteSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Group/Update Group/index.html

Update Group
AutomatR.AWS.Activities.UpdateGroup
The "Update Group" activity in AutomatR is part of the AWS Identity and Access Management (IAM) activities package, allowing you to update the specified IAM group. This activity provides the flexibility to modify the IAM group's attributes, such as the group name, path, etc., facilitating the efficient management of IAM groups.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the access key ID.
Group Name
Specifies the name of the IAM group that you want to update. String variables containing the group name.
New Group Name
Specifies the new name for the IAM group. String variables containing the new group name.
Path
Specifies the desired path for the IAM group. If no path is set, it defaults to a forward slash ("/"). String variables containing the path.
Region
Specifies the desired region in which you would like to update the IAM group. RegionEndpoint variables containing the AWS region.
Secret Access Key
Provides the encrypted secret access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the secret access key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Group" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Group
Obtains updated information about an IAM group and stores the result in a GetGroupResponse variable format for further processing.
How to use:
Drag and drop the "Update Group" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, group name, new group name, and optionally the path.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified IAM group.
Example:

Consider an example where the "Update Group" activity is used to update an IAM group named "Developers" to a new name "Engineers" with a custom path:
Update Group:
  Display Name: "Update IAM Group"
  Access Key ID: "{YourAccessKey}"
  Secret Access Key: "{YourSecretKey}"
  Region: "us-east-1"
  Group Name: "Developers"
  New Group Name: "Engineers"
  Path: "/CustomPath/"
  Group: updatedGroupInfo
In this example, the activity updates the IAM group named "Developers" to "Engineers" within the specified custom path "/CustomPath/" in the "us-east-1" region. The updated information about the IAM group is stored in the variable "updatedGroupInfo" for further processing.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Group/Create Group/index.html

Create Group
AutomatR.AWS.Activities.CreateGroup
The "Create Group" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, allowing automation processes to create a new IAM group within Amazon Web Services (AWS). This activity streamlines the group creation process, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the AWS region where you want to create the new IAM group. Use the 
RegionEndpoint
 enumeration to set the region.
Name
Specifies a unique name for the new IAM group. String variables containing the group name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Path
Specifies the desired path for the IAM group. If no path is set, it will default to a forward slash ("/"). String variables containing the desired path.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Group" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Group
Stores the result in a 
CreateGroupResponse
 variable format that can be used for further processing.
How to use:
Drag and drop the "Create Group" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, group name, and optionally, the group path.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new IAM group within AWS.
Example:

Consider an example where the "Create Group" activity is used to create a new IAM group named "Developers" in the AWS region "us-east-1":
Create Group:
  Display Name: "Create Developers Group"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Name: "Developers"
  Path: "/engineering/"
  Group: groupResponse
In this example, the activity attempts to create a new IAM group named "Developers" in the "us-east-1" region with the path "/engineering/". The result of the operation is stored in the 
groupResponse
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Group/Remove User from Group/index.html

Remove User from Group
AutomatR.AWS.RemoveUserFromGroup
The "Remove User From Group" activity in AutomatR is part of the AWS IAM (Identity and Access Management) Group activities package, enabling automation processes to remove a specified user from a group within AWS IAM. This activity streamlines user management tasks, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the region in which the IAM group is located from which you want to remove a user. Use the 
RegionEndpoint
 enumeration to set the region.
User Name
Specifies the username of the user that you want to remove from the group. String variables containing the username.
Group Name
Specifies the name of the group from which the user should be removed. String variables containing the group name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Remove User From Group" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Remove User From Group" operation, indicating whether the user was successfully removed from the group or any encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Remove User From Group" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, username, and group name.
Optionally, configure the delay and customize the display name.
Execute the workflow to remove the specified user from the group.
Example:

Consider an example where the "Remove User From Group" activity is used to remove a user named "JohnDoe" from a group named "Developers" in the "us-east-1" region:
Remove User From Group:
  Display Name: "Remove JohnDoe From Developers"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  User Name: "JohnDoe"
  Group Name: "Developers"
  Result: isUserRemoved
In this example, the activity removes the user "JohnDoe" from the "Developers" group in the "us-east-1" region. The result of the operation (success or failure) is stored in the Boolean variable "isUserRemoved" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Group/Get Group/index.html

Get Group
AutomatR.AWS.Activities.GetGroup
The "Get Group" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, enabling automation processes to retrieve information about a specified IAM group. This activity streamlines the process of obtaining details related to IAM groups, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the desired AWS region in which the IAM group is located. Use the 
RegionEndpoint
 enumeration to set the region.
Name
Specifies the name of the IAM group for which information should be retrieved. String variables containing the group name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Group" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Group
Obtains information about an IAM group and stores the result in a 
GetGroupResponse
 variable format for further processing. Variables of type 
GetGroupResponse
 to store the details of the IAM group.
How to use:
Drag and drop the "Get Group" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and IAM group name.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve information about the specified IAM group.
Example:

Consider an example where the "Get Group" activity is used to retrieve information about an IAM group named "ExampleGroup" in the "us-east-1" region:
Get Group:
  Display Name: "Retrieve IAM Group Info"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Name: "ExampleGroup"
  Group: iamGroupInfo
In this example, the activity retrieves information about the IAM group named "ExampleGroup" in the "us-east-1" region. The result is stored in the variable "iamGroupInfo" of type 
GetGroupResponse
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Users/Get User/index.html

Get User
AutomatR.AWS.Activities.GetUser
The "Get User" activity in AutomatR is part of the AWS IAM (Identity and Access Management) Users activities package, enabling automation processes to retrieve information about a specific IAM user. This activity streamlines the process of obtaining details about IAM users, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the desired AWS region from which you want to retrieve IAM user information. Use the 
RegionEndpoint
 enumeration to set the region.
User Name
Specifies the name of the IAM user for whom you want to retrieve information. String variables containing the IAM user name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get User" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
User
Stores the result in a variable of type 
User
, providing details about the IAM user. Variables of type 
User
 for further processing.
How to use:
Drag and drop the "Get User" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and IAM user name.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve information about the specified IAM user.
Example:

Consider an example where the "Get User" activity is used to retrieve information about an IAM user named "JohnDoe":
Get User:
  Display Name: "Retrieve User Information"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  User Name: "JohnDoe"
  User: userDetails
In this example, the activity retrieves information about the IAM user "JohnDoe." The result is stored in the variable "userDetails" of type 
User
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Users/Delete User/index.html

Delete User
AutomatR.AWS.Activities.DeleteUser
The "Delete User" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, enabling automation processes to delete a specific IAM user. This activity streamlines user management tasks in AWS IAM, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the desired AWS region in which the IAM user will be deleted. Use the 
RegionEndpoint
 enumeration to set the region.
Name
Specifies the name of the IAM user that you want to delete. String variables containing the IAM user name.
Remove All Attached Entities
Enables the removal of all subordinate entities attached to the user, including access keys, policies, login profiles, group memberships, and MFA devices. Boolean variables controlling this behavior.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete User" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Delete User" operation, indicating whether the user deletion was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete User" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, IAM user name, and region.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified IAM user.
Example:

Consider an example where the "Delete User" activity is used to delete an IAM user named "JohnDoe" and remove all attached entities:
Delete User:
  Display Name: "Delete IAM User"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Name: "JohnDoe"
  Remove All Attached Entities: true
  Result: isDeletionSuccessful
In this example, the activity deletes the IAM user "JohnDoe" and removes all attached entities, such as access keys, policies, login profiles, group memberships, and MFA devices. The result of the operation (success or failure) is stored in the Boolean variable "isDeletionSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Users/Change Password/index.html

Change Password
AutomatR.AWS.Activities.ChangePassword
The "Change Password" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, allowing automation processes to change the password of a specified IAM user within Amazon Web Services (AWS). This activity facilitates the management of user credentials and enhances security practices.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the Amazon IAM service. String variables containing the secret access key.
Region
Specifies the AWS region in which the IAM user's password should be changed. Use the 
RegionEndpoint
 enumeration to set the region.
User Name
Specifies the name of the IAM user whose password needs to be changed. String variables containing the IAM user name.
Password
Provides the new password for the specified IAM user. String variables containing the new password.
Force Password Change
Enables an option that requires the user to change their password during their next login. Boolean variables to control this option.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Change Password" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Change Password" operation, indicating whether the password change was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Change Password" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, IAM user name, and the new password.
Optionally, configure the delay and customize the display name.
Execute the workflow to change the password for the specified IAM user within AWS.
Example:

Consider an example where the "Change Password" activity is used to change the password for an IAM user named "john_doe" with a new password "NewPass@123":
Change Password:
  Display Name: "Change User Password"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  User Name: "john_doe"
  Password: "NewPass@123"
  Force Password Change: true
  Result: isPasswordChanged
In this example, the activity attempts to change the password for the IAM user "john_doe" to "NewPass@123" and enforces a requirement for the user to change their password during the next login. The result of the operation (success or failure) is stored in the Boolean variable "isPasswordChanged" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Users/Create User/index.html

Create User
AutomatR.AWS.Activities.CreateUser
The "Create User" activity in AutomatR is part of the AWS IAM (Identity and Access Management) activities package, allowing automation processes to create a new IAM user within Amazon Web Services (AWS). This activity streamlines the user creation process, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS IAM service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS IAM service. String variables containing the secret access key.
Region
Specifies the AWS region where you want to create the new IAM user. Use the 
RegionEndpoint
 enumeration to set the region.
Name
Specifies a unique name for the new IAM user. String variables containing the user name.
Password
Specifies the desired password for the newly created IAM user. String variables containing the password.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create User" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Path
Specifies the desired path for the IAM user. If no path is set, it will be assigned the default path. String variables containing the desired path.
Tags
Specifies the tags that need to be added or updated. It will be stored in the form of a "Dictionary<String,String>" variable.
Permissions Boundary ARN
Provides the Amazon Resource Name (ARN) of the policy to use as the permissions boundary for the IAM user.
Force Password Change
Enabling this option requires the user to change their password during their next login. Boolean variables containing the option status.
Generate AWS Access Keys
Enabling this option allows generating AWS Secret Access Keys ID and AWS Access Key Id for the newly created user. Boolean variables containing the option status.
Output
User
Stores the result in a String variable format that can be used for further processing, giving the User Name for the created user.
AWS Access Key ID
Stores the result in a String variable format that can be used for further processing in the form of AWS Access Key for the created user.
AWS Secret Access Key
Stores the result in a String variable format that can be used for further processing in the form of AWS Secret Access Key for the created user.
How to use:
Drag and drop the "Create User" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, user name, password, and optionally, additional settings.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new IAM user within AWS.
Example:

Consider an example where the "Create User" activity is used to create a new IAM user named "JohnDoe" with a specified password and generate AWS access keys:
Create User:
  Display Name: "Create JohnDoe User"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Name: "JohnDoe"
  Password: "SecurePassword123"
  Generate AWS Access Keys: true
  User: createdUser
  AWS Access Key ID: accessKeyId
  AWS Secret Access Key: secretAccessKey
In this example, the activity attempts to create a new IAM user named "JohnDoe" in the "us-east-1" region with the specified password. It also generates AWS access keys, and the results are stored in the variables "createdUser," "accessKeyId," and "secretAccessKey" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/IAM/Users/Update User/index.html

Update User
AutomatR.AWS.Activities.UpdateUser
The "Update User" activity in AutomatR is part of the AWS Identity and Access Management (IAM) activities package, designed to update specified IAM users efficiently. This activity allows users to modify attributes such as the user name, path, tags, and permissions boundary, streamlining user management tasks within the AWS environment.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the access key ID.
Name
Specifies the name of the IAM user that you want to update. String variables containing the user name.
New Name
Specifies the new name for the IAM user. String variables containing the new user name.
Path
Specifies the new path at which the IAM user should be updated and assigned for further use. String variables containing the path.
Region
Specifies the desired region in which you would like to update the IAM user. RegionEndpoint variables containing the AWS region.
Secret Access Key
Provides the encrypted secret access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the secret access key.
Tags To Add
Specifies the tags that need to be added or updated. Stored in the form of a 
Dictionary<string, string>
 variable.
Tags To Remove
Provide a 
List<string>
 variable to store the keys of the tags that you want to remove.
New Permissions Boundary ARN
Provide the new ARN boundary that you want to set as the new permission boundary for the IAM user. String variables containing the ARN.
Delete Permissions Boundary
If checked, allows you to delete the permissions boundary for the IAM user. Boolean variables to enable or disable deletion.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update User" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Update User" operation, indicating whether the user update was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Update User" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, user name, new user name, and optional parameters such as path, tags, and permissions boundary.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified IAM user.
Example:

Consider an example where the "Update User" activity is used to update an IAM user named "JohnDoe" to a new name "JaneDoe" with additional tags and a custom path:
Update User:
  Display Name: "Update IAM User"
  Access Key ID: "{YourAccessKey}"
  Secret Access Key: "{YourSecretKey}"
  Region: "us-east-1"
  Name: "JohnDoe"
  New Name: "JaneDoe"
  Path: "/CustomPath/"
  Tags To Add: {"Department":"Engineering", "Role":"Developer"}
  Tags To Remove: {"Role"}
  New Permissions Boundary ARN: "arn:aws:iam::account-id:policy/CustomBoundary"
  Delete Permissions Boundary: false
  Result: isUpdateSuccessful
In this example, the activity updates the IAM user named "JohnDoe" to "JaneDoe" within the specified custom path "/CustomPath/" in the "us-east-1" region. It adds new tags ("Department" and "Role") and removes the existing "Role" tag. The new permissions boundary ARN is set, and the result of the operation is stored in the Boolean variable "isUpdateSuccessful" for further processing.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Get Instance by ID/index.html

Get Instance by ID
AutomatR.AWS.Activities.GetInstanceByID
The "Get Instance by ID" activity in AutomatR is part of the AWS EC2 (Elastic Compute Cloud) activities package, enabling automation processes to retrieve details of a specific Amazon EC2 instance. This activity streamlines the process of obtaining information about EC2 instances, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS EC2 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS EC2 service. String variables containing the secret access key.
Region
Specifies the AWS region in which the EC2 instance is created. Use the 
RegionEndpoint
 enumeration to set the region.
Instance ID
Specifies the unique identifier of the EC2 instance for which details should be retrieved. String variables containing the instance ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Instance by ID" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Instance
Retrieves details about an EC2 instance and stores the result in an 
Instance
 variable for further activities. Variables of type 
Instance
 to store the details of the EC2 instance.
How to use:
Drag and drop the "Get Instance by ID" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and EC2 instance ID.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve details about the specified EC2 instance.
Example:

Consider an example where the "Get Instance by ID" activity is used to retrieve details about an EC2 instance with the ID "i-1234567890abcdef0" in the "us-east-1" region:
Get Instance by ID:
  Display Name: "Retrieve EC2 Instance Details"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Instance ID: "i-1234567890abcdef0"
  Instance: ec2InstanceDetails
In this example, the activity retrieves details about the EC2 instance with the ID "i-1234567890abcdef0" in the "us-east-1" region. The result is stored in the variable "ec2InstanceDetails" of type 
Instance
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Terminate Instance/index.html

Terminate Instance
AutomatR.AWS.Activities.TerminateInstance
The "Terminate Instance" activity in AutomatR is part of the AWS activities package, allowing the termination of an Amazon Elastic Compute Cloud (EC2) instance. This activity is useful for managing EC2 instances within AWS, providing the capability to automate instance termination.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the access key ID.
Instance ID
Specifies the valid instance ID of the EC2 instance that you want to terminate. String variables containing the instance ID.
Region
Specifies the valid AWS region where your EC2 instance is created. RegionEndpoint variables containing the AWS region.
Secret Access Key
Provides the encrypted secret access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the secret access key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Terminate Instance" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Terminate Instance" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, and instance ID.
Optionally, configure the delay and customize the display name.
Execute the workflow to terminate the specified EC2 instance within AWS.
Example:

Consider an example where the "Terminate Instance" activity is used to terminate an EC2 instance with the ID "i-0123456789abcdef0":
Terminate Instance:
  Display Name: "Terminate My EC2 Instance"
  Access Key ID: "{YourAccessKey}"
  Secret Access Key: "{YourSecretKey}"
  Region: "us-east-1"
  Instance ID: "i-0123456789abcdef0"
In this example, the activity terminates the EC2 instance with the specified ID in the "us-east-1" region using the provided access and secret keys. Adjust the input parameters according to your AWS environment.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Start Instance/index.html

Start Instance
AutomatR.AWS.Activities.StartInstance
The "Start Instance" activity in AutomatR is part of the AWS EC2 activities package, allowing users to start a specified EC2 instance in their Amazon Web Services (AWS) environment. This activity provides control over the lifecycle of EC2 instances, enhancing the automation of cloud infrastructure management.
Properties
​
Name
Description
Input
Access Key ID
The encrypted access key ID for your AWS account, enabling connection to the Amazon EC2 service. String variables containing the access key ID.
Secret Access Key
The encrypted secret access key ID for your AWS account, enabling connection to the Amazon EC2 service. String variables containing the secret access key.
Region
The valid AWS region where your EC2 instance is created and the region in which you would like to start it. RegionEndpoint variables containing the region information.
Instance ID
The valid instance ID of the EC2 instance that you want to start. String variables containing the instance ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
The amount of time (in seconds) to wait before executing the "Start Instance" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 1000 milliseconds or 1 sec, set it to 1.
How to use:
Drag and drop the "Start Instance" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, and the instance ID of the EC2 instance you want to start.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to start the specified EC2 instance.
Example:

Consider an example where the "Start Instance" activity is used to start an EC2 instance with the ID "i-0abcdef1234567890" in the US East (N. Virginia) region:
Start Instance:
  Access Key ID: "your-access-key-id"
  Secret Access Key: "your-secret-access-key"
  Region: RegionEndpoint.USEast1
  Instance ID: "i-0abcdef1234567890"
In this example, the activity checks the current state of the specified EC2 instance. If the instance is not in the "running" state, the activity sends a request to start the instance.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Stop Instance/index.html

Stop Instance
AutomatR.AWS.Activities.StopInstance
The "Stop Instance" activity in AutomatR is part of the AWS activities package, facilitating the stopping of an Amazon Elastic Compute Cloud (EC2) instance. This activity is particularly useful for managing EC2 instances within AWS, allowing for automation of instance control.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the access key ID.
Instance ID
Specifies the valid instance ID of the EC2 instance that you want to stop. String variables containing the instance ID.
Region
Specifies the valid AWS region where your EC2 instance is created. RegionEndpoint variables containing the AWS region.
Secret Access Key
Provides the encrypted secret access key ID for your AWS account, enabling connection to the Amazon Recognition service. String variables containing the secret access key.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Stop Instance" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Stop Instance" activity onto the workflow.
Configure the properties by providing the access key ID, secret access key, region, and instance ID.
Optionally, configure the delay and customize the display name.
Execute the workflow to stop the specified EC2 instance within AWS.
Example:

Consider an example where the "Stop Instance" activity is used to stop an EC2 instance with the ID "i-0123456789abcdef0":
Stop Instance:
  Display Name: "Stop My EC2 Instance"
  Access Key ID: "{YourAccessKey}"
  Secret Access Key: "{YourSecretKey}"
  Region: "us-east-1"
  Instance ID: "i-0123456789abcdef0"
In this example, the activity stops the EC2 instance with the specified ID in the "us-east-1" region using the provided access and secret keys. Adjust the input parameters according to your AWS environment.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Launch Instance/index.html

Launch Instance
AutomatR.AWS.Activities.LaunchInstance
The "Launch Instance" activity in AutomatR is part of the AWS EC2 (Elastic Compute Cloud) activities package, enabling automation processes to launch EC2 instances within the Amazon Web Services (AWS) cloud. This activity streamlines the process of creating and launching virtual server instances, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS EC2 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS EC2 service. String variables containing the secret access key.
Region
Specifies the desired AWS region in which you want to launch the EC2 instance. Use the 
RegionEndpoint
 enumeration to set the region.
Instance Name
Provides a valid name for the EC2 instance you want to launch. String variables containing the instance name.
Instance Type
Specifies the type of EC2 instance on which you want to perform the operation. String variables containing the instance type.
Image ID
Provides the image ID associated with the desired instance. String variables containing the image ID.
Key Name
Specifies either a public or private key name as the key name for launching an EC2 instance. String variables containing the key name.
Availability Zone
Provides valid availability zones available for launching instances in your AWS account. String variables containing the availability zone.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Launch Instance" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Instance
Stores the result in a variable of type 
Instance
, providing details about the launched EC2 instance. Variables of type 
Instance
 for further processing.
How to use:
Drag and drop the "Launch Instance" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, instance name, instance type, image ID, key name, and availability zone.
Optionally, configure the delay and customize the display name.
Execute the workflow to launch the specified EC2 instance.
Example:

Consider an example where the "Launch Instance" activity is used to launch a t2.micro instance named "MyInstance" in the "us-east-1" region:
Launch Instance:
  Display Name: "Launch MyInstance"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Instance Name: "MyInstance"
  Instance Type: "t2.micro"
  Image ID: "ami-XXXXXXXXXXXXXXXXX"
  Key Name: "MyKeyPair"
  Availability Zone: "us-east-1a"
  Instance: launchedInstance
In this example, the activity launches a t2.micro instance named "MyInstance" in the "us-east-1" region. The result of the operation, including details about the launched instance, is stored in the variable "launchedInstance" of type 
Instance
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Get Instance List/index.html

Get Instance List
AutomatR.AWS.Activities.GetInstanceList
The "Get Instance List" activity in AutomatR is part of the AWS EC2 (Elastic Compute Cloud) activities package, enabling automation processes to retrieve a list of instances matching specific filter criteria. This activity streamlines the process of obtaining information about multiple EC2 instances, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS EC2 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS EC2 service. String variables containing the secret access key.
Region
Specifies the AWS region in which the EC2 instances are created. Use the 
RegionEndpoint
 enumeration to set the region.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Instance List" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Instance List
Retrieves a list of instances matching specific filter criteria and stores the result in a 
List<Amazon.EC2.Model.Instance>
 variable for further activities. Variables of type 
List<Amazon.EC2.Model.Instance>
 to store the list of EC2 instances.
How to use:
Drag and drop the "Get Instance List" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, and region.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve a list of EC2 instances based on the specified criteria.
Example:

Consider an example where the "Get Instance List" activity is used to retrieve a list of all EC2 instances in the "us-east-1" region:
Get Instance List:
  Display Name: "Retrieve All EC2 Instances"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Instance List: ec2Instances
In this example, the activity retrieves a list of all EC2 instances in the "us-east-1" region. The result is stored in the variable "ec2Instances" of type 
List<Amazon.EC2.Model.Instance>
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/AWS/EC2/Restart Instance/index.html

Restart Instance
AutomatR.AWS.Activities.RestartInstance
The "Restart Instance" activity in AutomatR is part of the AWS EC2 activities package, enabling automation processes to restart an EC2 instance within Amazon Web Services. This activity streamlines instance management tasks, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Access Key ID
Provides the encrypted access key ID for your AWS account, enabling connection to the AWS EC2 service. String variables containing the access key ID.
Secret Access Key
Provides the encrypted secret access key for your AWS account, enabling connection to the AWS EC2 service. String variables containing the secret access key.
Region
Specifies the valid AWS region where your EC2 instance is currently running and where you would like to restart it. Use the 
RegionEndpoint
 enumeration to set the region.
Instance ID
Specifies the valid instance ID of the EC2 instance that you want to restart. String variables containing the instance ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Restart Instance" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Restart Instance" activity onto the workflow.
Configure the properties by providing the required inputs, such as access key ID, secret access key, region, and instance ID.
Optionally, configure the delay and customize the display name.
Execute the workflow to restart the specified EC2 instance.
Example:

Consider an example where the "Restart Instance" activity is used to restart an EC2 instance with the ID "i-1234567890abcdef0" in the "us-east-1" region:
Restart Instance:
  Display Name: "Restart EC2 Instance"
  Access Key ID: "**************"
  Secret Access Key: "**************"
  Region: "us-east-1"
  Instance ID: "i-1234567890abcdef0"
In this example, the activity restarts the specified EC2 instance. Any errors encountered during the restart process are thrown as exceptions. Customize the display name based on your workflow requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/String/Match/index.html

Match
AutomatR.DefaultActivities.GenericValue.Match
The "Match" activity in AutomatR, categorized under String, searches an input string for all instances of a regular expression and retrieves all successful matches. This activity is useful when you need to extract specific patterns from a string based on a regular expression.
Properties
​
Name
Description
Input
Input
The string to be searched for matches. String variables containing the input string.
Pattern
The matching regular expression pattern. String variables containing the regex pattern.
RegexOptions
Select a bitwise combination of the enumeration values that specify options for matching from the dropdown.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Match" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
It stores the result with a match variable, which can be used in other subsequent activities. Variables of type 
System.Text.RegularExpressions.Match
 to store the match result.
How to use:
Drag and drop the "Match" activity onto the workflow.
Configure the properties by specifying the input string, regex pattern, and regex options.
Optionally, configure the delay based on your requirements.
Execute the workflow to search for matches in the input string based on the specified regex pattern.
Example:

Consider an example where the "Match" activity is used to extract the domain from an email address:
Match:
  Input: "user@example.com"
  Pattern: "@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})"
  RegexOptions: IgnoreCase
  Result: extractedDomain
In this example, the activity searches for the domain pattern within the input email address "
user@example.com
". The result, which includes the matched domain, is stored in the 
System.Text.RegularExpressions.Match
 variable "extractedDomain" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/String/Replace/index.html

Replace
AutomatR.DefaultActivities.GenericValue.Replace
The "Replace" activity in AutomatR, categorized under String, substitutes strings in a specified input string that match a given regular expression pattern with a designated replacement string. This activity is useful when you need to perform string manipulation by replacing occurrences of a specific substring with another value.
Properties
​
Name
Description
Input
Old Value
Specify the old value to be replaced. String variables containing the substring to be replaced.
Input String
The string to be replaced. String variables containing the input string.
New Value
Specify the replacement string. String variables containing the new substring to replace the old value.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Replace" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
It stores the result in a string variable, which can be used for other subsequent activities. String variables to store the modified string after replacement.
How to use:
Drag and drop the "Replace" activity onto the workflow.
Configure the properties by specifying the input string, old value, and new value.
Optionally, configure the delay based on your requirements.
Execute the workflow to replace occurrences of the old value with the new value in the input string.
Example:

Consider an example where the "Replace" activity is used to replace occurrences of a word in a sentence:
Replace:
  Input String: "The quick brown fox jumps over the lazy dog."
  Old Value: "quick"
  New Value: "swift"
  Result: modifiedSentence
In this example, the activity replaces the occurrence of the word "quick" with "swift" in the input string. The modified sentence is stored in the string variable "modifiedSentence" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/String/Is Match/index.html

Is Match
AutomatR.DefaultActivities.GenericValue.IsMatch
The "Is Match" activity in AutomatR, categorized under String, checks whether a specified regex pattern finds a match in the specified input string using the provided Regex Options. This activity is beneficial for scenarios where you need to validate whether a given pattern exists in a particular string.
Properties
​
Name
Description
Input
Input
The string to search for a match. String variables containing the input string.
Pattern
The matching regular expression pattern. String variables containing the regex pattern.
RegexOptions
Select a bitwise combination of the enumeration values that specify options for matching from the dropdown.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Is Match" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the result as true or false based on the success of the operation execution. Boolean variables to store the operation result.
How to use:
Drag and drop the "Is Match" activity onto the workflow.
Configure the properties by specifying the input string, regex pattern, and regex options.
Optionally, configure the delay based on your requirements.
Execute the workflow to determine if the specified pattern is found in the input string.
Example:

Consider an example where the "Is Match" activity is used to check if a string contains a valid email address:
Is Match:
  Input: "user@example.com"
  Pattern: "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
  RegexOptions: IgnoreCase
  Result: isEmailValid
In this example, the activity checks if the input string "
user@example.com
" matches the specified email pattern. The result of the operation (true or false) is stored in the Boolean variable "isEmailValid" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Models/Get Models/index.html

Get Models
AutomatR.ChatGPT.Activities.GetModels
The "Get Models" activity in AutomatR is part of the ChatGPT activities package, designed to retrieve a list of available ChatGPT models. This activity sends a GET request to the OpenAI API, retrieves the models, and outputs the list of models, which can be used in subsequent activities.
Properties
​
Name
Description
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Models" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the list of models with the data type 
List<Models>
. The output can be used in other subsequent activities. Variables of type 
List<Models>
 to store the list of models.
How to use:
Drag and drop the "Get Models" activity onto the workflow.
Configure the properties, such as the delay.
Execute the workflow to retrieve the list of available ChatGPT models.
Example:

Consider an example where the "Get Models" activity is used to retrieve the list of available ChatGPT models:
Get Models:
  Delay: 2
  Response: availableModels
In this example, the activity retrieves the list of available ChatGPT models, and the result is stored in the 
availableModels
 variable for further use in the workflow.
By using the "Get Models" activity, AutomatR users can dynamically retrieve information about the available ChatGPT models, empowering them to make informed decisions when selecting the most appropriate model for their automation workflows. This activity is particularly useful for scenarios where users need to adapt their interactions based on the specific capabilities and characteristics of different ChatGPT models.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Models/Get Model Details/index.html

Get Model Details
AutomatR.ChatGPT.Activities.GetModelDetails
The "Get Model Details" activity in AutomatR is part of the ChatGPT activities package, designed to retrieve detailed information about a specific ChatGPT model. This activity sends a GET request to the OpenAI API, providing the model ID, and outputs the model details, which can be used in subsequent activities.
Properties
​
Name
Description
Input
Model ID
Provide the model ID whose details you want to fetch from the source (example: gpt-3.5-turbo-16k-0613). String variables containing the model ID.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Model Details" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the result as a 
SelectedModel
 data type, which contains detailed information about the specified ChatGPT model. The output can be used in other subsequent activities. Variables of type 
SelectedModel
 to store the model details.
How to use:
Drag and drop the "Get Model Details" activity onto the workflow.
Configure the properties by specifying the model ID for which you want to retrieve details.
Optionally, configure the delay.
Execute the workflow to retrieve detailed information about the specified ChatGPT model.
Example:

Consider an example where the "Get Model Details" activity is used to retrieve information about the model with the ID "gpt-3.5-turbo-16k-0613":
Get Model Details:
  Model ID: "gpt-3.5-turbo-16k-0613"
  Delay: 2
  Response: modelDetails
In this example, the activity retrieves detailed information about the ChatGPT model with the ID "gpt-3.5-turbo-16k-0613." The result is stored in the 
modelDetails
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Scope/ChatGPT Scope/index.html

ChatGPT Scope
AutomatR.ChatGPT.Activities.ChatGPTScope
The "ChatGPT Scope" activity in AutomatR serves as a scope for executing activities related to the ChatGPT service. This scope enables users to authenticate with the OpenAI API, providing a token for authorization, and perform various operations using the ChatGPT model.
Properties
​
Name
Description
Input
API Token
Allows you to enter the API token (or API key) used for authentication and authorization with the OpenAI API services. This token enables you to make API requests and interact with the OpenAI models. String variables containing the API token.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "ChatGPT Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Scope

Internal scope for executing activities related to ChatGPT. Ensure that ChatGPT activities are placed inside this scope for proper execution.
Important Notes
Ensure that the "ChatGPT Scope" activity is used to wrap ChatGPT-related activities, providing a dedicated context for executing tasks related to ChatGPT.
The API token is crucial for authentication and should be obtained from OpenAI. Ensure that the provided token is valid for successful execution.
How to use:
Drag and drop the "ChatGPT Scope" activity onto the workflow.
Configure the API token property by providing the API key obtained from OpenAI.
Optionally, configure the delay before executing the scope.
Place ChatGPT-related activities inside the scope for proper execution.
Example:

Consider an example where the "ChatGPT Scope" activity is used to execute ChatGPT-related activities:
ChatGPT Scope:
  API Token: "<Your-API-Token>"
  Delay: 2
  - ChatGPT Generate Response:
      Input Text: "Tell me a joke."
      Output Result: jokeResponse
  - ChatGPT Generate Response:
      Input Text: "Explain the concept of artificial intelligence."
      Output Result: aiExplanation
In this example, the "ChatGPT Scope" activity is configured with an API token and a delay of 2 seconds. Inside the scope, two "ChatGPT Generate Response" activities are executed to generate responses for different input texts. The results are stored in the variables "jokeResponse" and "aiExplanation" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Prompt/Extract Data from ChatGPT/index.html

Extract Data From ChatGPT
AutomatR.ChatGPT.Activities.ExtractDataFromGPT
The "Extract Data From ChatGPT" activity in AutomatR is part of the ChatGPT activities package, allowing you to extract data from images using the OpenAI GPT model. This activity sends a POST request to the OpenAI API, providing an image along with user instructions, and outputs the extracted data in JSON format.
Properties
​
Name
Description
Input
ApiKey
Allows you to enter the API token (or API key) used for authentication and authorization with the OpenAI API services. This token enables you to make API requests and interact with the OpenAI models. String variables containing the API key.
Fields
Enter the desired fields to be used to extract data from the provided image files. String variables containing the desired fields for data extraction.
Image Path
Full path to the image file. String variables containing the path to the image file.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Extract Data From ChatGPT" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the extracted data in JSON format. Variables of type 
JObject
 to store the extracted data.
How to use:
Drag and drop the "Extract Data From ChatGPT" activity onto the workflow.
Configure the properties by specifying the API key, delay, desired fields for data extraction, and the path to the image file.
Execute the workflow to extract data from the provided image using the OpenAI GPT model.
Example:

Consider an example where the "Extract Data From ChatGPT" activity is used to extract information from an image:
Extract Data From ChatGPT:
  Image Path: "C:\Images\example.jpg"
  ApiKey: "your_api_key_here"
  Fields: "name, date, amount"
  Delay: 5
  Result: extractedData
In this example, the activity extracts data from the image located at "C:\Images\example.jpg" using the OpenAI GPT model. The API key is specified for authentication, and the desired fields for data extraction include "name," "date," and "amount." The extracted data is stored in the 
extractedData
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Prompt/Create Edit/index.html

Create Edit
AutomatR.ChatGPT.Activities.CreateEdit
The "Create Edit" activity in AutomatR is part of the ChatGPT activities package, providing the capability to generate edited text based on the provided instruction using the OpenAI GPT model. This activity sends a POST request to the OpenAI API, retrieves the generated edited text, and outputs the result as a 
CreateEditModel
 data type.
Properties
​
Name
Description
Input
Instruction
Instruction for generating the desired response. String variables containing the instruction for text generation.
Model
The ID of the model to use for text generation (example: text-davinci-edit-001). String variables containing the model ID.
Prompt
The input prompt for text generation. String variables containing the input prompt.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Edit" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
n
How many completions to generate for each prompt. Integer variables containing the number of completions.
Temperature
What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Double variables containing the temperature value.
Output
Response
Outputs the result of the "Create Edit" operation as a 
CreateEditModel
 data type. Variables of type 
CreateEditModel
 to store the generated edited text.
How to use:
Drag and drop the "Create Edit" activity onto the workflow.
Configure the properties by specifying the model, prompt, instruction, temperature, and the number of completions.
Optionally, configure the delay before executing the activity.
Execute the workflow to generate edited text based on the provided instruction.
Example:

Consider an example where the "Create Edit" activity is used to generate edited text based on a user prompt and instruction:
Create Edit:
  Model: "text-davinci-edit-001"
  Prompt: "Write a paragraph about nature."
  Instruction: "Make the paragraph more engaging and lively."
  Temperature: 0.8
  n: 1
  Response: editedTextResult
In this example, the activity generates edited text based on the user's prompt "Write a paragraph about nature" with the instruction "Make the paragraph more engaging and lively" using the text-davinci-edit-001 model. The resulting edited text is stored in the variable "editedTextResult" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Prompt/Create Completion/index.html

Create Completion
AutomatR.ChatGPT.Activities.CreateCompletion
The "Create Completion" activity in AutomatR facilitates text completion using the OpenAI GPT model. This activity sends a POST request to the OpenAI API with specified parameters, retrieves the generated completion text, and outputs the result in the form of a 
ChatCompletion
 data type.
Properties
​
Name
Description
Input
Model
The ID of the model to use for text generation. String variables containing the model ID.
Prompt
The input prompt for text generation. String variables containing the input prompt.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Completion" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Max Tokens
The maximum number of tokens to generate in the completion. Integer variables containing the maximum token value.
n
How many completions to generate for each prompt. Integer variables containing the number of completions.
Temperature
What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Double variables containing the temperature value.
Output
Response
Outputs the result of the "Create Completion" operation as a 
ChatCompletion
 data type. Variables of type 
ChatCompletion
 to store the generated completion result.
How to use:
Drag and drop the "Create Completion" activity onto the workflow.
Configure the properties by specifying the model, prompt, max tokens, temperature, and the number of completions.
Optionally, configure the delay before executing the activity.
Execute the workflow to generate text completions based on the provided input.
Example:

Consider an example where the "Create Completion" activity is used to generate completions for a user prompt:
Create Completion:
  Model: "gpt-3.5-turbo"
  Prompt: "Tell me a story about robots."
  Max Tokens: 50
  Temperature: 0.8
  n: 1
  Response: completionResult
In this example, the activity generates a text completion for the user's prompt, "Tell me a story about robots," using the GPT-3.5-turbo model with a maximum of 50 tokens, a temperature of 0.8, and a single completion. The resulting completion is stored in the variable "completionResult" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Prompt/Create Chat/index.html

Create Chat
AutomatR.ChatGPT.Activities.CreateChat
The "Create Chat" activity in AutomatR is designed for generating chat completions using the OpenAI GPT model. This activity sends a prompt content along with the selected model and other optional parameters to the OpenAI API, retrieves the generated response, and provides it as an output.
Properties
​
Name
Description
Input
Content
Enter the content for generating the prompt. This should be a topic or specific information you would like to generate text about. String variables containing the content.
Model
Enter the model to be used for chat completion. String variables containing the model name.
Role
Choose the role of the messages author. One of system, user, or assistant. Use the enumerator 
CreateChatRole
 to specify the role.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Chat" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
MaxTokens
Set the maximum token limit for chat completion. Controls the response length. Integer variables containing the maximum token value.
Temperature
Specify the temperature for chat completion. Range: 0.0 to 2.0. Double variables containing the temperature value.
Output
Response
Returns a detailed response generated by the model based on the provided content with a data type string. String variables to store the generated response.
By configuring these properties, AutomatR users can leverage the "Prompt - Create Chat" activity to seamlessly integrate ChatGPT into their automation workflows, creating interactive and intelligent conversational experiences.
Important Notes
Ensure that the "Create Chat" activity is used within the "ChatGPT Scope" activity to properly authenticate with the OpenAI API.
Provide valid input values for model, role, temperature, and maximum tokens to achieve desired chat completion results.
How to use:
Drag and drop the "Create Chat" activity onto the workflow.
Configure the properties by specifying the content, model, role, temperature, and maximum tokens for chat completion.
Optionally, configure the delay before executing the activity.
Execute the workflow to generate a chat completion based on the provided input.
Example:

Consider an example where the "Create Chat" activity is used to generate a response for a user query:
Create Chat:
  Content: "Tell me a joke."
  Model: "gpt-3.5-turbo"
  Role: User
  Temperature: 0.8
  MaxTokens: 50
  Response: jokeResponse
In this example, the activity generates a chat completion for the user's query, "Tell me a joke," using the GPT-3.5-turbo model with a user role, temperature of 0.8, and a maximum of 50 tokens. The resulting response is stored in the variable "jokeResponse" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/ChatGPT/Prompt/Extract Data Using ChatGPT Multiple/index.html

Extract Data Using ChatGPT Multiple
AutomatR.ChatGPT.Activities.ExtractDataUsingChatGPTMultiple
The "Extract Data Using ChatGPT Multiple" activity in AutomatR is part of the ChatGPT activities package, designed to extract data from multiple images simultaneously using the OpenAI GPT model. This activity sends a series of POST requests to the OpenAI API, providing a list of image URLs along with user instructions, and outputs the extracted data in JSON format.
Properties
​
Name
Description
Input
ApiKey
Allows you to enter the API token (or API key) used for authentication and authorization with the OpenAI API services. This token enables you to make API requests and interact with the OpenAI models. String variables containing the API key.
Image URLs
Full paths to the image files. List variables containing the paths to the image files.
Fields
Enter the desired fields to be used to extract data from the provided image files. String variables containing the desired fields for data extraction.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Extract Data Using ChatGPT Multiple" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the extracted data in JSON format. Variables of type 
JObject
 to store the extracted data.
How to use:
Drag and drop the "Extract Data Using ChatGPT Multiple" activity onto the workflow.
Configure the properties by specifying the API key, delay, list of image URLs, and desired fields for data extraction.
Execute the workflow to extract data from the provided images using the OpenAI GPT model.
Example:

Consider an example where the "Extract Data Using ChatGPT Multiple" activity is used to extract information from multiple images:
Extract Data Using ChatGPT Multiple:
  Image URLs:
    - "C:\Images\image1.jpg"
    - "C:\Images\image2.jpg"
    - "C:\Images\image3.jpg"
  ApiKey: "your_api_key_here"
  Fields: "name, date, amount"
  Delay: 5
  Result: extractedData
In this example, the activity extracts data from the images located at "C:\Images\image1.jpg," "C:\Images\image2.jpg," and "C:\Images\image3.jpg" using the OpenAI GPT model. The API key is specified for authentication, and the desired fields for data extraction include "name," "date," and "amount." The extracted data is stored in the 
extractedData
 variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Text/Modify Text/index.html

Modify Text
AutomatR.DefaultActivities.FileAndFolder.ModifyText
The "Modify Text" activity in AutomatR facilitates the modification of a text value through various operations, including find and replace, trimming, and text transformation. This activity is categorized under Text activities and enhances the flexibility of text manipulation within automation workflows.
Properties
​
Name
Description
Input
Text To Modify
Specifies the input text that needs to be modified. String variables containing the text value or the result of a text retrieval operation.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Text Modify
Selects the desired text modification action from the dropdown menu. Actions include trimming, converting to upper or lower case, find and replace, etc.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Modify Text" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Replace with New Text
Specifies the new text to be used for modification, applicable when the "Replace" operation is selected. String variables containing the replacement text.
Search for Find Text
Specifies the text to search for and replace when the "Replace" operation is selected. String variables containing the text to find.
Output
Result
Outputs the result of the text modification operation in string format. Variables of type 
string
 to store the modified text result.
How to use:
Drag and drop the "Modify Text" activity onto the workflow.
Configure the properties by specifying the text to be modified and selecting the desired modification action.
Optionally, configure additional properties based on the selected modification action.
Execute the workflow to perform the specified text modification.
Example:

Consider an example where the "Modify Text" activity is used to trim and convert a text to uppercase:
Modify Text:
  Text To Modify: "   Hello, World!   "
  Text Modify: Trim
  Result: modifiedText
In this example, the activity trims the leading and trailing spaces from the text "   Hello, World!   " and converts it to uppercase. The result, "HELLO, WORLD!", is stored in the 
modifiedText
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Text/Append Line/index.html

Append Line
AutomatR.DefaultActivities.FileAndFolder.AppendLine
The "Append Line" activity in AutomatR allows you to add a specified string to the end of a file. This activity is particularly useful for updating log files or recording additional information in an existing file.
Properties
​
Name
Description
Input
File Path
Browse or provide the full path of the file to which you want to append the content.
Text
Specifies the text that should be added (appended) to the file.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append Line" activity. This can be useful for handling synchronization issues. Integer variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Append Line" activity onto the workflow.
Configure the properties by specifying the file path and the text to be appended.
Optionally, configure the delay and customize the display name.
Execute the workflow to add the specified text to the end of the selected file.
Example:

Consider an example where the "Append Line" activity is used to add a log entry to a log file:
Append Line:
  Display Name: "Append Log Entry"
  File Path: "C:\Logs\logfile.txt"
  Text: "Workflow execution completed successfully."
In this example, the activity appends the specified text, "Workflow execution completed successfully," to the end of the "logfile.txt" file located at "C:\Logs\". The operation is performed without direct output, and the updated file can be reviewed for the appended content.

URL: https://docs.automatr.tech/docs/Products/Activities/Application/Kill Process/index.html

Kill Process
AutomatR.DefaultActivities.General.KillProcess
The "Kill Process" activity in AutomatR, categorized under Application, terminates a designated Windows process. This activity is useful for automation workflows where it is necessary to end specific processes running on a Windows machine.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Kill Process" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
ID
Specifies the process ID that you want to terminate. Integer variables containing the process ID.
Process Name
Specifies the name of the process that you want to terminate. String variables containing the process name.
How to use:
Drag and drop the "Kill Process" activity onto the workflow.
Configure the properties by specifying the process name or process ID that you want to terminate.
Optionally, configure the delay based on your requirements.
Execute the workflow to terminate the specified process.
Example:

Consider an example where the "Kill Process" activity is used to terminate an instance of Google Chrome:
Kill Process:
  Process Name: "chrome"
In this example, the activity terminates all instances of the Google Chrome process running on the current session.

URL: https://docs.automatr.tech/docs/Products/Activities/Application/Is App Opened/index.html

Is App Opened
AutomatR.DefaultActivities.General.IsAppOpened
The "Is App Opened" activity in AutomatR, categorized under Application, checks the state of an application, helping to determine whether a specific application is currently open. This activity is useful for workflow automation scenarios where conditional actions are required based on the application's open state.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Is App Opened" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Is App Opened" operation, indicating whether the specified application is currently open. Variables of relevant types (e.g., Boolean variables) to store the operation result.
Process Details
Display Title Name
Specifies the desired display name of the application to verify (e.g., "Google Chrome"). String variables containing the display title name.
Name
Specifies the process name of the application to check (e.g., "Chrome"). String variables containing the process name.
Title
Specifies the title of the process for any open application (e.g., "CopyofStudents.xlsx"). String variables containing the title.
How to use:
Drag and drop the "Is App Opened" activity onto the workflow.
Configure the properties by specifying the process name, title, or display title name of the application you want to check.
Optionally, configure the delay based on your requirements.
Execute the workflow to determine whether the specified application is currently open.
Example:

Consider an example where the "Is App Opened" activity is used to check whether Google Chrome is currently open:
Is App Opened:
  Name: "chrome"
  Result: isChromeOpened
In this example, the activity checks if Google Chrome is currently open and stores the result in the Boolean variable "isChromeOpened" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Application/Input Dialog/index.html

Input Dialog
AutomatR.DefaultActivities.Applications.InputDialog
The "InputDialog" activity in AutomatR is designed to present a dialog box to users, soliciting input based on provided configurations. This activity facilitates interaction with users, allowing them to input information through either a text box or a set of predefined options.
Properties
​
Name
Description
Input
Delay
Specifies the wait time in seconds before executing the activity. Useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Example: 5 seconds as "5".
Title
Specifies the desired display title for the dialog box. 
String
 variables containing the title.
Label
Specifies the label for the input field in the dialog box. 
String
 variables containing the label.
Input Type
Selects the input type. Choose "Textbox" for a text input or "Multiple Choice" for predefined options. InputTypes 
enum
.
Options
Specifies multiple-choice options as an array of strings. Example: 
["Option1", "Option2"]
. 
String
 array variables.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Result
Outputs the user's input as a string variable, enabling the utilization of input for subsequent activities in the workflow. 
String
 variables storing the input value.
Output
Result
Captures the user's input or selection from the input dialog. The type of the result variable depends on the chosen "Input Type" and can be a string or the selected option. Supports a 
string
 variable or an object variable based on the input type.
How to use:
​
Drag and drop the "InputDialog" activity onto the workflow.
Configure the properties by setting the title, label, input type, and options.
Optionally, set the delay and customize the display name.
Execute the workflow to present the input dialog box to users.
The user's input will be stored in the specified result variable for further use in the workflow.
Example:
​
Consider an example where the "InputDialog" activity is used to prompt the user for their name:
InputDialog:
  Display Name: "Get User Name"
  Title: "User Input"
  Label: "Enter your name:"
  Input Type: Textbox
  Result: UserName
In this example, the activity displays a dialog box with the title "User Input" and the label "Enter your name." The user inputs their name into the text box, and the result is stored in the variable "UserName" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Application/Send Hotkey/index.html

Send Hotkey
The "Send Hotkey" activity in AutomatR is a powerful tool for simulating keyboard inputs within an application or system. This activity is particularly useful for automating tasks that involve keyboard shortcuts or require specific key presses to navigate or interact with applications.
Name
Description
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the hotkey, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Send Input
Determines whether to send the simulated hotkey input to the application in the foreground. If set to false, the hotkey is sent to the AutomatR process. Supports a 
boolean
 variable.
Effectively configuring these properties allows for precise control over the simulated keyboard input, enabling automation workflows to interact seamlessly with applications using hotkeys.
Configuring Application - Send Hotkey
​
Below is a step-by-step configuration procedure for the Application - Send Hotkey activity, considering the provided points:
Locate the "Application: Send Hotkey" activity in the 
Toolbox
 panel and drag it into your workflow.
In the properties panel, find the checkbox options for 
CTRL
, 
SHIFT
, 
ALT
, and 
Text
.
Check the checkboxes corresponding to the keys you want to include in the hotkey combination.
Find the dropdown menu that allows you to select the 
keyboard keys
.
Choose the specific key(s) you want to include in the hotkey combination.
If you checked the "Text" option, a section should appear in the place of dropdown to enter text. Enter the desired text you want to include in the hotkey.
Below the options, look for an 
ADD
 button. Click on it once you have configured your desired hotkey combination.
After clicking 
ADD
, the configured hotkey combination will be previewed below the ADD button. The preview should display the formatted string representation of the selected keys or text.
The configured value is automatically added to the "Send Input" property of the Application - Send Hotkey activity.
If you need to configure additional hotkeys, repeat the process by going back to step 2.
By following these steps, you can easily configure the "Application - Send Hotkey" activity to simulate keyboard inputs with the desired key combinations, including 
CTRL
, 
SHIFT
, 
ALT
, and custom 
text
. The preview feature helps ensure that the configured values match your expectations before being added to the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Application/Get Processes/index.html

Get Processes
AutomatR.DefaultActivities.General.GetProcesses
The "Get Processes" activity in AutomatR, categorized under Application, retrieves the list of currently running Windows processes on the local machine. This activity simplifies the process of obtaining information about active processes, enhancing automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Processes" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
ID
Specifies the process ID to fetch details for a specific process. Integer variables containing the process ID.
Name
Specifies the process name to fetch details for a specific process. String variables containing the process name.
Output
Result
Outputs an array of processes currently running on the local machine. Variables of type 
Process[]
 to store the list of processes.
How to use:
Drag and drop the "Get Processes" activity onto the workflow.
Optionally, configure the delay, process name, or process ID based on your requirements.
Execute the workflow to retrieve information about currently running processes.
Example:

Consider an example where the "Get Processes" activity is used to obtain details about all processes running on the local machine:
Get Processes:
  Result: processesArray
In this example, the activity retrieves information about all processes running on the local machine and stores the result in the 
processesArray
 variable for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Add Data Row/index.html

Add Data Row
AutomatR.DefaultActivities.Datatable.AddDataRow
The "Add Data Row" activity in AutomatR is part of the DataTable activities package, designed to facilitate the addition of a data row to a specified DataTable. This activity provides flexibility in defining the characteristics of the new row, such as specifying a DataRow object, an array of objects corresponding to column types, and the index at which the row should be inserted.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable to which a new row has to be added. 
DataTable
 variables containing the target DataTable.
Row
Specifies a DataRow object to be added as a row. 
DataRow
 variables containing the definition of the row to be added.
Row List
Specifies an array of objects to be added to the DataTable, where each object maps to the type of its corresponding column in the DataTable. 
ArrayList
 variables containing the values to be added to the new row.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Data Row" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Insert At
Specifies the index at which the new row should be inserted. 
Integer
 variables containing the index value. If not provided, the row will be added at the end of the DataTable.
How to use:
Drag and drop the "Add Data Row" activity onto the workflow.
Configure the properties by specifying the DataTable variable, DataRow object, or an array of objects for the new row.
Optionally, configure the delay and specify the index at which the new row should be inserted.
Execute the workflow to add the specified row to the DataTable.
Example:

Consider an example where the "Add Data Row" activity is used to add a new row to an existing DataTable:
Add Data Row:
  Data Table: existingDataTable
  Row:
    - Column1: "Value1"
    - Column2: "Value2"
    - Column3: "Value3"
  Insert At: 2
In this example, the activity adds a new row to the "existingDataTable" DataTable, specifying the values for each column in the row. The new row is inserted at index 2 in the DataTable. Adjust the input properties as needed to accommodate various scenarios in your automation workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Sort Data Table/index.html

Sort Data Table
AutomatR.DefaultActivities.Datatable.SortDataTable
The "Sort Data Table" activity in AutomatR allows you to sort an entire DataTable in either ascending or descending order based on the values of a specified column. This activity streamlines the process of organizing data, providing flexibility in arranging it according to specific requirements.
Properties
​
Name
Description
Input
Data Table
Enter the DataTable variable on which sorting needs to be applied. 
DataTable
 variable or argument.
Column
Enter the name of the column on which the sort operation should be applied in the DataTable. 
String
 variable or argument.
Direction
Select the order of sorting for the DataTable. Choose either "Ascending" or "Descending" from the available options. 
Enumeration
 variable or argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Sort Data Table" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the DataTable with sorted order based on the specified column and direction. 
DataTable
 variable or argument.
How to use:
Drag and drop the "Sort Data Table" activity onto the workflow.
Configure the properties by specifying the DataTable variable, the column on which sorting is to be performed, and the sorting direction.
Optionally, configure the delay and customize the display name.
Execute the workflow to obtain the sorted DataTable based on the specified column and direction.
Example:

Consider an example where the "Sort Data Table" activity is used to sort a DataTable named "employeeData" based on the "Salary" column in descending order:
Sort Data Table:
  Display Name: "Sort Employee Data"
  Data Table: employeeData
  Column: "Salary"
  Direction: Descending
  Result: sortedEmployeeData
In this example, the activity sorts the "employeeData" DataTable based on the "Salary" column in descending order, and the result is stored in the "sortedEmployeeData" DataTable variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Get Row Item/index.html

Get Row Item
AutomatR.DefaultActivities.Datatable.GetRowItem
The "Get Row Item" activity in AutomatR allows you to retrieve a value from a row in a DataTable by specifying a particular column. This is useful for extracting specific data points from DataTables during workflow execution.
Properties
​
Name
Description
Input
Column Index
Specifies the index of the column from which to retrieve the value. If using Column Name, this property can be left empty. 
Integer
 variable or argument.
Column Name
Specifies the name of the column from which to retrieve the value. If using Column Index, this property can be left empty. 
String
 variable or argument.
Data Row
Specifies the DataRow from which to retrieve the value. Variable or argument containing the 
DataRow
 to read from.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Row Item" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the value of the specified column from the DataRow. 
String
 variable or argument to store the retrieved value.
How to use:
Drag and drop the "Get Row Item" activity onto the workflow.
Configure the properties by specifying the DataRow, either the Column Index or Column Name, and optionally customize the display name.
Execute the workflow to retrieve the specified value from the DataRow.
Example:

Consider an example where the "Get Row Item" activity is used to extract the value from the "ColumnName" column of a DataRow:
Get Row Item:
  Display Name: "Retrieve Value"
  Data Row: dataRowVariable
  Column Name: "ColumnName"
  Result: extractedValue
In this example, the activity retrieves the value from the "ColumnName" column of the specified DataRow, and the result is stored in the string variable "extractedValue" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Update Row Item/index.html

Update Row Item
AutomatR.DefaultActivities.Datatable.UpdateRowItem
The "Update Row Item" activity in AutomatR allows you to assign a specified value to the indicated column of a DataTable row. This activity is useful for updating specific values within a DataTable, enhancing the flexibility of data manipulation in your workflows.
Properties
​
Name
Description
Input
Column Index
Enter the number (index) of the column to be updated. 
Integer
 variable or argument.
Column Name
Enter the name of the column to be updated. 
String
 variable or argument.
Data Table
Enter the DataTable variable to update values. 
DataTable
 variable or argument.
Row Index
Enter the row index where you want to update the row item. 
Integer
 variable or argument.
Value
Enter the value as a string to be written to the indicated column. 
String
 variable or argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Row Item" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the DataTable with updated values. 
DataTable
 variable or argument.
How to use:
Drag and drop the "Update Row Item" activity onto the workflow.
Configure the properties by specifying the DataTable variable, row index, column name or index, and the value to be assigned.
Optionally, configure the delay and customize the display name.
Execute the workflow to update the specified row item in the DataTable.
Example:

Consider an example where the "Update Row Item" activity is used to update the "Salary" column value in the third row of a DataTable named "employeeData":
Update Row Item:
  Display Name: "Update Salary"
  Data Table: employeeData
  Row Index: 2
  Column Name: "Salary"
  Value: "60000"
  Result: updatedEmployeeData
In this example, the activity updates the "Salary" column value in the third row of the "employeeData" DataTable to "60000". The result of the operation is stored in the "updatedEmployeeData" DataTable variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/For Each Data Row/index.html

For Each Data Row
AutomatR.DefaultActivities.Datatable.ForEachDataRow
The "For Each Data Row" activity in AutomatR facilitates iterating through each row in a specified DataTable variable, allowing users to execute actions on individual rows within the DataTable. This activity is especially useful for scenarios where specific operations need to be performed on each row of a DataTable.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable on which an action is to be executed once for each row. 
DataTable
 variables containing the data table to be iterated.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Variables
The numerical value used to identify the position of an element within a collection or array.
Variables:
Index: An internal variable that keeps track of the current iteration index. It can be accessed in the workflow for further use.
Break and Continue:
This activity supports the use of break and continue bookmarks, allowing users to control the flow of execution within the loop. Break and continue bookmarks can be used to interrupt the loop or skip to the next iteration based on specific conditions.
How to use:
Drag and drop the "For Each Data Row" activity onto the workflow.
Configure the properties by specifying the DataTable variable on which the action will be executed for each row.
Optionally, configure the display name.
Use the body of the activity to define the action to be performed on each DataRow.
Example:

Consider an example where the "For Each Data Row" activity is used to iterate through a DataTable named "employeeData" and print the values of the "Name" column for each row:
For Each Data Row:
  Data Table: employeeData
  Body:
    Write Line: "Employee Name: " + row["Name"].ToString()
In this example, the activity iterates through each row in the "employeeData" DataTable, and for each row, it executes the defined action in the body (printing the employee name). Adjust the input properties and body of the activity based on your specific requirements.
Break and Continue:
Break and continue bookmarks can be used to control the loop flow. To use them, create a bookmark variable in your workflow, configure it in the "For Each Data Row" activity, and use it in your workflow logic.
Variables Usage:
The "Index" variable can be accessed in the workflow after the loop execution to retrieve the total number of iterations.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Generate Table From Text/index.html

Generate Table From Text
AutomatR.DefaultActivities.Datatable.GenerateTableFromText
The "Generate Table From Text" activity in AutomatR allows you to create a DataTable from the content of a specified text file. This activity is particularly useful when you need to extract tabular data from a text file and work with it in your workflows.
Properties
​
Name
Description
Input
File Path/Text
Specifies the full path of the text file on the local drive or the actual text from which you want to generate a DataTable. 
String
 variables containing the file path or text.
Has Headers
Indicates whether the first row of the text file contains headers. If enabled, the first row is considered as headers in the resulting DataTable. 
Boolean
 variables containing the information.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Generate Table From Text" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Delimiter
Specifies the delimiter in the text file to separate columns (e.g., Tab, Comma(,), Semicolon(;), Caret(^), or Pipe(I)). 
String
 variables containing the delimiter information.
Output
Result
Outputs the DataTable with data extracted from the specified inputs. Variables of type 
DataTable
 to store the generated table.
How to use:
Drag and drop the "Generate Table From Text" activity onto the workflow.
Configure the properties by specifying the file path or text, indicating whether the text has headers, and setting optional parameters such as delay and delimiter.
Execute the workflow to generate a DataTable from the specified text file or text.
Example:

Consider an example where the "Generate Table From Text" activity is used to create a DataTable from a text file:
Generate Table From Text:
  File Path/Text: "C:\data\sample.txt"
  Has Headers: True
  Delimiter: ","
  Result: dataTableResult
In this example, the activity reads the content of the "sample.txt" file, considering the first row as headers, using a comma as the delimiter. The resulting DataTable is stored in the variable "dataTableResult" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Output Datatable/index.html

Output Datatable
AutomatR.DefaultActivities.Datatable.OutputDatatable
The "Output DataTable" activity in AutomatR converts a DataTable to a string format. This activity is useful for generating a string representation of the data within a DataTable, facilitating logging, debugging, or further processing.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable to be converted to a string. Variable or argument containing the 
DataTable
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Output DataTable" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the DataTable conversion as a 
string
. Variable or argument to store the resulting string.
How to use:
Drag and drop the "Output DataTable" activity onto the workflow.
Configure the properties by specifying the DataTable variable to be converted to a string.
Optionally, configure the delay and customize the display name.
Execute the workflow to convert the DataTable to a string, and the resulting string will be stored in the specified variable.
Example:

Consider an example where the "Output DataTable" activity is used to convert a DataTable named "employeeData" to a string representation:
Output DataTable:
  Display Name: "OutputDataTableActivity"
  Data Table: employeeData
  Result: dataTableAsString
In this example, the activity converts the "employeeData" DataTable to a string, and the result is stored in the variable "dataTableAsString" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Sort Data Table Multi Cols/index.html

Sort Data Table Multi Cols
AutomatR.DefaultActivities.Datatable.SortDataTableMultiCols
The "Sort Data Table Multi Cols" activity in AutomatR facilitates sorting an entire DataTable based on ascending or descending order, considering the values of one or more specified columns. This activity is beneficial for organizing data in a structured manner, enhancing the efficiency of subsequent workflow processes.
Properties
​
Name
Description
Input
Data Table
Enter the DataTable variable on which sorting needs to be performed. 
DataTable
 variable or argument.
Sort Expression
Click the "Set Sort" button to invoke a wizard that prefills the sort expression based on the selected columns. 
String
 variable or argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Sort Data Table Multi Cols" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Stores the sorted DataTable extracted from the activity. 
DataTable
 variable or argument.
How to use:
Drag and drop the "Sort Data Table Multi Cols" activity onto the workflow.
Configure the properties by specifying the DataTable variable on which sorting is to be performed and the sort expression using the "Set Sort" button.
Optionally, configure the delay and customize the display name.
Execute the workflow to obtain the sorted DataTable based on the specified columns.
Example:

Consider an example where the "Sort Data Table Multi Cols" activity is used to sort a DataTable named "employeeData" based on the columns "Salary" in ascending order and "EmployeeName" in descending order:
Sort Data Table Multi Cols:
  Display Name: "Sort Employee Data"
  Data Table: employeeData
  Sort Expression: "Salary ASC, EmployeeName DESC"
  Result: sortedEmployeeData
In this example, the activity sorts the "employeeData" DataTable based on the specified columns, and the result is stored in the "sortedEmployeeData" DataTable variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Remove Data Row/index.html

Remove Data Row
AutomatR.DefaultActivities.Datatable.RemoveDataRow
The "Remove Data Row" activity in AutomatR facilitates the removal of a DataRow from a specified DataTable. This activity is valuable for dynamic management of DataTable content within workflows, allowing the removal of specific rows based on either the DataRow object or the row index.
Properties
​
Name
Description
Input
Data Table
Enter the DataTable variable from which a row has to be removed. 
DataTable
 variable or argument.
Row
Enter a DataRow object to be removed from the DataTable. 
DataRow
 variable or argument.
Row Index
Provide a row index to remove the row from the DataTable. 
Integer
 variable or argument representing the index of the row to be removed.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Remove Data Row" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Remove Data Row" activity onto the workflow.
Configure the properties by specifying either the DataRow object or the row index to be removed from the DataTable.
Provide the DataTable variable containing the DataRow to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to remove the specified row from the DataTable.
Example:

Consider an example where the "Remove Data Row" activity is used to remove a specific row from a DataTable named "employeeData":
Remove Data Row:
  Display Name: "Remove Employee Row"
  Row Index: 2
  Data Table: employeeData
In this example, the activity removes the row at index 2 from the "employeeData" DataTable. The modification is applied directly to the DataTable.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Lookup Data Table/index.html

Lookup Data Table
AutomatR.DefaultActivities.Datatable.LookupDataTable
The "Lookup Data Table" activity in AutomatR enables you to search for a specific value within a designated DataTable. This activity simplifies the process of locating a value and retrieving information about its location within the DataTable.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable that requires a lookup operation. Variable or argument containing the 
DataTable
.
Lookup Value
Specifies the value that needs to be searched for in the DataTable. 
String
 variable or argument containing the lookup value.
Lookup Column
Column Index
Specifies the index of the column you want to search for. 
Nullable integer
 variable or 
argument
.
Column Name
Specifies the name of the column you want to search for. 
String
 variable or argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Lookup Data Table" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Cell Value
Outputs the value found in the cell that has the specified row and column coordinates. 
String
 variable to store the cell value. If the value is not found, the variable remains empty.
Row Index
Outputs the row index for the found cell. 
Integer
 variable to store the row index. If the value is not found, -1 is returned.
Target Column
Column Index
Specifies the index of the target column. 
Nullable integer
 variable or 
argument
.
Column Name
Specifies the name of the target column. 
String
 variable or argument.
How to use:
Drag and drop the "Lookup Data Table" activity onto the workflow.
Configure the properties by specifying the DataTable, lookup value, and either the column index or column name for the lookup.
Optionally, configure the target column index or name, and customize the display name.
Execute the workflow to perform the lookup operation, and the result will be stored in the specified variables.
Example:

Consider an example where the "Lookup Data Table" activity is used to find the row index and cell value of a specific item in a DataTable:
Lookup Data Table:
  Display Name: "Search for Item"
  Data Table: dataTableVariable
  Lookup Value: "Item123"
  Column Name: "ItemID"
  Target Column Name: "ItemName"
  Row Index: rowIndexVariable
  Cell Value: itemNameVariable
In this example, the activity searches for the value "Item123" in the "ItemID" column of the DataTable "dataTableVariable." The row index where the value is found is stored in the variable "rowIndexVariable," and the corresponding value from the "ItemName" column is stored in the variable "itemNameVariable." If the value is not found, the row index is set to -1.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Filter Data Table/index.html

Filter Data Table
AutomatR.DefaultActivities.Datatable.FilterDataTable
The "Filter Data Table" activity in AutomatR provides the capability to filter a DataTable variable based on specified conditions. This activity streamlines the process of narrowing down data within a DataTable to meet specific criteria, facilitating more targeted and efficient data manipulation.
Properties
​
Name
Description
Input
Column
Specifies the column name or index for which the filter should be applied. 
String
 variables containing the column name or index.
Data Table
Specifies the DataTable variable on which filters need to be applied. 
DataTable
 variables containing the data table to be filtered.
Filter Value
Specifies the string value as the criteria to filter the table. 
String
 variables containing the filter criteria.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Filter Data Table" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the filtered DataTable based on the specified criteria. 
DataTable
 variables to store the resulting filtered table.
How to use:
Drag and drop the "Filter Data Table" activity onto the workflow.
Configure the properties by specifying the DataTable variable, column name or index, and the filter criteria.
Optionally, configure the delay.
Execute the workflow to filter the DataTable based on the specified criteria.
Example:

Consider an example where the "Filter Data Table" activity is used to filter a DataTable named "employeeData" based on the "Department" column with the filter criteria "IT":
Filter Data Table:
  Data Table: employeeData
  Column: "Department"
  Filter Value: "IT"
  Result: filteredEmployeeData
In this example, the activity filters the "employeeData" DataTable to include only rows where the "Department" column equals "IT." The resulting filtered DataTable is stored in the "filteredEmployeeData" variable for further use in the workflow. Adjust the input properties based on your specific data filtering requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Remove Data Column/index.html

Remove Data Column
AutomatR.DefaultActivities.Datatable.RemoveDataColumn
The "Remove Data Column" activity in AutomatR is designed to remove a DataColumn from a specified DataTable. This activity is useful for dynamically managing the structure of DataTables within workflows, allowing the removal of unnecessary columns based on either the column index or name.
Properties
​
Name
Description
Input
Column Index
Enter the index of the column to be removed from the DataTable. 
Integer
 variable or argument representing the index of the column.
Column Name
Enter the name of the column to be removed from the DataTable. 
String
 variable or 
argument
 representing the name of the column.
Data Table
Enter the DataTable variable containing the DataColumn to be deleted. 
DataTable
 variable or 
argument
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Remove Data Column" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Remove Data Column" activity onto the workflow.
Configure the properties by specifying either the column index or column name to be removed from the DataTable.
Provide the DataTable variable containing the DataColumn to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to remove the specified column from the DataTable.
Example:

Consider an example where the "Remove Data Column" activity is used to remove a column named "Salary" from a DataTable named "employeeData":
Remove Data Column:
  Display Name: "Remove Salary Column"
  Column Name: "Salary"
  Data Table: employeeData
In this example, the activity removes the "Salary" column from the "employeeData" DataTable. The modification is applied directly to the DataTable.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Merge Data Table/index.html

Merge Data Table
AutomatR.DefaultActivities.Datatable.MergeDataTable
The "Merge Data Table" activity in AutomatR allows you to merge the destination DataTable with the source DataTable. This activity is useful for combining data from two DataTables into a single DataTable.
Properties
​
Name
Description
Input
Data Table 1
Specifies the first DataTable required to perform the merge operation. Variable or argument containing the first 
DataTable
.
Data Table 2
Specifies the second DataTable required to perform the merge operation. Variable or argument containing the second 
DataTable
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Merge Data Table" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the DataTable based on the merge operation between the specified DataTables. Variable or argument to store the resulting 
DataTable
.
How to use:
Drag and drop the "Merge Data Table" activity onto the workflow.
Configure the properties by specifying the first DataTable and second DataTable for the merge operation.
Optionally, configure the delay and customize the display name.
Execute the workflow to perform the merge operation, and the resulting DataTable will be stored in the specified variable.
Example:

Consider an example where the "Merge Data Table" activity is used to combine data from two DataTables:
Merge Data Table:
  Display Name: "MergeDataTableActivity"
  Data Table 1: dataTable1Variable
  Data Table 2: dataTable2Variable
  Result: mergedDataTableVariable
In this example, the activity merges the data from "dataTable1Variable" and "dataTable2Variable" into a new DataTable, and the result is stored in the variable "mergedDataTableVariable."

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Add Data Column/index.html

Add Data Column
AutomatR.DefaultActivities.Datatable.AddDataColumn
The "Add Data Column" activity in AutomatR is part of the DataTable activities package, designed to facilitate the addition of a data column to a specified DataTable. This activity provides flexibility in defining the characteristics of the new column, such as its name, data type, and optional settings like allowing null values, auto-increment, default value, uniqueness, and maximum length.
Properties
​
Name
Description
Input
Column
Specifies a DataColumn object that needs to be added to the existing DataTable. 
DataColumn
 variables containing the definition of the column to be added.
Column Name
Specifies the name of the new column to be inserted into the table. 
String
 variables containing the desired column name.
Data Table
Specifies the DataTable variable that has extracted data from other inbound activities. 
DataTable
 variables containing the target DataTable.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Allow Null
Specifies whether to allow null values in the new column. 
Boolean
 variables determining whether to allow null values.
Auto Increment
Specifies whether to allow the column to increment automatically when a new row is added. 
Boolean
 variables determining whether to enable auto-increment.
Default Value
Specifies the default value for the new column when creating new rows. 
String
 variables containing the default value.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Data Column" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Max Length
Specifies the maximum length for each row of the new column. 
Integer
 variables containing the maximum length.
Unique
Specifies whether the values in each row of the new column should be unique. 
Boolean
 variables determining whether to enforce uniqueness.
How to use:
Drag and drop the "Add Data Column" activity onto the workflow.
Configure the properties by specifying the DataColumn object, column name, DataTable variable, and other optional settings.
Optionally, configure the delay.
Execute the workflow to add the specified column to the DataTable.
Example:

Consider an example where the "Add Data Column" activity is used to add a new column named "Age" to an existing DataTable:
Add Data Column:
  Data Table: existingDataTable
  Column Name: "Age"
  Allow Null: False
  Auto Increment: False
  Unique: False
  Max Length: 3
In this example, the activity adds a new column named "Age" to the "existingDataTable" DataTable, specifying that null values are not allowed, auto-increment is disabled, uniqueness is not enforced, and the maximum length is set to 3 characters for each row.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Create Data Table/index.html

Create Data Table
AutomatR.DefaultActivities.Datatable.CreateDataTable
The "Create Data Table" activity in AutomatR facilitates the creation of a DataTable based on supplied information. This activity is particularly useful for dynamically generating DataTables to store and manipulate data within automation workflows.
Properties
​
Name
Description
Input
Create Data Table
Initiates the Create Data Table wizard, allowing customization of the table to be created. Click the button to configure the properties of the DataTable, including column names, data types, and other settings.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Data Table" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the 
DataTable
 variable that stores the information added in the Create Data Table wizard. This DataTable can be further used for data manipulation and analysis in the workflow. DataTable variables to store the created table.
How to use:
Drag and drop the "Create Data Table" activity onto the workflow.
Click the "Create Data Table" button to initiate the wizard.
In the wizard, configure the properties of the DataTable, including column names, data types, and other settings.
Optionally, configure the delay.
Execute the workflow to create the specified DataTable dynamically.
Example:

Consider an example where the "Create Data Table" activity is used to create a DataTable with columns "ID," "Name," and "Age":
Create Data Table:
  Create Data Table: Click to configure
  Result: createdDataTable
In this example, clicking the "Create Data Table" button initiates the wizard, and you can configure the DataTable properties. The resulting DataTable is stored in the "createdDataTable" variable for further use in the workflow. Adjust the input properties and DataTable configuration based on your specific data requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Remove Duplicate Rows/index.html

Remove Duplicate Rows
AutomatR.DefaultActivities.Datatable.RemoveDuplicateRows
The "Remove Duplicate Rows" activity in AutomatR is designed to eliminate duplicate rows from a specified DataTable variable, retaining only the first occurrence. This activity aids in maintaining data integrity and consistency within workflows by ensuring unique rows within the DataTable.
Properties
​
Name
Description
Input
Data Table
Enter the DataTable variable from which duplicate rows need to be removed. 
DataTable
 variable or argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Remove Duplicate Rows" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the DataTable with unique rows, free from duplicate occurrences. 
DataTable
 variable or argument.
How to use:
Drag and drop the "Remove Duplicate Rows" activity onto the workflow.
Configure the properties by specifying the DataTable variable from which duplicate rows need to be removed.
Optionally, configure the delay and customize the display name.
Execute the workflow to obtain the DataTable with unique rows, removing any duplicate occurrences.
Example:

Consider an example where the "Remove Duplicate Rows" activity is used to ensure unique employee records in a DataTable named "employeeData":
Remove Duplicate Rows:
  Display Name: "Remove Duplicates"
  Data Table: employeeData
  Result: uniqueEmployeeData
In this example, the activity removes duplicate rows from the "employeeData" DataTable, retaining only the first occurrence of each unique row. The result is stored in the "uniqueEmployeeData" DataTable variable for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Clear Data Table/index.html

Clear Data Table
AutomatR.DefaultActivities.Datatable.ClearDataTable
The "Clear Data Table" activity in AutomatR is part of the DataTable activities package, designed to clear all data within a specified DataTable. This activity helps streamline the data management process, ensuring that the DataTable is empty and ready for new data.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable object for which all data should be cleared. 
DataTable
 variables containing the target DataTable.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Clear Data Table" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Clear Data Table" activity onto the workflow.
Configure the properties by specifying the DataTable variable for which you want to clear all data.
Optionally, configure the delay.
Execute the workflow to clear all data within the specified DataTable.
Example:

Consider an example where the "Clear Data Table" activity is used to clear all data from an existing DataTable:
Clear Data Table:
  Data Table: existingDataTable
In this example, the activity clears all data from the "existingDataTable" DataTable, leaving it empty for the insertion of new data. Adjust the input properties as needed to accommodate various scenarios in your automation workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Join Data Tables/index.html

Join Data Tables
AutomatR.DefaultActivities.Datatable.JoinDataTables
The "Join Data Tables" activity in AutomatR allows you to combine rows from two DataTables by matching values that are common to each other, following a specified Join rule. This activity facilitates merging data from different sources based on matching column values.
Properties
​
Name
Description
Input
Data Table 1
Specifies the first DataTable required to perform the join operation. Variable or argument containing the first 
DataTable
.
Data Table 2
Specifies the second DataTable required to perform the join operation. Variable or argument containing the second 
DataTable
.
Data Table 1 Column Name
Specifies the column name from the first DataTable to be used for the join operation. 
String
 variable or argument containing the column name.
Data Table 2 Column Name
Specifies the column name from the second DataTable to be used for the join operation. 
String
 variable or argument containing the column name.
Join Type
Selects the type of join based on the operation required and the nature of joins. 
Enum
 variable or argument. Options: 
inner_join
, 
outer_join
, 
left_join
, 
right_join
.
left_join
 : Places all the rows from the left table and any matching rows from the right table. 
 Refer the below example: 
 
DataTable1
 
 
 
 
Customer ID
 
Customer Name
 
 
 
 
 
 1
 
John
 
 
 
2
 
Sarah
 
 
 
3
 
David
 
 
 
 
 
DataTable2
 
 
 
 
Order ID
 
Customer ID
 
Product
 
 
 
 
 
101
 
1
 
Laptop
 
 
 
102
 
2
 
Headphones
 
 
 
103
 
1
 
Smartphone
 
 
 
 
 The left_join result would be: 
 
 
 
 
Customer ID
 
Customer Name
 
Order ID
 
Product
 
 
 
 
 
1
 
John
 
101
 
Laptop
 
 
 
1
 
John
 
103
 
Smartphone
 
 
 
2
 
Sarah
 
102
 
Headphones
 
 
 
3
 
David
 
 
 
 
 
 
 As you can see, all the rows from the left of DataTable1 are included, and the matching rows from the right of DataTable2 are joined based on the common "CustomerID" column. If there is no match, the corresponding values from the right table are filled with empty or null values, as seen in the last row of the result.
right_join
 : Places all the rows from the right table and any matching rows from the left table. 
 Refer the below example: 
 
DataTable1
 
 
 
 
Customer ID
 
Customer Name
 
 
 
 
 
 1
 
John
 
 
 
2
 
Sarah
 
 
 
3
 
David
 
 
 
 
 
DataTable2
 
 
 
 
Order ID
 
Customer ID
 
Product
 
 
 
 
 
101
 
1
 
Laptop
 
 
 
102
 
2
 
Headphones
 
 
 
103
 
1
 
Smartphone
 
 
 
 
 The right_join result would be: 
 
 
 
 
Customer ID
 
Customer Name
 
Order ID
 
Product
 
 
 
 
 
1
 
John
 
101
 
Laptop
 
 
 
1
 
John
 
103
 
Smartphone
 
 
 
2
 
Sarah
 
102
 
Headphones
 
 
 
 
 As you can see, all the rows from the right of DataTable2 are included, and the matching rows from the left of DataTable1 are joined based on the common "CustomerID" column. If there is no match, the corresponding values from the left table are filled with empty or null values.
inner_join
 : Only the rows that have matching values in the specified key column from both tables are included in the resulting dataset. The non-matching rows from either table are excluded. 
 Refer the below example: 
 
DataTable1
 
 
 
 
Customer ID
 
Customer Name
 
 
 
 
 
 1
 
John
 
 
 
2
 
Sarah
 
 
 
3
 
David
 
 
 
 
 
DataTable2
 
 
 
 
Order ID
 
Customer ID
 
Product
 
 
 
 
 
101
 
1
 
Laptop
 
 
 
102
 
2
 
Headphones
 
 
 
103
 
1
 
Smartphone
 
 
 
104
 
4
 
Tablet
 
 
 
 
 The inner_join result would be: 
 
 
 
 
Customer ID
 
Customer Name
 
Order ID
 
Product
 
 
 
 
 
1
 
John
 
101
 
Laptop
 
 
 
1
 
John
 
103
 
Smartphone
 
 
 
2
 
Sarah
 
102
 
Headphones
 
 
 
 
 As you can see, only the rows with matching "CustomerID" values from both tables are included in the result. The row with CustomerID 3 from the DataTable1 and the row with OrderID 104 from the DataTable2, which don't have matching values, are excluded from the result.
outer_join
 : All the rows from both tables are included in the resulting dataset, regardless of whether they have matching values in the specified key column. 
 Refer the below example: 
 
DataTable1
 
 
 
 
Customer ID
 
Customer Name
 
 
 
 
 
 1
 
John
 
 
 
2
 
Sarah
 
 
 
3
 
David
 
 
 
 
 
DataTable2
 
 
 
 
Order ID
 
Customer ID
 
Product
 
 
 
 
 
101
 
1
 
Laptop
 
 
 
102
 
2
 
Headphones
 
 
 
103
 
1
 
Smartphone
 
 
 
104
 
4
 
Tablet
 
 
 
 
 The outer_join result would be: 
 
 
 
 
Customer ID
 
Customer Name
 
Order ID
 
Product
 
 
 
 
 
1
 
John
 
101
 
Laptop
 
 
 
1
 
John
 
103
 
Smartphone
 
 
 
2
 
Sarah
 
102
 
Headphones
 
 
 
3
 
David
 
 
 
 
 
4
 
 
104
 
Tablet
 
 
 
 
 As you can see, all the rows from both the "DataTable1" and "DataTable2" tables are included in the result. If there is no match, the corresponding values are filled with null or empty values.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Join Data Tables" activity. This can be useful for handling synchronization issues. 
Integer
 variable or argument containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the DataTable after the join operation based on the join type and both input DataTables. Variable or argument of type 
DataTable
 to store the result of the join operation.
How to use:
Drag and drop the "Join Data Tables" activity onto the workflow.
Configure the properties by specifying the first DataTable, second DataTable, column names, join type, and optionally customize the display name.
Execute the workflow to perform the join operation, and the result will be stored in the specified variable.
Example:

Consider an example where the "Join Data Tables" activity is used to combine data from two DataTables based on a common column:
Join Data Tables:
  Display Name: "Combine Data"
  Data Table 1: dataTable1Variable
  Data Table 2: dataTable2Variable
  Data Table 1 Column Name: "ID"
  Data Table 2 Column Name: "ID"
  Join Type: inner_join
  Result: joinedDataTable
In this example, the activity combines rows from 
dataTable1Variable
 and 
dataTable2Variable
 based on the common column "ID" using an inner join. The result of the operation is stored in the DataTable variable "joinedDataTable" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Data Table/Filter Data Table Multiple Columns/index.html

Filter Data Table Multiple Columns
AutomatR.DefaultActivities.Datatable.FilterDataTableMultipleColumns
The "Filter Data Table Multiple Columns" activity in AutomatR enables users to filter a DataTable variable based on multiple conditions, providing flexibility and precision in data manipulation. This activity is designed to streamline the process of narrowing down data within a DataTable by specifying criteria for multiple columns.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable on which filters need to be applied. 
DataTable
 variables containing the data table to be filtered.
Filter Criteria
Specifies conditions to filter data by column name, filter value, or condition in the DataTable. List of 
FilterObj
 objects, each containing information about the column, filter value, and condition.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Filter Data Table Multiple Columns" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the filtered DataTable based on the specified criteria. 
DataTable
 variables to store the resulting filtered table.
FilterObj Structure:
Column: Specifies the column name on which the filter should be applied.
Filter Value: Specifies the value used as a filter criterion for the specified column.
Condition: Specifies the logical condition used to filter the data (e.g., AND, OR, NONE).
How to use:
Drag and drop the "Filter Data Table Multiple Columns" activity onto the workflow.
Configure the properties by specifying the DataTable variable and providing a list of filter criteria for multiple columns.
Optionally, configure the delay.
Execute the workflow to filter the DataTable based on the specified criteria for multiple columns.
Example:

Consider an example where the "Filter Data Table Multiple Columns" activity is used to filter a DataTable named "employeeData" based on multiple conditions:
Filter Data Table Multiple Columns:
  Data Table: employeeData
  Filter Criteria:
    - Column: "Department"
      Filter Value: "IT"
      Condition: AND
    - Column: "Salary"
      Filter Value: "50000"
      Condition: OR
  Result: filteredEmployeeData
In this example, the activity filters the "employeeData" DataTable to include only rows where the "Department" column equals "IT" AND the "Salary" column equals "50000" OR based on the specified conditions. The resulting filtered DataTable is stored in the "filteredEmployeeData" variable for further use in the workflow. Adjust the input properties based on your specific data filtering requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Collections/Add to Collection/index.html

Add to Collection
The "Add To Collection" activity in AutomatR facilitates the dynamic building of collections by adding elements to an existing collection. This is useful when you need to create, modify, or extend lists, arrays, or other collection types during the course of your automation workflow.
Name
Description
Misc
Collection
Specifies the target collection to which the item will be added. Supports a variable of type 
List
, 
Array
, or other 
collection
 types.
Display Name
This property allows you to customize the display name of the activity within the workflow.
Item
Specifies the item or element that you want to add to the collection. Supports a variable of any data type, including 
Boolean
, 
Int32
, 
String
, 
Object
, and 
Array of Types
.
Type Argument
Defines the data type of the elements in the collection. Options include Boolean, Int32, String, Object, Array of Types, and Browse for Types (allowing the user to select a .NET Type from the browse list).
Effectively configuring these properties enables the dynamic and controlled addition of elements to collections, providing a powerful tool for managing and manipulating data structures in UiPath workflows.

URL: https://docs.automatr.tech/docs/Products/Activities/Collections/Clear Collection/index.html

Clear Collection
The "Clear Collection" activity in AutomatR is designed to remove all elements from a collection, effectively resetting it to an empty state. This is useful when you need to clear the contents of a list, array, or other collection types during the course of your automation workflow.
Name
Description
Misc
Collection
Specifies the target collection that you want to clear. Supports a variable of type 
List
, 
Array
, or other 
collection
 types.
Display Name
This property allows you to customize the display name of the activity within the workflow.
Type Argument
Defines the data type of the elements in the collection. Options include Boolean, Int32, String, Object, Array of Types, and Browse for Types (allowing the user to select a .NET Type from the browse list).
Effectively configuring these properties enables you to clear the contents of a collection, making it empty and ready for new data. This activity is particularly useful when you need to reset or prepare a collection for a fresh set of elements within your AutomatR workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Collections/Exists in collection/index.html

Exists in Collection
The "Exists In Collection" activity in AutomatR allows you to check whether a specified item exists within a collection. This activity is valuable for validating the presence or absence of a particular element in lists, arrays, or other collection types during your automation workflow.
Name
Description
Misc
Collection
Specifies the target collection in which you want to check for the existence of the item. Supports a variable of type 
List
, 
Array
, or other 
collection
 types.
Display Name
This property allows you to customize the display name of the activity within the workflow.
Item
Specifies the element or value that you want to check for in the collection. Supports a variable of any data type.
Result
Captures the result of the "Exists In Collection" operation, indicating whether the item is found in the collection. Supports a 
boolean
 variable.
Type Argument
Defines the data type of the elements in the collection. Options include Boolean, Int32, String, Object, Array of Types, and Browse for Types (allowing the user to select a .NET Type from the browse list).
Effectively configuring these properties enables you to check for the existence of a specific item within a collection, providing a robust mechanism for data validation and decision-making in your AutomatR automation processes.

URL: https://docs.automatr.tech/docs/Products/Activities/Collections/Remove From Collection/index.html

Remove From Collection
The "Remove From Collection" activity in AutomatR enables you to remove a specified item from a collection, allowing for dynamic modification of lists, arrays, or other collection types during your automation workflow.
Name
Description
Misc
Collection
Specifies the target collection from which you want to remove the item. Supports a variable of type 
List
, 
Array
, or other 
collection
 types.
Display Name
This property allows you to customize the display name of the activity within the workflow.
Item
Specifies the element or value that you want to remove from the collection. Supports a variable of any data type.
Result
Captures the result of the "Remove From Collection" operation, indicating whether the removal was successful. Supports a 
boolean
 variable.
Type Argument
Defines the data type of the elements in the collection. Options include Boolean, Int32, String, Object, Array of Types, and Browse for Types (allowing the user to select a .NET Type from the browse list).
Effectively configuring these properties allows you to dynamically manage the contents of a collection by removing specific items, enhancing the flexibility and adaptability of your AutomatR automation processes.

URL: https://docs.automatr.tech/docs/Products/Activities/Image Processing/Image Comparison/index.html

Image Comparison
AutomatR.DefaultActivities.ImageProcessing.ImageComparison
The "Image Comparison" activity in AutomatR, categorized under ImageProcessing, provides the capability to compare two different images and outputs the result as a matching percentage. This activity is particularly useful for automating workflows that involve visual verification or validation based on image content.
Properties
​
Name
Description
Input
First Image File
Specifies the path or allows browsing to select the first image file for the comparison. String variables containing the file path of the first image.
Second Image File
Specifies the path or allows browsing to select the second image file for the comparison. String variables containing the file path of the second image.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Image Comparison" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the wait time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the matching percentage as a string variable. String variables to store the matching percentage result.
How to use:
Drag and drop the "Image Comparison" activity onto the workflow.
Configure the properties by specifying the paths of the first and second images for comparison.
Optionally, configure the delay based on your requirements.
Execute the workflow to compare the specified images, and the matching percentage result will be stored in the output variable.
Example:

Consider an example where the "Image Comparison" activity is used to compare two images:
Image Comparison:
  First Image File: "C:\Images\Image1.png"
  Second Image File: "C:\Images\Image2.png"
  Result: matchingPercentage
In this example, the activity compares "Image1.png" and "Image2.png" and stores the matching percentage result in the string variable "matchingPercentage" for further use in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Windows Credentials/Delete Credentials/index.html

Delete Credentials
AutomatR.DefaultActivities.WindowsCredentials.DeleteCredentials
The "Delete Credentials" activity in AutomatR is designed to remove the credentials for a specified target from the Windows Credential Manager. It returns a boolean value indicating the success or failure of the operation. This activity is useful for managing stored credentials and enhancing security by deleting unnecessary credentials.
Properties
​
Name
Description
Input
Target Name
Represents the network address to be used in conjunction with the provided credentials. This should be the target system or service for which the credentials are being stored. String variables containing the target name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Credentials" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
A boolean variable that indicates whether the process of deleting the given target's credentials from the Windows Credential Manager was successful. The value "true" indicates success, and "false" indicates failure. Boolean variables to store the operation result.
How to use:
​
Drag and drop the "Delete Credentials" activity onto the workflow.
Specify the target name for which the credentials should be deleted.
Optionally, set the delay for the execution.
Execute the workflow to delete the specified target's credentials from the Windows Credential Manager.
Example:
​
Consider an example where the "Delete Credentials" activity is used to remove stored credentials for a network address:
Delete Credentials:
  Display Name: "Remove Network Credentials"
  Target Name: "\\server\share"
  Result: isDeletionSuccessful
In this example, the activity deletes the credentials associated with the network address "
\
server\share" from the Windows Credential Manager. The result of the operation (success or failure) is stored in the Boolean variable "isDeletionSuccessful" for further handling in the workflow.
Note: Ensure that the target name is specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Windows Credentials/Get Windows Credentials/index.html

Get Windows Credentials
AutomatR.DefaultActivities.WindowsCredentials.GetWindowsCredentials
The "Get Windows Credentials" activity in AutomatR allows you to obtain the credentials for a specified target from the Windows Credential Manager. It retrieves the username as a string and the password as a secure string, which provides a secure way to store sensitive information like passwords. This activity is useful for securely obtaining stored credentials for authentication or other secure purposes.
Properties
​
Name
Description
Input
Target Name
Represents the network address associated with the stored credentials. This should be the target system or service for which the credentials are stored. String variables containing the target name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Windows Credentials" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Secure Password
Represents the user's password as a secure string variable. SecureString is a secure way to store sensitive information like passwords. This secure password can be used for authentication or securely storing credentials. SecureString variables to store the obtained secure password.
User Name
Specifies the username associated with the stored credentials. This is the username used to authenticate with the target system or service. String variables to store the obtained username.
How to use:
​
Drag and drop the "Get Windows Credentials" activity onto the workflow.
Specify the target name for which you want to obtain the credentials.
Optionally, set the delay for the execution.
Execute the workflow to retrieve the username and secure password for the specified target from the Windows Credential Manager.
Example:
​
Consider an example where the "Get Windows Credentials" activity is used to obtain stored credentials for a network address:
Get Windows Credentials:
  Display Name: "Retrieve Network Credentials"
  Target Name: "\\server\share"
  User Name: obtainedUserName
  Secure Password: obtainedSecurePassword
In this example, the activity retrieves the username and secure password associated with the network address "
\
server\share" from the Windows Credential Manager. The obtained username is stored in the string variable "obtainedUserName," and the secure password is stored in the SecureString variable "obtainedSecurePassword" for further handling in the workflow.
Note: Ensure that the target name is specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Windows Credentials/Add Credential/index.html

Add Credential
AutomatR.DefaultActivities.WindowsCredentials.AddCredential
The "Add Credential" activity in AutomatR facilitates the storage of a specified credential with a custom persistence type in the Windows Credential Manager. This activity is useful for securely storing and managing credentials that can be later used for authentication with target systems or services.
Properties
​
Name
Description
Input
Password
Represents the password to be used in conjunction with the provided credentials. This is the password associated with the provided username for authentication. String variables containing the password.
Target Name
Represents the network address to be used in conjunction with the provided credentials. This should be the target system or service for which the credentials are being stored. String variables containing the target name.
User Name
Specifies the username that will be associated with the stored credentials. This is the username used to authenticate with the target system or service. String variables containing the username.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Credential" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
How to use:
​
Drag and drop the "Add Credential" activity onto the workflow.
Specify the target name, username, and password in the respective properties.
Optionally, set the delay for the execution.
Execute the workflow to store the specified credentials in the Windows Credential Manager.
Example:
​
Consider an example where the "Add Credential" activity is used to store credentials for authenticating with a network address:
Add Credential:
  Display Name: "Store Network Credentials"
  Target Name: "\\server\share"
  User Name: "user123"
  Password: "P@ssw0rd"
In this example, the activity stores the credentials for the network address "
\
server\share" with the username "user123" and password "P@ssw0rd" in the Windows Credential Manager.
Note: Ensure that the target name, username, and password are specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Windows Credentials/Request Credential/index.html

Request Credential
AutomatR.DefaultActivities.WindowsCredentials.RequestCredential
The "Request Credential" activity in AutomatR presents a dialog box to the user, requesting them to provide their credentials. The entered username and password are then stored as string variables and a secure string variable, respectively. These credentials can be utilized for logging into other applications or services, enhancing the security of automation workflows.
Properties
​
Name
Description
Input
Title
Specifies the title of the dialogue box displayed to the user. This title appears at the top of the dialogue box, providing context for the credential input. String variables containing the title.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Request Credential" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Password
Specifies the password entered by the user in the dialogue box. String variables to store the obtained password.
Secure Password
Represents the user's password as a secure string variable. SecureString is a secure way to store sensitive information like passwords. This secure password can be used for authentication or securely storing credentials. SecureString variables to store the obtained secure password.
User Name
Specifies the username entered by the user in the dialogue box. String variables to store the obtained username.
How to use:
​
Drag and drop the "Request Credential" activity onto the workflow.
Specify the title for the dialogue box that will be displayed to the user.
Optionally, set the delay for the execution.
Execute the workflow to present the dialogue box to the user, requesting their credentials.
The obtained username, password, and secure password can be used for further authentication or securely storing credentials.
Example:
​
Consider an example where the "Request Credential" activity is used to prompt the user for their credentials:
Request Credential:
  Display Name: "Prompt User for Credentials"
  Title: "Enter Your Credentials"
  User Name: obtainedUserName
  Password: obtainedPassword
  Secure Password: obtainedSecurePassword
In this example, the activity displays a dialogue box with the title "Enter Your Credentials," prompting the user to enter their username and password. The obtained username is stored in the string variable "obtainedUserName," the password is stored in the string variable "obtainedPassword," and the secure password is stored in the SecureString variable "obtainedSecurePassword" for further handling in the workflow.
Note: Ensure that the title is specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Orchestrator/Transaction/Get Human Task/index.html

Get Human Task
AutomatR.OrchestratorActivities.GetHumanTask
The "Get Human Task" activity in AutomatR OrchestratorActivities retrieves information about a human task created for user input in a workflow. This is particularly useful when you need to access data or responses provided by users during a specific task.
Properties
​
Name
Description
Input
Task ID
Specifies the ID of the human task for which information is to be retrieved. String variables containing the task ID.
Queue Item GUID
Specifies the GUID of the queue item associated with the human task. String variables containing the queue item GUID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Human Task" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
FormData
Outputs the form data associated with the human task. Dictionary variables containing the form data fields and values.
FormJSON
Outputs the form data in JSON format. String variables containing the JSON representation of the form data.
Created On
Outputs the date and time when the human task was created. DateTime variables to store the creation timestamp.
Assigned To
Outputs the email ID of the user to whom the human task is assigned. String variables containing the assigned user's email ID.
Status
Outputs the result of the "Get Human Task" operation, indicating whether the task retrieval was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Get Human Task" activity onto the workflow.
Configure the properties by specifying the task ID and queue item GUID to retrieve information about the human task.
Optionally, configure the delay for the desired waiting time before retrieving the human task information.
Execute the workflow to obtain details such as form data, creation timestamp, and assigned user associated with the specified human task.
Example:

Consider an example where the "Get Human Task" activity is used to retrieve information about a human task:
Get Human Task:
  Task ID: "987654"
  Queue Item GUID: "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
  FormData: humanTaskData
  FormJSON: humanTaskJSON
  Created On: taskCreationTimestamp
  Assigned To: assignedUser
  Status: isTaskRetrievedSuccessfully
In this example, the activity retrieves information about the human task with the specified task ID and queue item GUID. The form data, form JSON, creation timestamp, assigned user, and the result of the operation are stored in the respective variables for further handling in the workflow.
Note: Ensure that the "Get Human Task" activity is appropriately integrated into the workflow, and the provided task ID and queue item GUID are valid for the expected human task.

URL: https://docs.automatr.tech/docs/Products/Activities/Orchestrator/Transaction/Add Human Task/index.html

Add Human Task
AutomatR.OrchestratorActivities.AddHumanTask
The "Add Human Task" activity in AutomatR OrchestratorActivities allows you to incorporate manual intervention in your workflows by sending tasks to users for input. This is particularly useful when a human decision or action is required during the execution of a process.
Properties
​
Name
Description
Input
Transaction ID
Specifies the unique identifier for the transaction whose status is to be updated. String variables containing the transaction ID.
Send to User (email)
Specifies the email ID of the user to whom the task is to be sent. String variables containing the user's email ID.
Form Data Fields
Specifies custom data in dictionary format that needs to be included in the human task. Dictionary variables containing custom data.
Form Name
Specifies the name of the form associated with the human task. String variables containing the form name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Human Task" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Status
Outputs the result of the "Add Human Task" operation, indicating whether the task addition was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Add Human Task" activity onto the workflow.
Configure the properties by specifying the transaction ID, user's email ID, custom data, and form name.
Optionally, configure the delay for the desired waiting time before adding the human task.
Execute the workflow to send a task to the specified user, awaiting their input.
Example:

Consider an example where the "Add Human Task" activity is used to incorporate manual approval in a workflow:
Add Human Task:
  Transaction ID: "123456"
  Send to User (email): "john.doe@example.com"
  Form Data Fields: { "ApprovalType": "Manager", "Comments": "Please review and approve." }
  Form Name: "ApprovalForm"
  Status: isTaskAddedSuccessfully
In this example, the activity sends a task with custom data to the user with the email ID "
john.doe@example.com
" for approval. The result of the operation (success or failure) is stored in the Boolean variable "isTaskAddedSuccessfully" for further handling in the workflow.
Note: Ensure that the "Add Human Task" activity is appropriately integrated into the workflow and that the specified form name aligns with the expected input requirements for the human task.

URL: https://docs.automatr.tech/docs/Products/Activities/Orchestrator/Transaction/Snooze Transaction/index.html

Snooze Transaction
AutomatR.OrchestratorActivities.SnoozeTransaction
The "Snooze Transaction" activity in AutomatR OrchestratorActivities temporarily suspends a transaction in Orchestrator, delaying its processing until a specified date. This activity is useful for managing the timing of transaction execution and is particularly valuable for scenarios where a transaction needs to be postponed until a later time.
Properties
​
Name
Description
Input
Transaction ID
Specifies the ID of the transaction to be snoozed. String variables containing the transaction ID.
Postpone Until
Specifies the date after which the queue item may be processed. DateTime variables containing the postponed date and time.
High Priority
When selected, sets the queue item in high priority.
Custom Data
Enter custom data in dictionary format to associate additional information with the transaction.
Replace Custom Data
Select True or False to indicate whether to replace existing custom data with the provided data. If True, existing custom data is replaced; if False, new data is appended.
Custom Status Key
Specifies a custom status key to be set for the transaction.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Snooze Transaction" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Status
Outputs the result of the "Snooze Transaction" operation, indicating whether the transaction was snoozed successfully or encountered errors. Boolean variables to store the operation result.
How to use:
Drag and drop the "Snooze Transaction" activity onto the workflow.
Configure the properties by specifying the transaction ID and the date after which the transaction should be processed.
Optionally, configure additional parameters such as custom data, custom status key, and high priority.
Execute the workflow to temporarily suspend the specified transaction in Orchestrator.
Example:

Consider an example where the "Snooze Transaction" activity is used to postpone the processing of a transaction:
Snooze Transaction:
  Transaction ID: "123456"
  Postpone Until: "2023-01-01T12:00:00"
  Custom Data: { "Key1": "Value1", "Key2": "Value2" }
  Replace Custom Data: True
  Custom Status Key: "CustomKey"
  High Priority: True
  Status: isTransactionSnoozedSuccessfully
In this example, the activity postpones the processing of the transaction with ID "123456" until January 1, 2023, and associates custom data, a custom status key, and sets high priority. The result of the operation (success or failure) is stored in the Boolean variable "isTransactionSnoozedSuccessfully" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Orchestrator/Transaction/Set Transaction Status/index.html

Set Transaction Status
AutomatR.OrchestratorActivities.SetTransactionStatus
The "Set Transaction Status" activity in AutomatR OrchestratorActivities is designed for updating the status of a transaction in Orchestrator. This activity facilitates the tracking and monitoring of transaction progress within automation processes.
Properties
​
Name
Description
Input
Transaction ID
Specifies the ID of the transaction whose status is to be updated. String variables containing the transaction ID.
Transaction Status
Specifies the status to be set for the transaction. Options include Success, Failure, Retry, and any additional custom statuses. Enum variables containing the desired status.
Custom Data
Enter custom data in dictionary format to associate additional information with the transaction.
Replace Custom Data
Select True or False to indicate whether to replace existing custom data with the provided data. If True, existing custom data is replaced; if False, new data is appended.
Custom Status Key
Specifies a custom status key to be set for the transaction.
Status Message
Specifies a custom status message to provide additional information about the transaction status.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Set Transaction Status" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Status
Outputs the result of the "Set Transaction Status" operation, indicating whether the status update was successful or encountered errors. Boolean variables to store the operation result.
How to use:
Drag and drop the "Set Transaction Status" activity onto the workflow.
Configure the properties by specifying the transaction ID and the desired transaction status.
Optionally, configure additional parameters such as custom data, custom status key, and status message.
Execute the workflow to update the status of the specified transaction in Orchestrator.
Example:

Consider an example where the "Set Transaction Status" activity is used to update the status of a transaction:
Set Transaction Status:
  Transaction ID: "123456"
  Transaction Status: Success
  Custom Data: { "Key1": "Value1", "Key2": "Value2" }
  Replace Custom Data: True
  Custom Status Key: "CustomKey"
  Status Message: "Transaction processed successfully"
  Status: isStatusUpdatedSuccessfully
In this example, the activity updates the status of the transaction with ID "123456" to "Success" and associates custom data, a custom status key, and a status message. The result of the operation (success or failure) is stored in the Boolean variable "isStatusUpdatedSuccessfully" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Orchestrator/Transaction/Update Queue Transaction Data/index.html

Update Queue Transaction Data
AutomatR.OrchestratorActivities.UpdateQueueTransactionData
The "Update Queue Transaction Data" activity in AutomatR OrchestratorActivities allows you to modify transaction data for a queue item in Orchestrator. This activity is particularly useful when you need to update or add custom data, a custom status key, or both to a transaction in a queue.
Properties
​
Name
Description
Input
Transaction ID
Specifies the ID of the transaction to be updated. String variables containing the transaction ID.
Custom Data
Enter custom data in dictionary format to associate additional information with the transaction.
Replace Custom Data
Select True or False to indicate whether to replace existing custom data with the provided data. If True, existing custom data is replaced; if False, new data is appended.
Custom Status Key
Specifies a custom status key to be set for the transaction.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Queue Transaction Data" activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Status
Outputs the result of the "Update Queue Transaction Data" operation, indicating whether the transaction data was updated successfully or encountered errors. Boolean variables to store the operation result.
How to use:
Drag and drop the "Update Queue Transaction Data" activity onto the workflow.
Configure the properties by specifying the transaction ID and either the custom data, custom status key, or both.
Optionally, configure additional parameters such as delay.
Execute the workflow to modify the specified transaction data in Orchestrator.
Example:

Consider an example where the "Update Queue Transaction Data" activity is used to update custom data and a custom status key for a transaction:
Update Queue Transaction Data:
  Transaction ID: "123456"
  Custom Data: { "Key1": "UpdatedValue1", "Key2": "UpdatedValue2" }
  Replace Custom Data: True
  Custom Status Key: "UpdatedCustomKey"
  Status: isTransactionDataUpdatedSuccessfully
In this example, the activity updates the custom data for the transaction with ID "123456," replacing existing data with the provided values. Additionally, it sets a new custom status key. The result of the operation (success or failure) is stored in the Boolean variable "isTransactionDataUpdatedSuccessfully" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Send File To Opened Session/index.html

Send File To Opened Session
AutomatR.WhatsApp.Activities.SendFileToOpenedSession
The "Send File To Opened Session" activity in AutomatR is part of the WhatsApp activities package, facilitating the sending of files in an ongoing conversation to a specific WhatsApp number. This activity streamlines the process of sharing files in WhatsApp sessions, enhancing the automation capabilities for WhatsApp-related workflows.
Properties
​
Name
Description
Input
To WhatsApp Number
Specifies the WhatsApp number to which the file will be sent. WhatsApp Number with country code, Example: 85264318721. Required argument.
File
Selects the file to be sent. This can be a full local path or a browse button to upload the file. All acceptable formats should be selected. Required argument.
Caption
Enter a caption to identify the file to be uploaded. Optional argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send File To Opened Session" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of type 
SendFileSession
 to store the operation result.
How to use:
Drag and drop the "Send File To Opened Session" activity onto the workflow.
Configure the properties by specifying the WhatsApp number, file to be sent, and optionally, provide a caption for the file.
Optionally, configure the delay and customize the display name.
Execute the workflow to send the specified file to the ongoing conversation in the WhatsApp session.
Example:

Consider an example where the "Send File To Opened Session" activity is used to send an image file named "sample.jpg" to a WhatsApp number:
Send File To Opened Session:
  Display Name: "Send Sample File"
  To WhatsApp Number: "85264318721"
  File: "D:/sample.jpg"
  Caption: "Sample Image"
  Result: sendFileResult
In this example, the activity sends the "sample.jpg" file to the WhatsApp number "85264318721" with the caption "Sample Image." The result of the operation is stored in the 
sendFileResult
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Get Contacts List/index.html

Get Contacts List
AutomatR.WhatsApp.Activities.GetContactsList
The "Get Contacts List" activity in AutomatR is part of the WhatsApp activities package, providing the ability to retrieve a list of contacts from a specified WhatsApp number. This activity is designed to facilitate the extraction of contact information, enabling comprehensive automation of WhatsApp-related workflows.
Properties
​
Name
Description
Input
Attributes
Attribute parameters format: 
[{name: "name", operator: "contain", value: "test"}]
 (String). Allows filtering contacts based on specified attributes.
Created Date
Date of creation of a contact. Created Date format: YYYY-MM-DD or MM-DD-YYYY (String).
Name
Specifies the contact name to be filtered out (String).
Page Number
Enter the page number for the contacts to be retrieved (Int32).
Page Size
Enter the page size for the contacts to be retrieved (Int32).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Contacts List" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs the response as a JSON object containing information about the success or failure of the "Get Contacts List" operation. Variables of relevant types (e.g., ResultGetContactsList) to store the operation result.
How to use:
Drag and drop the "Get Contacts List" activity onto the workflow.
Configure the properties by specifying the contact name, created date, attributes, page size, page number, and any optional delay.
Execute the workflow to retrieve the list of contacts based on the specified criteria.
Example:

Consider an example where the "Get Contacts List" activity is used to retrieve a list of contacts with the name containing "test," created on a specific date, and displaying 10 contacts per page:
Get Contacts List:
  Display Name: "Retrieve Test Contacts"
  Name: "test"
  Created Date: "2023-01-01"
  Attributes: "[{name: "category", operator: "equal", value: "A"}]"
  Page Size: 10
  Page Number: 1
  Response: contactsList
In this example, the activity retrieves a list of contacts with the name containing "test," created on January 1, 2023, and belonging to category "A." The result of the operation is stored in the variable "contactsList" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Get Message By WhatsApp Number/index.html

Get Message By WhatsApp Number
AutomatR.WhatsApp.Activities.GetMessageByWhatsAppNumber
The "Get Message By WhatsApp Number" activity in AutomatR is part of the WhatsApp activities package, allowing users to retrieve messages from a specified WhatsApp number. This activity enhances automation workflows by providing access to WhatsApp conversation history.
Properties
​
Name
Description
Input
WhatsApp Number
Specifies the WhatsApp number for which messages need to be fetched. WhatsApp Number with country code, Example: 85264318721. Required argument.
Page Size
Specifies the page size for retrieving messages. Optional argument.
Page Number
Specifies the page number for retrieving messages. Optional argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Message By WhatsApp Number" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the JSON response containing the messages. Variables of type 
ResultGetMessageByNumber
 to store the operation result.
How to use:
Drag and drop the "Get Message By WhatsApp Number" activity onto the workflow.
Configure the properties by specifying the WhatsApp number for which messages should be fetched.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve messages from the specified WhatsApp number.
Example:

Consider an example where the "Get Message By WhatsApp Number" activity is used to retrieve messages from a WhatsApp number "85264318721":
Get Message By WhatsApp Number:
  Display Name: "Retrieve WhatsApp Messages"
  WhatsApp Number: "85264318721"
  Page Size: 10
  Page Number: 1
  Response: whatsappMessages
In this example, the activity retrieves the first 10 messages from the WhatsApp number "85264318721" and stores the result in the 
whatsappMessages
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Send Message To Opened Session/index.html

Send Message To Opened Session
AutomatR.WhatsApp.Activities.SendMessageToOpenedSession
The "Send Message To Opened Session" activity in AutomatR is part of the WhatsApp activities package, facilitating the continuation of messages in an ongoing conversation within a WhatsApp session. This activity streamlines communication processes in automation workflows, allowing the sending of messages to a specific WhatsApp number.
Properties
​
Name
Description
Input
To WhatsApp Number
Specifies the WhatsApp number to which the message should be sent. WhatsApp Number with country code, Example: 85264318721. Required argument.
Message Text
Specifies the text of the message to be sent in the ongoing conversation. Required argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Message To Opened Session" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Returns the response as Form Details. Variables of type 
MessageResponse
 to store the operation result.
How to use:
Drag and drop the "Send Message To Opened Session" activity onto the workflow.
Configure the properties by specifying the WhatsApp number, message text, and optionally, the delay.
Optionally, customize the display name.
Execute the workflow to send the specified message to the ongoing WhatsApp session.
Example:

Consider an example where the "Send Message To Opened Session" activity is used to send a continuation message to a WhatsApp number "85264318721":
Send Message To Opened Session:
  Display Name: "Continue WhatsApp Conversation"
  To WhatsApp Number: "85264318721"
  Message Text: "Hello, how can I assist you further?"
  Result: messageResponse
In this example, the activity sends the message "Hello, how can I assist you further?" to the WhatsApp number "85264318721" in the ongoing conversation. The response is stored in the 
messageResponse
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Send Template Message/index.html

Send Template Message
AutomatR.WhatsApp.Activities.SendTemplateMessage
The "Send Template Message" activity in AutomatR is part of the WhatsApp activities package, providing the ability to send template messages via WhatsApp. This activity streamlines the process of sending predefined templates to a specific WhatsApp number.
Properties
​
Name
Description
Input
To WhatsApp Number
Specifies the recipient's WhatsApp number to which the template message should be sent. WhatsApp Number with country code, Example: 85264318721. Required argument.
Template Name
Specifies the name of the pre-existing approved template to be used for the message. Required argument.
Broadcast Name
Specifies the broadcast name. Required argument.
Parameters
Specifies one or more objects that can be part of the body of the template message with their values. Required argument. Format: Dictionary<string, string>.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Template Message" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the response from the WhatsApp service. Variables of type 
SendTemplateMessageResponse
 to store the operation result.
How to use:
Drag and drop the "Send Template Message" activity onto the workflow.
Configure the properties by specifying the WhatsApp number, template name, broadcast name, and parameters for the template message.
Optionally, configure the delay and customize the display name.
Execute the workflow to send the specified template message to the designated WhatsApp number.
Example:

Consider an example where the "Send Template Message" activity is used to send a template message to a WhatsApp number "85264318721":
Send Template Message:
  Display Name: "Send Welcome Message"
  To WhatsApp Number: "85264318721"
  Template Name: "WelcomeTemplate"
  Broadcast Name: "GeneralBroadcast"
  Parameters: {"Name": "John", "Product": "AutomatR"}
  Response: templateMessageResponse
In this example, the activity sends the "WelcomeTemplate" message to the WhatsApp number "85264318721" with parameters {"Name": "John", "Product": "AutomatR"}. The response is stored in the 
templateMessageResponse
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/WhatsApp Scope/index.html

WhatsApp Scope
AutomatR.WhatsApp.Activities.WhatsAppScope
The "WhatsApp Scope" activity in AutomatR provides a scoped environment for executing activities related to the WhatsApp service. It is designed to encapsulate a series of WhatsApp-related activities within a defined scope, facilitating better organization and management of WhatsApp interactions.
Properties
​
Name
Description
Input
Access Token
Allows you to enter the access token used for authentication and authorization with WhatsApp services. Required argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "WhatsApp Scope" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "WhatsApp Scope" activity onto the workflow.
Configure the properties by specifying the access token required for WhatsApp authentication.
Optionally, configure the delay.
Place other WhatsApp-related activities within the scope of the "WhatsApp Scope" activity.
Execute the workflow to perform WhatsApp activities within the defined scope.
Example:

Consider an example where the "WhatsApp Scope" activity is used to send template messages:
WhatsApp Scope:
  Display Name: "WhatsApp Interaction"
  Access Token: "your_whatsapp_access_token"
  Delay: 2
  Send Template Messages:
    Delay: 1
    Template Name: "WelcomeTemplate"
    Broadcast Name: "GeneralBroadcast"
    Receivers: [{"WhatsAppNumber": "85264318721", "Parameters": {"Name": "John", "Product": "AutomatR"}},
                {"WhatsAppNumber": "919876543210", "Parameters": {"Name": "Alice", "Product": "Automation"}}]
    Response: templateMessagesResponse
In this example, the "WhatsApp Scope" activity is used to encapsulate the interactions with the WhatsApp service. It ensures that the access token is valid and sets up the necessary HTTP headers. The delay is configured for synchronization, and within the scope, a "Send Template Messages" activity is performed. The response is stored in the 
templateMessagesResponse
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Send Template Messages/index.html

Send Template Messages
AutomatR.WhatsApp.Activities.SendTemplateMessages
The "Send Template Messages" activity in AutomatR is part of the WhatsApp activities package, providing a versatile scope for executing activities related to the WhatsApp service. This activity allows the sending of multiple template messages to different recipients within a single workflow execution.
Properties
​
Name
Description
Input
Template Name
Specifies the name of the pre-existing approved template to be used for the messages. Required argument.
Broadcast Name
Specifies the broadcast name. Required argument.
Receivers
Specifies a list of objects with specific input parameters for each recipient. Each object should contain the recipient's WhatsApp number and additional template parameters. Required argument. Format: 
List<whatappReceiver>
.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Template Messages" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Returns the response from the WhatsApp service. Variables of type 
ResultSendTemplateMessages
 to store the operation result.
How to use:
Drag and drop the "Send Template Messages" activity onto the workflow.
Configure the properties by specifying the template name, broadcast name, and a list of receivers with WhatsApp numbers and template parameters.
Optionally, configure the delay and customize the display name.
Execute the workflow to send the specified template messages to the designated recipients.
Example:

Consider an example where the "Send Template Messages" activity is used to send template messages to multiple recipients:
Send Template Messages:
  Display Name: "Send Welcome Messages"
  Template Name: "WelcomeTemplate"
  Broadcast Name: "GeneralBroadcast"
  Receivers: [{"WhatsAppNumber": "85264318721", "Parameters": {"Name": "John", "Product": "AutomatR"}},
              {"WhatsAppNumber": "919876543210", "Parameters": {"Name": "Alice", "Product": "Automation"}}]
  Response: templateMessagesResponse
In this example, the activity sends the "WelcomeTemplate" message to two recipients ("85264318721" and "919876543210") with individual parameters. The response is stored in the 
templateMessagesResponse
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Add Contact/index.html

Add Contact
AutomatR.WhatsApp.Activities.AddContact
The "Add Contact" activity in AutomatR is part of the WhatsApp activities package, facilitating the creation of a new WhatsApp contact for a given business WhatsApp account. This activity integrates seamlessly with other WhatsApp-related activities, providing a comprehensive solution for managing WhatsApp interactions in automation workflows.
Properties
​
Name
Description
Input
WhatsApp Number
Specifies the WhatsApp number for which the contact needs to be added. It should include the country code. String variables containing the WhatsApp number. Example: 85264318721.
Name
Specifies the name for the user for whom the new WhatsApp number is being added. String variables containing the user's name.
Parameters
Adds one or more objects that can be part of the body of the template message with their values. (Array of objects) (Required) Example: Name and Value Key Pair. Dictionary variables containing the parameters.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Add Contact" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the response as Form Details, including information about the success or failure of the "Add Contact" operation. Variables of relevant types (e.g., ResultCreateContact) to store the operation result.
How to use:
Drag and drop the "Add Contact" activity onto the workflow.
Configure the properties by specifying the WhatsApp number, name, and any additional parameters for the new contact.
Optionally, configure the delay and customize the display name.
Execute the workflow to add the specified contact to WhatsApp.
Example:

Consider an example where the "Add Contact" activity is used to add a new contact with the WhatsApp number "85264318721" and the name "John Doe" to a business WhatsApp account:
Add Contact:
  Display Name: "Add John Doe to WhatsApp"
  WhatsApp Number: "85264318721"
  Name: "John Doe"
  Parameters: { "param1": "value1", "param2": "value2" }
  Result: contactAddResult
In this example, the activity adds a new contact with the specified WhatsApp number and name, along with additional parameters, if provided. The result of the operation is stored in the variable "contactAddResult" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WhatsApp/Get Media By File Name/index.html

Get Media By File Name
AutomatR.WhatsApp.Activities.GetMediaByFileName
The "Get Media By File Name" activity in AutomatR is part of the WhatsApp activities package, allowing users to retrieve media files from a specified WhatsApp number based on the provided file name. This activity simplifies the process of fetching media content, enhancing automation capabilities for WhatsApp-related workflows.
Properties
​
Name
Description
Input
File Name
Specifies the file name format with the full path. For example: 
data/images/c1d465a1-3cbf-4190-a936-1c2ddd63f057.jpg
 (String). Required argument.
File Path
Provides the full path to save the retrieved file. For example: 
D:/sample.jpg
 (String). Required argument.
Overwrite
When selected, overwrites existing files in the destination folder with the retrieved file. Boolean variable.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Media By File Name" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
How to use:
Drag and drop the "Get Media By File Name" activity onto the workflow.
Configure the properties by specifying the file name with the full path, the destination file path, and optionally, whether to overwrite existing files.
Optionally, configure the delay and customize the display name.
Execute the workflow to retrieve the specified media file from WhatsApp and save it to the provided destination path.
Example:

Consider an example where the "Get Media By File Name" activity is used to retrieve an image file named "sample.jpg" from a WhatsApp number and save it to the "D:/" directory:
Get Media By File Name:
  Display Name: "Retrieve Sample Image"
  File Name: "data/images/sample.jpg"
  File Path: "D:/sample.jpg"
  Overwrite: true
In this example, the activity retrieves the image file named "sample.jpg" from the specified WhatsApp number, and if the file already exists at "D:/sample.jpg," it overwrites the existing file.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Read Cell/index.html

Read Cell
AutomatR.DefaultActivities.WorkBook.ReadCell
The "Read Cell" activity in AutomatR is part of the WorkBook activities package, allowing you to read the value of an Excel cell and store it in a variable. This activity is designed to retrieve specific cell content from an Excel spreadsheet, facilitating data extraction in automation workflows.
Properties
​
Name
Description
Input
Cell Number
Specifies the cell number you want to read. String variables containing the cell number.
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the Excel file path.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Sheet Name
Specifies the name of the spreadsheet in which you want to perform the action. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Cell" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Returns the cell value in string format. String variables to store the cell value.
How to use:
​
Drag and drop the "Read Cell" activity onto the workflow.
Specify the full path of the Excel workbook, including the filename.
Specify the name of the sheet from which to read the cell value.
Specify the cell number from which to read the value.
Optionally, provide the password for the workbook if required.
Optionally, set the delay for the execution.
Execute the workflow to read the specified cell value from the Excel spreadsheet.
Example:
​
Consider an example where the "Read Cell" activity is used to read the value from cell "A1" in the "Sheet1" of an Excel workbook:
Read Cell:
  Display Name: "Read Cell A1"
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "Sheet1"
  Cell Number: "A1"
  Password: workbookPassword
  Result: cellValue
In this example, the activity reads the value from cell "A1" in the "Sheet1" of the Excel workbook located at "C:\excelActivities\workbook.xlsx". If a password is required for the workbook, it is provided through the "workbookPassword" variable. The resulting cell value is stored in the variable "cellValue" for further use in the workflow.
Note: Ensure that the Excel file path, sheet name, and cell number are specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Append Range/index.html

Append Range
AutomatR.DefaultActivities.WorkBook.AppendRange
The "Append Range" activity in AutomatR is part of the WorkBook activities package, allowing you to add information stored in a DataTable variable to the end of a specified Excel spreadsheet. This activity facilitates the dynamic updating of Excel files, enhancing data management in automation workflows.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable reference containing the information to be appended to the Excel spreadsheet. DataTable variables from other activities (e.g., Read Range).
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the Excel file path.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Sheet Name
Specifies the name of the spreadsheet in which you want to perform the action. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Append Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
How to use:
​
Drag and drop the "Append Range" activity onto the workflow.
Specify the full path of the Excel workbook, including the filename.
Specify the name of the sheet in which you want to append data.
Optionally, provide the password for the workbook if required.
Specify the DataTable variable reference containing the information to be appended.
Optionally, set the delay for the execution.
Execute the workflow to append the specified data to the Excel spreadsheet.
Example:
​
Consider an example where the "Append Range" activity is used to add information from a DataTable variable to the end of an Excel spreadsheet:
Append Range:
  Display Name: "Append Data to Excel"
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "Sheet1"
  Password: workbookPassword
  Data Table: dataTableVariable
In this example, the activity appends data from the "dataTableVariable" to the "Sheet1" of the Excel workbook located at "C:\excelActivities\workbook.xlsx". If a password is required for the workbook, it is provided through the "workbookPassword" variable.
Note: Ensure that the Excel file path and sheet name are specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Read Cell Formula/index.html

Read Cell Formula
AutomatR.DefaultActivities.WorkBook.ReadCellFormula
The "Read Cell Formula" activity in AutomatR is part of the WorkBook activities package, allowing you to extract the formula used in the specified Excel cell. This activity is designed to provide transparency into the formulas used in Excel cells, supporting data analysis and automation workflows.
Properties
​
Name
Description
Input
Cell
Specifies the cell number for which you need to read the Excel formula. String variables containing the cell number.
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the Excel file path.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Sheet Name
Specifies the name of the spreadsheet in which you want to perform the action. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Cell Formula" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Returns the formula used in the specified Excel cell in string format. String variables to store the formula.
How to use:
​
Drag and drop the "Read Cell Formula" activity onto the workflow.
Specify the full path of the Excel workbook, including the filename.
Specify the name of the sheet from which to read the cell formula.
Specify the cell number for which you want to extract the formula.
Optionally, provide the password for the workbook if required.
Optionally, set the delay for the execution.
Execute the workflow to read the formula from the specified cell in the Excel spreadsheet.
Example:
​
Consider an example where the "Read Cell Formula" activity is used to extract the formula from cell "A1" in the "Sheet1" of an Excel workbook:
Read Cell Formula:
  Display Name: "Read Formula A1"
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "Sheet1"
  Cell: "A1"
  Password: workbookPassword
  Result: cellFormula
In this example, the activity extracts the formula from cell "A1" in the "Sheet1" of the Excel workbook located at "C:\excelActivities\workbook.xlsx". If a password is required for the workbook, it is provided through the "workbookPassword" variable. The resulting formula is stored in the variable "cellFormula" for further use in the workflow.
Note: Ensure that the Excel file path, sheet name, and cell number are specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Write Range/index.html

Write Range
AutomatR.DefaultActivities.WorkBook.WriteRange
The "Write Range" activity in AutomatR is part of the WorkBook activities package, allowing users to write data from a DataTable variable into a specified range within an Excel spreadsheet. This activity is useful for automating the population of Excel sheets with structured data.
Properties
​
Name
Description
Input
Data Table
Specifies the DataTable variable containing the data to be written into the Excel sheet. DataTable variables obtained from other activities, e.g., Read Range Result Variable.
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the file path.
Include Headers
When enabled, considers column headers as the first row in the mentioned cell range. Boolean variables to enable or disable.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Sheet Name
Specifies the name of the spreadsheet in which to write the data. String variables containing the sheet name.
Starting Cell
Specifies the cell value to start writing the data. For example, "A1" for a single cell. String variables containing the starting cell.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Write Range" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
How to Use
​
Drag and drop the "Write Range" activity onto the workflow.
Configure the properties by specifying the Excel file path, sheet name, starting cell, and DataTable variable containing the data.
Optionally, configure the delay, password, and header settings.
Execute the workflow to write the specified data from the DataTable into the designated range in the Excel spreadsheet.
Example
​
Consider an example where the "Write Range" activity is used to write data from a DataTable variable named "OutputData" into cells starting from "B2" in a sheet named "DataSheet" in a workbook located at "C:\excelActivities\workbook.xlsx":
Write Range:
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "DataSheet"
  Starting Cell: "B2"
  Password: "securepassword"
  Header: true
  Data Table: OutputData
In this example, the activity writes the data from the "OutputData" DataTable variable into cells starting from "B2" in the "DataSheet" and updates the Excel workbook accordingly.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Read Row/index.html

Read Row
AutomatR.DefaultActivities.WorkBook.ReadRow
The "Read Row" activity in AutomatR is part of the WorkBook activities package, allowing users to read the values of an entire row in an Excel spreadsheet. This activity is useful for extracting data from specific rows in Excel for further processing in your workflow.
Properties
​
Name
Description
Input
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the file path.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Row Index
Specifies the index of the row to be read. Enter the row index as a string. For example, "1" for the first row. String variables containing the row index.
Sheet Name
Specifies the name of the spreadsheet from which to read the row. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Row" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
Output
Result
Outputs the values of the selected row as a list of strings. Variables of type 
List<string>
  to store the values of the row.
How to Use
​
Drag and drop the "Read Row" activity onto the workflow.
Configure the properties by specifying the Excel file path, sheet name, and row index.
Optionally, configure the delay.
Execute the workflow to read the values of the specified row in the Excel spreadsheet.
Example
​
Consider an example where the "Read Row" activity is used to read the values of the third row from an Excel sheet named "DataSheet" in a workbook located at "C:\excelActivities\workbook.xlsx":
Read Row:
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "DataSheet"
  Row Index: "3"
  Result: rowValues
In this example, the activity reads the values of the third row from the "DataSheet" and stores them in the 
List<string>
 variable "rowValues" for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Read Range/index.html

Read Range
AutomatR.DefaultActivities.WorkBook.ReadRange
The "Read Range" activity in AutomatR is part of the WorkBook activities package, facilitating the extraction of values from a specified Excel range and storing them in a DataTable variable. This activity enhances data handling capabilities in automation workflows.
Properties
​
Name
Description
Input
Excel File Path
Specifies the full path of the workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the path.
Include Headers
When enabled, considers the first row as the header in the mentioned range of cells. Boolean variables to determine header inclusion.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Range
Specifies the range to read and use for further operations. String variables containing the range (e.g., "A1:B10").
Sheet Name
Specifies the name of the spreadsheet in which you want to perform the action. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Range" activity. Useful for handling synchronization issues. Integer variables containing the delay duration (e.g., 5 seconds).
Output
Result
Stores the data extracted from the specified range in a DataTable variable. DataTable variables to store the extracted data.
How to use:
Drag and drop the "Read Range" activity onto the workflow.
Configure the properties by specifying the Excel file path, sheet name, range, and other optional parameters.
Optionally, configure the delay for synchronization and customize other settings.
Execute the workflow to read the specified range in the Excel workbook and store the data in a DataTable variable.
Example:

Consider an example where the "Read Range" activity is used to read data from cells A1 to B10 in the "Sheet1" of the workbook "workbook.xlsx":
Read Range:
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "Sheet1"
  Range: "A1:B10"
  Include Headers: True
  Delay: 5
  Password: "your_password"
  Result: ExcelData
In this example, the activity reads the specified range, including headers, from the "Sheet1" of the workbook and stores the data in the DataTable variable "ExcelData" for further processing.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Write Cell/index.html

Write Cell
AutomatR.DefaultActivities.WorkBook.WriteCell
The "Write Cell" activity in AutomatR is part of the WorkBook activities package, allowing users to write a value into a specified cell or range within an Excel spreadsheet. This activity is useful for automating data entry and updating values in Excel workbooks.
Properties
​
Name
Description
Input
Cell Number
Specifies the cell number (or range) where the data should be written in the Excel sheet. For example, "A1" for a single cell or "A1:B2" for a range. String variables containing the cell number or range.
Cell Value
Specifies the value to be written into the specified cell or range. String variables containing the value to be written.
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the file path.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Sheet Name
Specifies the name of the spreadsheet in which to write the cell value. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Write Cell" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the delay is 5 seconds, enter "5".
How to Use
​
Drag and drop the "Write Cell" activity onto the workflow.
Configure the properties by specifying the Excel file path, sheet name, cell number, cell value, and optionally, the delay.
Execute the workflow to write the specified value into the designated cell or range in the Excel spreadsheet.
Example
​
Consider an example where the "Write Cell" activity is used to write the value "100" into cell "A1" of a sheet named "DataSheet" in a workbook located at "C:\excelActivities\workbook.xlsx":
Write Cell:
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "DataSheet"
  Cell Number: "A1"
  Cell Value: "100"
In this example, the activity writes the value "100" into cell "A1" of the "DataSheet" and updates the Excel workbook accordingly.

URL: https://docs.automatr.tech/docs/Products/Activities/WorkBook/Read Column/index.html

Read Column
AutomatR.DefaultActivities.WorkBook.ReadColumn
The "Read Column" activity in AutomatR is part of the WorkBook activities package, allowing you to read values from a column in an Excel spreadsheet. This activity provides flexibility in extracting column data based on either the column name or index, enabling efficient data retrieval for analysis and automation workflows.
Properties
​
Name
Description
Input
Column Index
Specifies the index of the column for which values need to be retrieved. String variables containing the column index.
Column Name
Specifies the name of the column for which values need to be retrieved. String variables containing the column name.
Excel File Path
Specifies the full path of the Excel workbook on the local drive, including the filename (e.g., "C:\excelActivities\workbook.xlsx"). String variables containing the Excel file path.
Password
Specifies the password for the workbook if required. Object variables containing the password.
Sheet Name
Specifies the name of the spreadsheet in which you want to perform the action. String variables containing the sheet name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Read Column" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
Returns the list of strings containing the values of the selected column. List variables to store the column values.
How to use:
​
Drag and drop the "Read Column" activity onto the workflow.
Specify the full path of the Excel workbook, including the filename.
Specify the name of the sheet from which to read the column values.
Specify either the column name or index for which you want to retrieve values.
Optionally, provide the password for the workbook if required.
Optionally, set the delay for the execution.
Execute the workflow to read values from the specified column in the Excel spreadsheet.
Example:
​
Consider an example where the "Read Column" activity is used to extract values from the "ColumnA" of the "Sheet1" in an Excel workbook:
Read Column:
  Display Name: "Read ColumnA Values"
  Excel File Path: "C:\excelActivities\workbook.xlsx"
  Sheet Name: "Sheet1"
  Column Name: "ColumnA"
  Password: workbookPassword
  Result: columnValues
In this example, the activity reads the values from "ColumnA" in the "Sheet1" of the Excel workbook located at "C:\excelActivities\workbook.xlsx". If a password is required for the workbook, it is provided through the "workbookPassword" variable. The resulting column values are stored in the list variable "columnValues" for further use in the workflow.
Note: Ensure that either the column name or index is specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Twilio/Send MMS/index.html

Send MMS
AutomatR.Twilio.Activities.SendMMS
The "Send MMS" activity in AutomatR is part of the Twilio SMS activities package, allowing you to send multimedia content, such as images, videos, and audio, through text messages. This activity simplifies the process of sending multimedia messages, enhancing automation workflows involving SMS communication.
Properties
​
Name
Description
Input
Account SID
It is a unique identifier assigned to each Twilio account. It serves as a primary identifier for account management and API authentication purposes. Required argument.
Auth Token
It is a confidential access credential used to securely interact with Twilio's services. Required argument.
Body
Represents the actual message content that will be included in an MMS communication. Required argument.
To
Refers to the receiver's phone number who the message is being sent. Required argument.
From
Refers to the sender's phone number who the message is being sent. Required argument.
Media URL
Refers to a web address or URL that points to multimedia content, such as images, videos, or audio files, that you want to include in an MMS Message. Required argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send MMS" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Message Response
Stores the result in a 
List<MessageResource>
, which can be utilized in other subsequent activities. Variables of type 
List<MessageResource>
 to store the result.
How to use:
Drag and drop the "Send MMS" activity onto the workflow.
Configure the properties by specifying the Twilio account SID, authentication token, message content, recipient's phone number, sender's phone number, and media URL.
Optionally, configure the delay.
Execute the workflow to send the multimedia message.
Example:

Consider an example where the "Send MMS" activity is used to send an image message to multiple recipients:
Send MMS:
  Account SID: "your_twilio_account_sid"
  Auth Token: "your_twilio_auth_token"
  Body: "Hello, check out this image!"
  To: "+1234567890,+9876543210"
  From: "+9876543210"
  Media URL: "https://example.com/image.jpg"
  Delay: 2
  Message Response: mmsResponses
In this example, the activity sends an MMS with the specified content and media URL to recipients with phone numbers +1234567890 and +9876543210. The response, containing information about each sent message, is stored in the 
mmsResponses
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Twilio/Send SMS/index.html

Send SMS
AutomatR.Twilio.Activities.SendSMS
The "Send SMS" activity in AutomatR is part of the Twilio SMS activities package, allowing you to send text messages efficiently. This activity simplifies the process of sending SMS, enhancing automation workflows involving SMS communication.
Properties
​
Name
Description
Input
Account SID
It is a unique identifier assigned to each Twilio account. It serves as a primary identifier for account management and API authentication purposes. Required argument.
Auth Token
It is a confidential access credential used to securely interact with Twilio's services. Required argument.
Body
Represents the actual message content that will be included in an SMS communication. Required argument.
To
Refers to the receiver's phone number who the message is being sent. Required argument.
From
Refers to the sender's phone number who the message is being sent. Required argument.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send SMS" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Message Response
Stores the result in a 
List<MessageResource>
, which can be utilized in other subsequent activities. Variables of type 
List<MessageResource>
 to store the result.
How to use:
Drag and drop the "Send SMS" activity onto the workflow.
Configure the properties by specifying the Twilio account SID, authentication token, message content, recipient's phone number, and sender's phone number.
Optionally, configure the delay.
Execute the workflow to send the text message.
Example:

Consider an example where the "Send SMS" activity is used to send a text message to multiple recipients:
Send SMS:
  Account SID: "your_twilio_account_sid"
  Auth Token: "your_twilio_auth_token"
  Body: "Hello, this is an automated message!"
  To: "+1234567890,+9876543210"
  From: "+9876543210"
  Delay: 2
  Message Response: smsResponses
In this example, the activity sends an SMS with the specified content to recipients with phone numbers +1234567890 and +9876543210. The response, containing information about each sent message, is stored in the 
smsResponses
 variable for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Messages/Get Message/index.html

Get Message
AutomatR.MicrosoftTeams.Activities.GetMessage
The "Get Message" activity in AutomatR for Microsoft Teams retrieves a specific message using the Message ID within Teams. This activity facilitates the management and access of chat messages in Teams, providing essential functionality for automation workflows.
Properties
​
Name
Description
Input
Channel ID
Specifies the Channel ID for the message when retrieving a channel message. String variables containing the Channel ID.
Team ID
Specifies the Team ID for the message when retrieving a channel message. String variables containing the Team ID.
Chat ID
Specifies the Chat ID for the message when retrieving a chat message. String variables containing the Chat ID.
Message ID
Specifies the Message ID for the message to be retrieved. String variables containing the Message ID.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Message" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a 
Microsoft.Graph.ChatMessage
 object representing the retrieved chat message in Teams. This object includes information about the message, such as sender details, content, and timestamp.
How to use:
Drag and drop the "Get Message" activity onto the workflow.
Configure the properties by specifying the Channel ID, Team ID, Chat ID, and Message ID for the message you want to retrieve.
Optionally, configure the delay.
Execute the workflow to retrieve the specified message within Microsoft Teams.
Example:

Consider an example where the "Get Message" activity is used to retrieve a message with the Message ID "message123" from a Teams channel with the Channel ID "channel456" and Team ID "team789":
Get Message:
  Channel ID: "channel456"
  Team ID: "team789"
  Message ID: "message123"
  Result: teamMessage
In this example, the activity retrieves the message with the specified Message ID from the Teams channel within the specified team. The resulting 
teamMessage
 object contains information about the retrieved message for further processing within the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Messages/Get Messages/index.html

Get Message Replies
AutomatR.MicrosoftTeams.Activities.GetMessageReplies
The "Get Message Replies" activity in AutomatR for Microsoft Teams retrieves replies associated with a specific message in Teams. This functionality allows for a comprehensive analysis of conversation threads, providing insights into the ongoing discussions within a channel. The activity returns a collection page (
ICollectionPage<ChatMessage>
) for managing and accessing chat messages.
Properties
​
Name
Description
Input
Channel ID
Specifies the Channel ID for retrieving message replies. String variables containing the Channel ID.
Team ID
Specifies the Team ID for retrieving message replies. String variables containing the Team ID.
Message ID
Specifies the Message ID for which replies should be retrieved. String variables containing the Message ID.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Message Replies" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a collection page (
ICollectionPage<ChatMessage>
) containing the retrieved message replies. This collection includes information about each reply, such as sender details, content, and timestamp.
How to use:
Drag and drop the "Get Message Replies" activity onto the workflow.
Configure the properties by specifying the Channel ID, Team ID, and Message ID for which you want to retrieve replies.
Optionally, configure the delay.
Execute the workflow to retrieve the message replies within Microsoft Teams.
Example:

Consider an example where the "Get Message Replies" activity is used to retrieve replies for a message with the Message ID "message123" in a Teams channel with the Channel ID "channel456" and Team ID "team789":
Get Message Replies:
  Channel ID: "channel456"
  Team ID: "team789"
  Message ID: "message123"
  Result: messageReplies
In this example, the activity retrieves the replies associated with the specified message within the Teams channel. The resulting 
messageReplies
 collection page contains information about each reply for further processing within the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Messages/Reply To Message/index.html

Reply To Message
AutomatR.MicrosoftTeams.Activities.ReplyToMessage
The "Reply To Message" activity in AutomatR's Microsoft Teams package facilitates the automation of responding to messages within a Microsoft Teams channel. This activity allows you to add a response to a conversation thread in Teams.
Properties
​
Name
Description
Input
Channel ID
Specifies the unique identifier (ID) of the channel where the message is located. String variables containing the channel ID.
Team ID
Specifies the unique identifier (ID) of the team to which the channel belongs. String variables containing the team ID.
Message ID
Specifies the unique identifier (ID) of the message to which you want to reply. String variables containing the message ID.
Message Reply
Specifies the text of the reply message you want to add to the conversation thread. String variables containing the reply message.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Reply To Message" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the reply message was sent successfully (
true
) or encountered any errors (
false
). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Reply To Message" activity onto the workflow.
Configure the properties by specifying the team ID, channel ID, message ID, and the text of the reply message.
Optionally, configure the delay.
Execute the workflow to add a reply to the specified message within Microsoft Teams.
Example:

Consider an example where the "Reply To Message" activity is used to respond to a message in a Teams channel:
Reply To Message:
  Delay: 2
  Team ID: "abcd1234"
  Channel ID: "efgh5678"
  Message ID: "ijkl9012"
  Message Reply: "Thank you for your message!"
  Result: isReplySuccessful
In this example, the activity waits for 2 seconds before executing, adds a reply to the message with the ID "ijkl9012" in the channel with the ID "efgh5678" within the team with the ID "abcd1234." The result of the operation (success or failure) is stored in the Boolean variable "isReplySuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Messages/Send Message/index.html

Send Message
AutomatR.MicrosoftTeams.Activities.SendMessage
The "Send Message" activity in AutomatR's Microsoft Teams package allows you to send messages through chat or a channel in Microsoft Teams. This activity facilitates communication within Teams, enabling automation workflows to interact with team members seamlessly.
Properties
​
Name
Description
Input
Channel ID
Specifies the unique identifier (ID) of the channel where the message will be sent. String variables containing the channel ID.
Team ID
Specifies the unique identifier (ID) of the team to which the channel belongs. String variables containing the team ID.
Chat ID
Specifies the unique identifier (ID) of the chat where the message will be sent. String variables containing the chat ID.
Message
Specifies the text of the message you want to send. String variables containing the message text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Send Message" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a 
Microsoft.Graph.ChatMessage
 object representing a chat message in Microsoft Teams. The object contains information such as content, sender, timestamp, and attachments. Variables of relevant types (e.g., 
Microsoft.Graph.ChatMessage
 variables) to store the sent message details.
How to use:
Drag and drop the "Send Message" activity onto the workflow.
Configure the properties by specifying the team ID, channel ID, chat ID, and the text of the message.
Optionally, configure the delay.
Execute the workflow to send the specified message within Microsoft Teams.
Example:

Consider an example where the "Send Message" activity is used to send a message in a Teams channel:
Send Message:
  Delay: 2
  Team ID: "abcd1234"
  Channel ID: "efgh5678"
  Message: "Hello Team! This is an automated message."
  Result: sentMessageDetails
In this example, the activity waits for 2 seconds before executing, sends the message "Hello Team! This is an automated message" to the channel with the ID "efgh5678" within the team with the ID "abcd1234." The details of the sent message are stored in the 
Microsoft.Graph.ChatMessage
 variable "sentMessageDetails" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Messages/Get Message Replies/index.html

Get Message Replies
AutomatR.MicrosoftTeams.Activities.GetMessageReplies
The "Get Message Replies" activity in AutomatR's Microsoft Teams package allows you to retrieve message replies in Teams for comprehensive conversation analysis and insights. This activity helps in accessing chat messages and managing replies within the specified channel and team in Microsoft Teams.
Properties
​
Name
Description
Input
Channel ID
Specifies the unique identifier (ID) of the channel where the original message and its replies are located. String variables containing the channel ID.
Team ID
Specifies the unique identifier (ID) of the team to which the channel belongs. String variables containing the team ID.
Message ID
Specifies the unique identifier (ID) of the message for which replies need to be retrieved. String variables containing the message ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Message Replies" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a 
ICollectionPage<ChatMessage>
 representing a collection page for managing and accessing chat messages, specifically the replies to the specified message. Variables of relevant types (e.g., 
ICollectionPage<ChatMessage>
 variables) to store the retrieved message replies.
How to use:
Drag and drop the "Get Message Replies" activity onto the workflow.
Configure the properties by specifying the team ID, channel ID, message ID for which replies need to be retrieved.
Optionally, configure the delay.
Execute the workflow to retrieve the message replies within Microsoft Teams.
Example:

Consider an example where the "Get Message Replies" activity is used to retrieve replies for a specific message in a Teams channel:
Get Message Replies:
  Delay: 2
  Team ID: "abcd1234"
  Channel ID: "efgh5678"
  Message ID: "ijkl9012"
  Result: messageReplies
In this example, the activity waits for 2 seconds before executing, retrieves the replies for the message with the ID "ijkl9012" in the channel with the ID "efgh5678" within the team with the ID "abcd1234." The retrieved message replies are stored in the 
ICollectionPage<ChatMessage>
 variable "messageReplies" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Project/Microsoft Teams Scope/index.html

Microsoft Teams Scope
AutomatR.MicrosoftTeams.Activities.MicrosoftTeamsScope
The "Microsoft Teams Scope" activity in AutomatR establishes a connection to Microsoft Teams and provides a scope for all subsequent activities within the Teams package. This activity manages the authentication details and ensures that subsequent Microsoft Teams activities execute within the specified scope.
Properties
​
Name
Description
Input
Refresh Token
Specifies the API key (Refresh Token) for the Teams user's account. The Refresh Token is used to authenticate the connection to Microsoft Teams. Use the provided editor to securely enter the Refresh Token.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Delay (in seconds) between the time this activity is completed and the time the next activity begins any operations. Adding a delay between activities ensures that one activity has enough time to complete before the next activity begins. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
MicrosoftTeamsScopeApp
Outputs the Microsoft Teams scope application details, providing a structured way to manage the connection to Microsoft Teams. This output is used internally by the activity to pass authentication details to subsequent Microsoft Teams activities.
How to use:
Drag and drop the "Microsoft Teams Scope" activity onto the workflow.
Configure the properties by entering the Refresh Token obtained from Microsoft Teams.
Optionally, configure the delay.
Use the output 
MicrosoftTeamsScopeApp
 to pass authentication details to subsequent Microsoft Teams activities.
Example:

Consider an example where the "Microsoft Teams Scope" activity is used to establish a connection to Microsoft Teams:
Microsoft Teams Scope:
  Delay: 2
  Refresh Token: teamsRefreshToken
  MicrosoftTeamsScopeApp: teamsScopeApp
In this example, the activity waits for 2 seconds before executing, uses the specified Refresh Token ("teamsRefreshToken") for authentication, and outputs the Microsoft Teams scope application details to the variable "teamsScopeApp." This variable is then used to pass authentication details to subsequent Microsoft Teams activities within the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Channel/Create Channel/index.html

Create Channel
AutomatR.MicrosoftTeams.CreateChannel
The "Create Channel" activity in AutomatR for Microsoft Teams is designed to create a new channel within a specified Microsoft Teams account. This activity streamlines the process of channel creation, enhancing the efficiency of automation workflows focused on Microsoft Teams integration.
Properties
​
Name
Description
Input
Channel Name
Specifies the name of the channel to be created. String variables containing the desired channel name.
Channel Description
Specifies the description of the channel to be created. String variables containing the channel description.
Team ID
Specifies the Team ID where the channel will be created. String variables containing the Team ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Create Channel" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Create Channel" operation, indicating whether the channel creation was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Create Channel" activity onto the workflow.
Configure the properties by specifying the channel name, channel description, and Team ID for channel creation within Microsoft Teams.
Optionally, configure the delay and customize the display name.
Execute the workflow to create a new channel within the specified Microsoft Teams account.
Example:

Consider an example where the "Create Channel" activity is used to create a channel named "General" within a Microsoft Teams team:
Create Channel:
  Display Name: "Create General Channel"
  Channel Name: "General"
  Channel Description: "General discussions and announcements"
  Team ID: "teamIdVariable"
  Result: isChannelCreated
In this example, the activity creates a new channel named "General" within the Microsoft Teams team specified by the Team ID. The result of the operation (success or failure) is stored in the Boolean variable "isChannelCreated" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Channel/Get Channels/index.html

Get Channels
AutomatR.MicrosoftTeams.Activities.GetChannels
The "Get Channels" activity in AutomatR for Microsoft Teams retrieves a collection of channels associated with a specified Microsoft Teams team. This activity is beneficial for efficiently managing and accessing channels within Teams, streamlining collaboration and automation workflows.
NOTE:
 Guest users can't see private or shared channels that they aren't members of in the response.
Properties
​
Name
Description
Input
Team ID
Specifies the Team ID for which channels are to be retrieved. String variables containing the Team ID.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Channels" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a 
Microsoft.Graph.ITeamChannelsCollectionPage
 object, representing a collection page for accessing team channels in Microsoft Teams. This collection page includes information about the channels associated with the specified team, such as channel names, IDs, and other relevant details.
How to use:
Drag and drop the "Get Channels" activity onto the workflow.
Configure the properties by specifying the Team ID for which you want to retrieve channels.
Optionally, configure the delay.
Execute the workflow to retrieve a collection of channels associated with the specified Microsoft Teams team.
Example:

Consider an example where the "Get Channels" activity is used to retrieve channels for a Teams team with the Team ID "team123":
Get Channels:
  Team ID: "team123"
  Delay: 1
  Result: teamChannels
In this example, the activity retrieves a collection of channels associated with the Teams team with the Team ID "team123". The resulting 
teamChannels
 object contains information about the channels, enabling further processing within the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Channel/Update Channel/index.html

Update Channel
AutomatR.MicrosoftTeams.UpdateChannel
The "Update Channel" activity in AutomatR's Microsoft Teams package allows you to update the details of a channel within a Microsoft Teams team. This activity is useful for automating changes to channel properties, such as updating the channel name.
Properties
​
Name
Description
Input
Channel ID
Specifies the unique identifier (ID) of the channel you want to update. String variables containing the channel ID.
Team ID
Specifies the unique identifier (ID) of the team to which the channel belongs. String variables containing the team ID.
New Name
Specifies the new name that you want to assign to the channel. String variables containing the new channel name.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Update Channel" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a boolean value indicating whether the channel update was successful (
true
) or encountered any errors (
false
). Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Update Channel" activity onto the workflow.
Configure the properties by specifying the team ID, channel ID, and the new name for the channel.
Optionally, configure the delay.
Execute the workflow to update the specified channel within Microsoft Teams.
Example:

Consider an example where the "Update Channel" activity is used to change the name of a channel in Microsoft Teams:
Update Channel:
  Delay: 2
  Team ID: "abcd1234"
  Channel ID: "efgh5678"
  New Name: "UpdatedChannel"
  Result: isUpdateSuccessful
In this example, the activity waits for 2 seconds before executing, updates the channel with the ID "efgh5678" in the team with the ID "abcd1234" to the new name "UpdatedChannel." The result of the operation (success or failure) is stored in the Boolean variable "isUpdateSuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Channel/Delete Channel/index.html

Delete Channel
AutomatR.MicrosoftTeams.DeleteChannel
The "Delete Channel" activity in AutomatR for Microsoft Teams facilitates the removal of a channel within a specified Microsoft Teams account. This activity streamlines the process of channel deletion, enhancing the efficiency of automation workflows focused on Microsoft Teams integration.
Properties
​
Name
Description
Input
Channel ID
Specifies the ID of the channel to be deleted. String variables containing the Channel ID.
Team ID
Specifies the Team ID from which the channel will be deleted. String variables containing the Team ID.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Delete Channel" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Delete Channel" operation, indicating whether the channel deletion was successful or encountered errors. Variables of relevant types (e.g., Boolean variables) to store the operation result.
How to use:
Drag and drop the "Delete Channel" activity onto the workflow.
Configure the properties by specifying the Channel ID and Team ID for the channel deletion within Microsoft Teams.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified channel within the specified Microsoft Teams account.
Example:

Consider an example where the "Delete Channel" activity is used to delete a channel with the ID "channelIdVariable" within a Microsoft Teams team:
Delete Channel:
  Display Name: "Delete General Channel"
  Channel ID: "channelIdVariable"
  Team ID: "teamIdVariable"
  Result: isChannelDeleted
In this example, the activity deletes the channel with the specified Channel ID within the Microsoft Teams team specified by the Team ID. The result of the operation (success or failure) is stored in the Boolean variable "isChannelDeleted" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Channel/Get Channel/index.html

Get Channel
AutomatR.MicrosoftTeams.Activities.GetChannel
The "Get Channel" activity in AutomatR for Microsoft Teams retrieves details about a specific channel within a Microsoft Teams team. This activity is valuable for accessing channel information and managing channels within Teams.
Properties
​
Name
Description
Input
Team ID
Specifies the Team ID to which the target channel belongs. String variables containing the Team ID.
Channel ID
Specifies the Channel ID for which details are to be retrieved. String variables containing the Channel ID.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Channel" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a 
Microsoft.Graph.Channel
 object, representing the details of the specified channel within the Microsoft Teams team. This includes information such as the channel's display name, ID, and other relevant details.
How to use:
Drag and drop the "Get Channel" activity onto the workflow.
Configure the properties by specifying the Team ID and Channel ID for the channel you want to retrieve details for.
Optionally, configure the delay.
Execute the workflow to retrieve details about the specified channel within the Microsoft Teams team.
Example:

Consider an example where the "Get Channel" activity is used to retrieve details about a channel with the Channel ID "channel123" within a Teams team with the Team ID "team456":
Get Channel:
  Team ID: "team456"
  Channel ID: "channel123"
  Delay: 1
  Result: channelDetails
In this example, the activity retrieves details about the channel with the Channel ID "channel123" within the Teams team with the Team ID "team456". The resulting 
channelDetails
 object contains information about the specified channel, which can be further processed in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Users/Get Users/index.html

Get Users
AutomatR.MicrosoftTeams.Activities.GetUsers
The "Get Users" activity in AutomatR for Microsoft Teams retrieves a collection of users in Teams, providing detailed user information and collaboration insights. This activity returns a collection page (
ICollectionPage<User>
) containing user objects, allowing you to access and analyze user data within your automation workflows.
Properties
​
Name
Description
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get Users" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a collection page (
ICollectionPage<User>
) containing detailed information about the retrieved users in Teams. This collection includes properties such as user ID, display name, email address, and more.
How to use:
Drag and drop the "Get Users" activity onto the workflow.
Optionally, configure the delay.
Execute the workflow to retrieve a collection of users in Microsoft Teams.
Example:

Consider an example where the "Get Users" activity is used to retrieve a collection of users in Microsoft Teams:
Get Users:
  Delay: 2
  Result: teamsUsers
In this example, the activity waits for 2 seconds before executing and retrieves a collection of users in Microsoft Teams. The resulting 
teamsUsers
 collection page contains detailed information about each user for further processing within the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/MicrosoftTeams/Chats/Get All Chats/index.html

Get All Chats
AutomatR.MicrosoftTeams.Activities.GetAllChats
The "Get All Chats" activity in AutomatR for Microsoft Teams retrieves all conversations among all chats for a specified user. This activity facilitates access to chat conversations, enhancing the capabilities of automation workflows focused on Microsoft Teams integration.
Properties
​
Name
Description
Input
Email ID
Specifies the email address associated with the user account for which chat conversations need to be retrieved. String variables containing the email address.
Misc
Display Name
The display name of the activity. A display name is automatically generated when you indicate a target.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get All Chats" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs a collection page (
Microsoft.Graph.ICollectionPage<Chat>
) containing chat conversations among all chats for the specified user. This can be further utilized in the workflow for processing chat data.
How to use:
Drag and drop the "Get All Chats" activity onto the workflow.
Configure the properties by specifying the email address for the user account.
Optionally, configure the delay.
Execute the workflow to retrieve all chat conversations for the specified user.
Example:

Consider an example where the "Get All Chats" activity is used to retrieve all chat conversations for a user with the email address "
user@example.com
":
Get All Chats:
  Email ID: "user@example.com"
  Delay: 1
  Result: allChatsCollection
In this example, the activity retrieves all chat conversations for the user with the email address "
user@example.com
" with a delay of 1 second. The resulting collection page (
allChatsCollection
) contains information about the chat conversations, which can be further processed in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Reply Outlook Mail Message/index.html

Reply Mail Message
AutomatR.Outlook.ReplyMailMessage
The "Reply Mail Message" activity in AutomatR is part of the Outlook activities package, allowing you to reply to an email message in Microsoft Outlook. This activity provides the flexibility to compose a reply email, include additional recipients, set the body content, and attach files if needed.
Properties
​
Name
Description
Input
Additional To Email Address
Specifies additional email addresses to include in the "To" field of the reply email.
Additional CC Email IDs
Specifies additional email addresses to include in the "CC" field of the reply email.
Attachments
Specifies a list of file paths representing attachments to include in the reply email.
BCC Email IDs
Specifies email addresses to include in the "BCC" field of the reply email.
Body
Specifies the plain text body content of the reply email.
HTML Body
Specifies the HTML body content of the reply email.
Mail Message
Specifies the email message (MailItem object) in Outlook that you want to reply to.
Reply All
Specifies whether to reply to all recipients (true) or only the original sender (false).
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Response
Returns true if the reply email was sent successfully; otherwise, an exception is thrown.
How to use:
​
Drag and drop the "Reply Mail Message" activity onto the workflow.
Configure the properties by specifying the email message to reply to, additional recipients, body content, and other relevant details.
Optionally, configure the delay and customize the display name.
Execute the workflow to send a reply email in Microsoft Outlook.
Example:
​
Consider an example where the "Reply Mail Message" activity is used to reply to an inquiry email:
Reply Mail Message:
  Display Name: "Reply to Inquiry"
  Mail Message: inquiryEmail
  Additional To Email Address: "additional@email.com"
  Body: "Thank you for your inquiry. We will get back to you shortly."
  Response: isReplySuccessful
In this example, the activity composes a reply email to the "inquiryEmail," including an additional recipient and a custom body message. The success of the reply operation is stored in the Boolean variable "isReplySuccessful" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Save Outlook Mail Attachments/index.html

Save Mail Attachments
AutomatR.Outlook.SaveMailAttachments
The "Save Mail Attachments" activity in AutomatR is part of the Outlook activities package, designed to save attachments from an email message in Microsoft Outlook to a specified location on the local system. This activity streamlines the process of extracting and storing email attachments for further use in automation workflows.
Properties
​
Name
Description
Input
Mail Message
Specifies the email message (MailItem object) in Outlook from which you want to save the attachments.
Save Location
Specifies the directory path where the attachments should be saved.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to use:
​
Drag and drop the "Save Mail Attachments" activity onto the workflow.
Configure the properties by specifying the email message containing attachments and the directory path to save them.
Optionally, configure the delay and customize the display name.
Execute the workflow to save attachments from the specified email message to the designated local directory.
Example:
​
Consider an example where the "Save Mail Attachments" activity is used to save attachments from an inquiry email:
Save Mail Attachments:
  Display Name: "Save Inquiry Attachments"
  Mail Message: inquiryEmail
  Save Location: "C:\Attachments\"
In this example, the activity saves attachments from the "inquiryEmail" to the "C:\Attachments\" directory. Adjust the example details according to your specific workflow requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Send Outlook Mail Message/index.html

Send Mail Message
AutomatR.Outlook.SendMailMessage
The "Send Mail Message" activity in AutomatR is part of the Outlook activities package, designed to send an email message using Microsoft Outlook. This activity streamlines the process of sending emails within automation workflows.
Properties
​
Name
Description
Input
Account Name
Specifies the name of the Outlook account to use for sending the email.
BCCEmailIDs
Specifies the email address(es) to be added in the BCC (blind carbon copy) field of the email.
Body
Specifies the plain text body of the email.
CCEmailIDs
Specifies the email address(es) to be added in the CC (carbon copy) field of the email.
HTML Body
Specifies the HTML body of the email.
Subject
Specifies the subject line of the email.
To Email Address
Specifies the email address(es) of the primary recipient(s) of the email.
Attachments
Specifies a list of file paths for attachments to be added to the email.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Response
Returns a boolean value indicating whether the email was sent successfully. Variables of relevant types (e.g., Boolean variables) to store the send status.
How to use:
​
Drag and drop the "Send Mail Message" activity onto the workflow.
Configure the properties by specifying the necessary details such as account name, recipient email address, subject, body, etc.
Optionally, configure the delay and customize the display name.
Execute the workflow to send the specified email using Microsoft Outlook.
Example:
​
Consider an example where the "Send Mail Message" activity is used to send an inquiry email:
Send Mail Message:
  Display Name: "Send Inquiry Email"
  Account Name: "myOutlookAccount"
  To Email Address: "inquiry@example.com"
  CC Email IDs: "cc@example.com"
  BCC Email IDs: "bcc@example.com"
  Subject: "Regarding Your Inquiry"
  Body: "Dear User, Thank you for your inquiry. We will get back to you soon."
  HTML Body: "<p>Dear User,</p><p>Thank you for your inquiry. We will get back to you soon.</p>"
  Attachments: ["C:\Attachments\document.pdf"]
  Response: isEmailSentSuccessfully
In this example, the activity sends an inquiry email to the specified recipient with additional recipients in CC and BCC. The email content includes both plain text and HTML body, and an attachment is added. The result of the send operation (success or failure) is stored in the Boolean variable "isEmailSentSuccessfully" for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Save Outlook Mail Message/index.html

Save Mail Message
AutomatR.Outlook.SaveMailMessage
The "Save Mail Message" activity in AutomatR is part of the Outlook activities package, designed to save an email message from Microsoft Outlook to a specified location on the local system. This activity facilitates the storage of email messages for further reference or processing within automation workflows.
Properties
​
Name
Description
Input
Mail Message
Specifies the email message (MailItem object) in Outlook that you want to save.
Save At
Specifies the directory path or file path where the email message should be saved.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
How to use:
​
Drag and drop the "Save Mail Message" activity onto the workflow.
Configure the properties by specifying the email message to be saved and the directory or file path for saving.
Optionally, configure the delay and customize the display name.
Execute the workflow to save the specified email message from Outlook to the designated local location.
Example:
​
Consider an example where the "Save Mail Message" activity is used to save an important inquiry email:
Save Mail Message:
  Display Name: "Save Inquiry Email"
  Mail Message: inquiryEmail
  Save At: "C:\SavedEmails\"
In this example, the activity saves the "inquiryEmail" to the "C:\SavedEmails\" directory. Adjust the example details according to your specific workflow requirements.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Move Outlook Mail Message/index.html

Move Outlook Mail Message
Certainly! Here's the help documentation for the "Move Mail Message" activity:
#
 Move Mail Message
`AutomatR.Outlook.MoveMailMessage`
The "Move Mail Message" activity in AutomatR is part of the Outlook activities package, facilitating the movement of an email message from one folder to another in Microsoft Outlook. This activity enhances email organization within automation workflows.
##
 Properties
|
 Name                     
|
 Description      
|
|
 
------------------------
 
|
 
-----
 
|
|
 
**
*
Input
*
**
              
|
   
|
|
 Account Name             
|
 Specifies the name of the Outlook account from which the email message is to be moved. If not specified, the first account in Outlook will be used. 
|
|
 Destination Folder Name  
|
 Specifies the name of the destination folder where you want to move the email message.                          
|
|
 Mail Message             
|
 Specifies the email message (MailItem object) in Outlook that you want to move to another folder.              
|
|
 Select Destination Folder
|
 Specifies the type of default folder or destination folder to select. You can choose from the available default folders in Outlook or provide a custom folder name. 
|
|
 
**
*
Misc
*
**
               
|
    
|
|
 Display Name             
|
 Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name. 
|
|
 
**
*
Optional
*
**
           
|
    
|
|
 Delay   
|
 Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.  
|
##
 How to use:
1.
 Drag and drop the "Move Mail Message" activity onto the workflow.
2.
 Configure the properties by specifying the Outlook account name, mail message, destination folder name, and select destination folder type.
3.
 Optionally, configure the delay and customize the display name.
4.
 Execute the workflow to move the specified email message to the designated folder in Outlook.
##
 Example:
Consider an example where the "Move Mail Message" activity is used to move an important email to the "Archive" folder:
```plaintext
Move Mail Message:
  Display Name: "Move Important Email"
  Account Name: "PrimaryAccount"
  Mail Message: importantEmail
  Destination Folder Name: "Archive"
  Select Destination Folder: Custom
In this example, the activity moves the 
importantEmail
 to the "Archive" folder within the specified Outlook account. Adjust the details and options based on your specific use case.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Mark Outlook Mail As Read Unread/index.html

Mark Mail Message Read/Unread
AutomatR.Outlook.MarkMailAsReadUnread
The "Mark Mail Message Read/Unread" activity in AutomatR is part of the Outlook activities package, allowing the marking of an email message in Microsoft Outlook as read or unread. This activity provides flexibility in managing the read status of mail messages within automation workflows.
Properties
​
Name
Description
Input
Mail Message
The 
MailItem
 object representing the mail message in Outlook to mark as read or unread. It is a required argument.
Mark As Read
Specifies whether to mark the mail message as read. If set to true, the mail message will be marked as read.
Mark As UnRead
Specifies whether to mark the mail message as unread. If set to true, the mail message will be marked as unread.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Response
A boolean value indicating whether the marking of the mail message as read or unread was successful. It will be set to true if the operation was successful.
How to use:
​
Drag and drop the "Mark Mail Message Read/Unread" activity onto the workflow.
Configure the properties by specifying the mail message, and choose whether to mark it as read or unread.
Optionally, configure the delay and customize the display name.
Execute the workflow to mark the specified mail message as read or unread in Outlook.
Example:
​
Consider an example where the "Mark Mail Message Read/Unread" activity is used to mark a specific mail message as read:
Mark Mail Message Read/Unread:
  Display Name: "Mark Important Email"
  Mail Message: importantEmail
  Mark As Read: true
  Response: markingSuccessful
In this example, the activity marks the 
importantEmail
 as read, and the result of the operation (success or failure) is stored in the Boolean variable 
markingSuccessful
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Get Outlook Mail Message/index.html

Get Mail Messages
AutomatR.Outlook.GetMailMessage
The "Get Mail Messages" activity in AutomatR is part of the Outlook activities package, allowing the retrieval of email messages from Microsoft Outlook. This activity streamlines the process of fetching and filtering emails based on specified criteria, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Account Name
The name of the Outlook account from which to retrieve mail messages.
Body Containing
Specifies the body text that the retrieved mail messages should contain.
Default Folder
The default Outlook folder from which to retrieve mail messages. It is a required argument.
End Date
Please enter the end date to assist in filtering the emails (example: 2023-07-26 17:00 or 2023-07-26).
Folder Name
The name of the Outlook folder from which to retrieve mail messages.
From
Specifies the email address or name of the sender of the retrieved mail messages.
Get Only Attachments
Retrieve mail messages that have attachments.
Get Only Unread
Retrieve only unread mail messages.
Has Attachments
The maximum number of mail messages to retrieve.
Mark As Read After Get
Mark retrieved mail messages as read.
Number Of Mails
The name of the Outlook folder from which to retrieve mail messages.
Sender
Specifies the email address or name of the sender of the retrieved mail messages.
Start Date
Please enter the start date to assist in filtering the emails (example: 2023-07-26 01:00 or 2023-07-26).
Subject Containing
Specifies the subject text that the retrieved mail messages should contain.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project.
Optional
Delay
Enter the wait time in seconds (Example: 5 seconds, i.e., 5) to start the activity.
Output
Result
A list of 
MailItem
 objects representing the retrieved mail messages from Outlook.
How to use:
​
Drag and drop the "Get Mail Messages" activity onto the workflow.
Configure the properties by specifying the criteria for retrieving mail messages.
Optionally, configure the delay and customize the display name.
Execute the workflow to fetch the specified mail messages from Outlook.
Example:
​
Consider an example where the "Get Mail Messages" activity is used to retrieve unread emails with attachments from the default inbox:
Get Mail Messages:
  Display Name: "Fetch Unread Emails with Attachments"
  Default Folder: Inbox
  Get Only Unread: true
  Get Only Attachments: true
  Result: retrievedEmails
In this example, the activity retrieves unread emails with attachments from the default inbox, and the result is stored in the 
retrievedEmails
 list for further processing in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Outlook/Delete Outlook Mail Message/index.html

Delete Mail Message
AutomatR.Outlook.DeleteMailMessage
The "Delete Mail Message" activity in AutomatR is part of the Outlook activities package, facilitating the deletion of an email message from Microsoft Outlook. This activity streamlines email management tasks within Outlook, enhancing the efficiency of automation workflows.
Properties
​
Name
Description
Input
Mail Message
Specifies the email message to be removed. Requires a 
MailItem
 object representing the email message.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before starting the activity. Useful for handling synchronization issues. Integer variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Response
Outputs a Boolean value indicating whether the mail deletion was successful (
true
) or encountered errors (
false
). Variables of Boolean type to store the operation result.
How to use:
​
Drag and drop the "Delete Mail Message" activity onto the workflow.
Configure the properties by specifying the email message to be deleted.
Optionally, configure the delay and customize the display name.
Execute the workflow to delete the specified email message from Outlook.
Example:
​
Consider an example where the "Delete Mail Message" activity is used to delete a specific email from Outlook:
Delete Mail Message:
  Display Name: "Delete Important Email"
  Mail Message: importantMailItem
  Response: isDeletionSuccessful
In this example, the activity deletes the email message represented by the 
importantMailItem
 object from the Outlook inbox. The result of the operation (success or failure) is stored in the Boolean variable 
isDeletionSuccessful
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Clipboard/Read Text File/index.html

Read Text File
The "Read Text File" activity in AutomatR is designed to read the content of a text file, providing a straightforward way to extract textual information for further processing within the automation workflow.
Name
Description
Input
File Path
Specifies the path of the text file from which content needs to be read. Supports a 
string
 variable.
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Entry Delay
Specifies a delay (in seconds) before executing the activity, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Output
Output
Captures the result of the "Read Text File" operation, storing the text content read from the specified file. It supports a 
string
 variable, allowing the extracted information to be used in subsequent activities within the workflow.
Effectively configuring these properties allows for the efficient extraction of textual information from a text file, providing valuable data for automation processes that involve reading and processing text-based content.

URL: https://docs.automatr.tech/docs/Products/Activities/Clipboard/Get From Clipboard/index.html

Get From Clipboard
AutomatR.DefaultActivities.SystemClipboard.GetFromClipboard
The "Get From Clipboard" activity in AutomatR retrieves data from the system clipboard, allowing you to access text or other data stored in the clipboard. This is particularly useful when you need to capture information that has been copied to the clipboard for use in your automation workflows.
Properties
​
Name
Description
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Get From Clipboard" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
It stores the data retrieved from the clipboard in the form of a string variable. String variables containing the clipboard data.
How to use:
​
Drag and drop the "Get From Clipboard" activity onto the workflow.
Optionally, set the delay for the execution.
Execute the workflow to retrieve data from the clipboard.
The data from the clipboard is stored in the variable specified in the "Result" property for further use in the workflow.
Example:
​
Consider an example where the "Get From Clipboard" activity is used to retrieve text that has been copied to the clipboard:
Get From Clipboard:
  Display Name: "Retrieve Copied Text"
  Result: copiedText
In this example, the activity retrieves the text from the clipboard and stores it in the variable "copiedText" for further use in the workflow.
Note: Ensure that data has been copied to the clipboard before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Clipboard/Copy Selected Text/index.html

Copy Selected Text
AutomatR.DefaultActivities.SystemClipboard.CopySelectedText
The "Copy Selected Text" activity in AutomatR allows you to copy the selected text from a specified process or the entire system clipboard. This is particularly useful for extracting text from a specific application or copying text from the global clipboard.
Properties
​
Name
Description
Input
Process Name
Specify the process name in the form of a string variable. This determines the source from which the text will be copied. If no process name is provided, the activity copies the selected text from the system clipboard. String variables containing the process name.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variable or argument containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Copy Selected Text" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
Output
Result
The result will be stored in the form of a string variable and can be used in other activities. String variables containing the selected text.
How to use:
​
Drag and drop the "Copy Selected Text" activity onto the workflow.
Configure the properties by specifying the process name or leaving it blank for the system clipboard.
Optionally, set the delay for the execution.
Execute the workflow to copy the selected text.
The selected text is stored in the variable specified in the "Result" property for further use in the workflow.
Example:
​
Consider an example where the "Copy Selected Text" activity is used to extract text from a specific application named "Notepad":
Copy Selected Text:
  Display Name: "Copy Text from Notepad"
  Process Name: "notepad"
  Result: selectedText
In this example, the activity sets the focus on the "Notepad" application, copies the selected text using the "Ctrl+C" shortcut, and stores the result in the variable "selectedText" for further use in the workflow. If no process name is provided, the activity copies the text from the global clipboard.
Note: Make sure the specified process name matches the running application's process name, and the application has text selected.

URL: https://docs.automatr.tech/docs/Products/Activities/Clipboard/Set To Clipboard/index.html

Set To Clipboard
AutomatR.DefaultActivities.SystemClipboard.SetToClipboard
The "Set To Clipboard" activity in AutomatR allows you to set a specified text on the system clipboard, making it available for use in other applications or automation workflows.
Properties
​
Name
Description
Input
Text
Specify the text that you want to copy to the clipboard. String variables containing the text to be copied.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. The display name enhances clarity and organization within the automation project. String variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Set To Clipboard" activity. This can be useful for handling synchronization issues. Integer variables containing the delay duration. Example: If the amount of time is 5 seconds, enter 5.
How to use:
​
Drag and drop the "Set To Clipboard" activity onto the workflow.
Specify the text you want to copy to the clipboard in the "Text" property.
Optionally, set the delay for the execution.
Execute the workflow to set the specified text on the clipboard.
Example:
​
Consider an example where the "Set To Clipboard" activity is used to set a specific text, such as an email address, on the clipboard:
Set To Clipboard:
  Display Name: "Set Email to Clipboard"
  Text: "example@email.com"
In this example, the activity sets the text "
example@email.com
" on the clipboard, making it available for pasting into other applications or automation activities.
Note: Ensure that the text is specified before executing this activity.

URL: https://docs.automatr.tech/docs/Products/Activities/Clipboard/Message Box/index.html

Message Box
AutomatR.DefaultActivities.Applications.MessageBox
The "Message Box" activity in AutomatR displays a message box with specified text, title, buttons, and icon. This activity is useful for interacting with users during the execution of an automation workflow.
Properties
​
Name
Description
Input
Buttons
Specifies the buttons to be displayed on the message box. Choose from options like "OK," "Yes/No," "Retry/Cancel," etc. Enumerated value: 
MessageBoxButtonsCustom
.
Delay
Specifies the amount of time (in seconds) to wait before executing the "Message Box" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Icon
Specifies the icon to be displayed on the message box. Choose from options like "Information," "Warning," "Error," etc. Enumerated value: 
MessageBoxIconsCustom
.
Message
Specifies the text to be displayed in the message box. 
String
 variables containing the message text.
Title
Specifies the title of the message box. 
String
 variables containing the title text.
Misc
Display Name
Provides a customizable name for the activity displayed in the workflow. Enhances clarity and organization within the automation project. 
String
 variables containing the desired display name.
Optional
Delay
Specifies the amount of time (in seconds) to wait before executing the "Message Box" activity. This can be useful for handling synchronization issues. 
Integer
 variables containing the delay duration. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e., 1.
Output
Result
Outputs the result of the "Message Box" operation, indicating which button the user chose during runtime. 
String
 variables containing the chosen button. Possible values: "Yes," "No," "Cancel," "OK," "Abort," "Ignore," "Retry," or "None" if no button is selected.
How to use:
Drag and drop the "Message Box" activity onto the workflow.
Configure the properties by specifying the message text, title, buttons, and icon for the message box.
Optionally, configure the delay for synchronization purposes.
Execute the workflow to display the message box with the specified configuration.
Example:

Consider an example where the "Message Box" activity is used to display a warning message:
Message Box:
  Delay: 1
  Title: "Warning"
  Message: "This action cannot be undone. Do you want to proceed?"
  Buttons: YesNo
  Icon: Warning
  Result: userChoice
In this example, the activity displays a message box titled "Warning" with the specified message, "This action cannot be undone. Do you want to proceed?" The message box includes "Yes" and "No" buttons, and the user's choice is stored in the string variable 
userChoice
 for further handling in the workflow.

URL: https://docs.automatr.tech/docs/Products/Activities/Clipboard/Paste From Clipboard/index.html

Paste From Clipboard
The "Paste From Clipboard" activity in AutomatR streamlines the process of pasting content stored in the clipboard into a specified target, enhancing the automation of data transfer between applications.
Name
Description
Misc
Display Name
This property allows you to customize the display name of the activity within the workflow.
Optional
Delay
Specifies a delay (in seconds) before executing the paste operation, providing flexibility in the timing of the workflow. Supports an 
Int32
 variable. Ex.: If the amount of time is 1000 milliseconds or 1 sec, i.e. 1.
Method
Defines the method used for pasting content from the clipboard. Options include: 
 
Send Key:
 Utilizes simulated keystrokes to execute the paste operation.
Window API:
 Leverages the Windows API to perform the paste operation.
Restricted Web Site:
 Tailors the paste method for websites with restricted paste capabilities.
 This property supports a PasteMethod 
enumeration
 variable, allowing flexibility in choosing the most suitable method for the specific automation scenario.
Timeout
Specifies the maximum amount of time (in seconds) that the activity should wait for the paste operation to complete. Supports an 
Int32
 variable.
Effectively configuring these properties allows for the seamless and controlled pasting of content from the clipboard into the desired target, enhancing the efficiency of automation processes that involve data transfer between applications.

